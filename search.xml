<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[承上启下]]></title>
      <url>http://www.linmuxi.com/2018/02/11/plan-2018-001/</url>
      <content type="html"><![CDATA[<p>工作原因好像很久没有记录点什么了；年末稍微清闲点了，尝试计划来写点东西，计划内容很小清新，不复杂（其实是写不出复杂的东西来）；<br>plan：<br>1、elk环境搭建<br>2、elasticsearch集群部署<br>3、风控生产jvm奔溃异常分析过程<br>4、dubbo线程飙升异常分析过程<br>5、kafka实操：修改offset重复消费或跳过消费<br>6、maven之profile入门</p>
<p>过去的2017年，平稳、祥和；希望2018年来点不一样的，突破自我，取的更好的成绩，加油!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis集群配置说明]]></title>
      <url>http://www.linmuxi.com/2017/03/07/redis-cluster-deploy-01/</url>
      <content type="html"><![CDATA[<h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><p>redis版本：3.2.8<br>两台ubuntu，IP分别是：172.28.23.4、172.28.23.83，下面简称为ubuntuA、ubuntuB<br>分别在ubuntuA和ubuntuB上面运行3个redis实例</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>1、下载解压redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">wget http://download.redis.io/releases/redis-3.2.8.tar.gz</div><div class="line">tar -zxf redis-3.2.8.tar.gz</div></pre></td></tr></table></figure></p>
<p>2、编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd redis-3.2.8</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>安装完成后可以运行make test检查安装是否正确</p>
<p>3、ruby运行环境安装<br>因为后面我们需要使用到redis提供的redis-trib.rb来进行集群节点操作，该脚本是用ruby语言编写，所以需要先安装ruby运行环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install ruby</div><div class="line">gem install redis</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="实战操作"><a href="#实战操作" class="headerlink" title="实战操作"></a>实战操作</h4><p>1、创建redis节点目录<br>step1.在ubuntuA上redis根目录下创建redis_cluster目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd redis-3.2.8</div><div class="line">mkdir redis_cluster</div></pre></td></tr></table></figure></p>
<p>step2.在redis_cluster目录下分别创建8001、8002、8003目录，并将redis根目录下的redis.conf复制到这三个目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd redis_cluster</div><div class="line">mkdir 8001 8002 8003</div><div class="line">cp ../redis.conf 8001</div><div class="line">cp ../redis.conf 8002</div><div class="line">cp ../redis.conf 8003</div></pre></td></tr></table></figure></p>
<p>step3.分别修改这三个目录下redis.conf配置文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bind 127.0.0.1 172.28.23.4</div><div class="line">protected-mode no</div><div class="line">port 8001  # 8002 8003</div><div class="line">appendonly yes</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes-8001.conf #nodes-8002.conf nodes-8003.conf 文件会自动生成，无需创建</div><div class="line">cluster-node-timeout 15000 # 节点请求超时时间，默认15秒</div></pre></td></tr></table></figure></p>
<p>step4.在ubuntuB上的操作同上面的步骤，只需修改为对应的9001 9002 9003即可</p>
<p>2、启动redis节点<br>在ubuntuA上面执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /opt/redis-3.2.8/redis_cluster</div><div class="line">redis-server 8001/redis.conf</div><div class="line">redis-server 8002/redis.conf</div><div class="line">redis-server 8003/redis.conf</div></pre></td></tr></table></figure></p>
<p>在ubuntuB上面执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /opt/redis-3.2.8/redis_cluster</div><div class="line">redis-server 9001/redis.conf</div><div class="line">redis-server 9002/redis.conf</div><div class="line">redis-server 9003/redis.conf</div></pre></td></tr></table></figure></p>
<p>3、检查redis节点启动情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef |grep redis</div></pre></td></tr></table></figure></p>
<p>4、搭建集群<br>目前我们已经在两台机器上运行了6个redis节点实例，接下来我们利用这些redis实例来创建集群。<br>通过利用redis提供的工具redis-trib.rb可以很轻松的完成集群的搭建<br>创建集群命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">./redis-trib.rb create --replicas 1 172.28.23.4:8001 172.28.23.4:8002 172.28.23.4:8003 172.28.23.83:9001 172.28.23.83:9002 172.28.23.83:9003</div></pre></td></tr></table></figure></p>
<p>运行如上命令之后，redis会响应如下内容：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/redis-create-cluster-01.png" alt=""><br>redis会根据当前运行的redis实例自动分配master和slave节点，从图中可以看出，172.28.23.4:8001 172.28.23.83:9001 172.28.23.4:8002这三个实例为master节点，其余三个实例为对应的slave节点，还显示主从对应关系及具体hash槽分配情况<br>如果我们接受redis的分配，输入yes即可</p>
<p>5、检查集群节点运行状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-trib.rb check 172.28.23.4:8003</div></pre></td></tr></table></figure></p>
<p>6、连接集群操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 172.28.23.4 -p 8003 -c</div></pre></td></tr></table></figure></p>
<p>连接集群和连接普通redis实例不一样，一定要带参数-c；不然连接到实例之后进行操作会报错：(error)MOVED 5798 ip:port</p>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><p>1、往集群中添加新的节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-trib.rb add-node 新节点IP:端口 已存在的节点IP:端口</div></pre></td></tr></table></figure></p>
<p>2、往集群中添加slave节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-trib.rb add-node --slave 新节点IP:端口 已存在的节点IP:端口</div></pre></td></tr></table></figure></p>
<p>3、从集群中移除节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-trib del-node 127.0.0.1:7000 `&lt;node-id&gt;`</div></pre></td></tr></table></figure></p>
<h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><p>Q1：运行redis-trib.rb脚本创建集群报错：<br>node 172.28.22.72:8001 is not empty. either the node already knows other nodes(check with cluster nodes) or contains some key in database 0<br>A1：三步走<br>1、redis-cli -h ip -p port<br>2、flushdb<br>3、删除aof、rdb、nodes.conf文件</p>
<p>Q2：输入yes之后，如果一直停留在waiting for the cluster to join。。<br>A2：表示slave无法连接到master，检查下ip设置是否正确。我遇到的是因为redis.conf中的bind 127.0.0.1 172.28.22.72 把127.0.0.1去掉，只绑定外网ip即可</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GC之“Stop The World”]]></title>
      <url>http://www.linmuxi.com/2017/03/01/gc-stop-the-world-01/</url>
      <content type="html"><![CDATA[<p>“Stop The World”是什么，和GC有什么关系？在谈这个之前，先简要叙述以下两点：<br>1、对象内存分代<br>2、JVM垃圾收集器</p>
<p>大家都知道，JVM内存堆可以简单分为年轻代、老年代、持久代；其中年轻代又分为三部分：1个Eden区和2个Survivor区域（From和To）</p>
<p>JVM提供了多种垃圾收集器，例如：serial、parnew、parallel scavenge、serial old、parallelold、cms、G1；每种垃圾收集器采用的收集算法又不一样。</p>
<p>关于垃圾收集算法有标记-清除、复制算法、标记-整理、分代收集</p>
<p>回到正题，“Stop The World”是什么？因为JVM内存堆是分代的，不同的分代采用的垃圾收集器是不一样的；<br>例如在JDK1.3.1之前Serial收集器是年轻代垃圾收集的唯一选择；<br>Serial收集器，是单线程收集器，在进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。这个就是Serial收集器的工作特性，我们也把这个特性称为“Stop The World”；<br>自然我们会想到，“Stop The World”的存在，假如GC耗时较长，那么我们的系统会处于一种假死状态。<br>当然随着JVM虚拟机的发展，“Stop The World”得到的很大的优化和缓解，具体大家可以了解CMS、G1垃圾收集器工作原理，大家也可以参考下我之前的读书笔记<a href="http://www.linmuxi.com/2016/06/23/jvm-note-gc/">“读《深入理解Java虚拟机》-垃圾收集器”</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[可靠性设计之服务故障隔离]]></title>
      <url>http://www.linmuxi.com/2017/02/22/system-design-service-fault-isulate-01/</url>
      <content type="html"><![CDATA[<h6 id="案例场景"><a href="#案例场景" class="headerlink" title="案例场景"></a>案例场景</h6><p>程序首先做黑名单规则校验，将命中规则的黑名单数据先写入DB，后邮件发送给相关业务人员</p>
<h6 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h6><p>在做完黑名单规则校验之后，可以直接返回客户端命中结果，后面的写入DB和邮件发送操作可以放到线程池中异步进行。<br>那么是不是两个操作都放到一个线程池中进行操作呢？当然不是，至于为什么，看下面分析</p>
<h6 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h6><p>从业务场景分析得出，写入DB操作明显是主要业务，邮件发送是次要业务，所以从服务优先级考虑首先要保证的是主要业务的可用，然后再保证次要业务的可用。</p>
<p>再回到上面的问题，为什么不能将这两个操作放到同一个线程池中进行操作。</p>
<p>假如这两个操作从同一个池中取线程，第一个写入DB顺利完成，第二个发送邮件由于网络原因（如连接超时等）导致发送失败，这里的失败的结果可能导致线程夯住；最坏的结果会是随着服务请求的增多，因为发送邮件这个操作导致线程池资源耗尽，使得写入DB这个操作无法分配到可以用线程资源，进入队列中等待，这样可能会出现等待超时，导致写入DB操作被丢弃，从而导致DB数据丢失；这样因为一个次要业务不可用故障级联主要业务不可用是程序设计中不允许的。<br>这里我们可以将写入DB操作分配到一个线程池，发送邮件操作分配到另外一个线程池，这样即使发送邮件操作失败导致线程池不可用，也不会影响到写入DB操作这个功能；</p>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>上面是关于服务故障隔离的一点点思路，也是我们能在代码层面进行实施的东西；其实关于服务故障隔离远不止这么简单，这里只是提供一点思路，就是从我们的业务进行分析，哪些是核心业务哪些是非核心业务，我们要做的就是优先保证核心业务的高可用，其次再是保证非核心业务的可用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[集成Spring Security]]></title>
      <url>http://www.linmuxi.com/2016/07/04/spring-security-integration/</url>
      <content type="html"><![CDATA[<h2 id="SpringSecurity说明"><a href="#SpringSecurity说明" class="headerlink" title="SpringSecurity说明"></a>SpringSecurity说明</h2><p>Spring Security是一个强大的和高度可定制的身份认证和访问控制框架。<br>一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了<strong>Spring IoC，DI和AOP</strong>功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p>
<h2 id="SpringSecurity核心点"><a href="#SpringSecurity核心点" class="headerlink" title="SpringSecurity核心点"></a>SpringSecurity核心点</h2><p>Spring Security核心是他提供的<strong>过滤器</strong>，默认情况下用到了以下过滤器，及通过实例化一个虚拟过滤器链来对这些过滤器进行递归调用，源码如下图：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/SpringSecurity核心.png" alt="SpringSecurity核心"></p>
<h2 id="集成代码"><a href="#集成代码" class="headerlink" title="集成代码"></a>集成代码</h2><p>集成代码已经托管到<strong><a href="https://github.com/linmuxi/SpringSecurity.git" target="_blank" rel="external">github</a></strong>上，Spring Security版本是<strong>3.2.0</strong>，项目结构是<strong>Maven</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-类文件结构]]></title>
      <url>http://www.linmuxi.com/2016/06/27/jvm-note-classfile/</url>
      <content type="html"><![CDATA[<p>读书笔记<br><a id="more"></a></p>
<h2 id="JVM语言无关性"><a href="#JVM语言无关性" class="headerlink" title="JVM语言无关性"></a>JVM语言无关性</h2><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/JVM-语言无关性.png" alt="JVM-语言无关性"></p>
<p>Java虚拟机作为一个通用的、机器无关的执行平台，任何其他语言的实现者都可以将Java虚拟机作为语言的产品交付媒介，虚拟机只识别Class文件，并不关心Class的来源是何种语言</p>
<h2 id="class类文件的结构"><a href="#class类文件的结构" class="headerlink" title="class类文件的结构"></a>class类文件的结构</h2><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/Class文件格式.png" alt="Class文件格式"></p>
<ul>
<li>Class文件是一组以8位字节为基础单位的二进制流，各数据项目<strong>严格按照顺序</strong>紧凑排列在Class文件中，中间没有任何分隔符</li>
<li>Class文件格式采用类似C语言结构体的伪结构来存储数据，这种伪结构只有两种<strong>数据类型</strong>：<strong>无符号数和表</strong></li>
<li>无符号数<ul>
<li>属于基本的数据类型</li>
<li><strong>u1、u2、u4、u8</strong>来分别代表<strong>1、2、4、8个字节</strong>的无符号数</li>
<li>可以用来描述<strong>数字、索引引用、数量值或者按照UTF-8编码构成的字符串值</strong></li>
</ul>
</li>
<li>表<ul>
<li>是由<strong>多个无符号数</strong>或者其他表作为数据项构成的<strong>复合数据</strong>类型</li>
<li>以“_info”结尾</li>
<li>整个class文件本质上就是一张表</li>
</ul>
</li>
</ul>
<p>下面来看下class文件格式中各个数据项的具体含义：</p>
<ul>
<li><h3 id="魔数与Class文件的版本"><a href="#魔数与Class文件的版本" class="headerlink" title="魔数与Class文件的版本"></a>魔数与Class文件的版本</h3><strong>magic</strong>：魔数（Magic Number），占用4个字节，作用是确定这个文件是否为一个能被虚拟机接受的class文件；值为：0xCAFEBABE<br><strong>minor_version</strong>：次版本号，占用2个字节<br><strong>major_version</strong>：主版本号，占用2个字节;Java的版本号是从45开始的，JDK1.1之后的每个JDK大版本发布，主版本号向上加1（JDK1.0-1.1使用了45.0-45.3的版本号）,例如JDK版本为1.7，可生成的Class文件主版本号最大值为51.0</li>
</ul>
<ul>
<li><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3></li>
</ul>
<p>占用Class文件空间最大的数据项目之一</p>
<p><strong>constant_pool_count</strong>：常量池容量计数值，<strong>从1开始</strong>；例如：常量池容量十六进制数为0x0016，即十进制为22，就表示常量池中有21项常量；Class文件结构中只有常量池的容量计数是从1开始，其他的集合类型，例如接口索引集合、字段表集合、方法表集合等的容量计数都是从0开始的。</p>
<p><strong>constant_pool</strong>：主要存放两大类常量：字面量(Literal)和符号引用(Symbolic References)<br>字面量：文本字符串、声明为final的常量值等<br>符号引用：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>常量池中每一项常量都是一个表，一共有<strong>14</strong>种：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/常量池的项目类型.png" alt="常量池的项目类型"></p>
<p>这14种表都有一个共同的特点，就是表开始第一位是一个u1类型的<strong>标志位</strong>(tag)，代表当前这个常量属于哪种常量类型</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/常量池中的14中常量项的结构总表.png" alt="常量池中的14中常量项的结构总表"></p>
<ul>
<li><h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3>access_flags：用于识别一些类或接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final等</li>
</ul>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/访问标志.png" alt="访问标志"></p>
<p>access_flags中一共有16个标志位可以使用，当前只定义了其中8个，没有使用到的标志位要求一律为0</p>
<ul>
<li><h3 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h3>Class文件中通过类索引（this_class）和父类索引（super_class）和接口索引集合（interfaces）这三项数据来确定这个类的继承关系。</li>
</ul>
<p>下图显示类索引（this_class）查找全限定名的过程：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/类索引查找全限定名的过程.png" alt="类索引查找全限定名的过程"></p>
<ul>
<li><h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3>用于描述接口或者类中声明的变量，字段包括类级变量和实例级变量，不包括方法内部声明的局部变量</li>
</ul>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/字段表结构.png" alt="字段表结构"></p>
<p>字段修饰符放在access_flags项目中，与类中的access_flags项目类似，都是一个u2的数据类型，含义如下：</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/字段访问标志.png" alt="字段访问标志"></p>
<p>紧跟access_flags标志的是两项索引值：name_index和descriptor_index，都是对常量池的引用，分别代表字段的简单名称及字段和方法的描述符</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/描述符标识字符含义.png" alt="描述符标识字符含义"></p>
<p>对于数组类型，每一维度将使用一个前置的“[”字符来描述，例如定义一个“java.lang.String[][]”类型的二维数组，将被记录为：”[[Ljava/lang/String;“，一个整型数组“int[]”将被记录为“[I”</p>
<p>用描述符来描述方法时，按照先参数列表，后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。例如方法 void inc()的描述符为“()V”,方法java.lang.String.toString()的描述符为“()Ljava/lang/String;”,方法int indexOf(char[]source,int sourceOffset,int sourceCount,char[]target,int targetOffset,int targetCount,int fromIndex)的描述符为“([CII[CIII)I”</p>
<p>字段表集合不会列出从超类或父接口中继承而来的字段</p>
<ul>
<li><h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3>Class文件存储格式对方法的描述与对字段的描述几乎采用了完全一致的方式</li>
</ul>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/方法表结构.png" alt="方法表结构"></p>
<p>与字段相比，除去了volatile关键字和transient关键字对应的标志，增加了synchronized、native、strictfp和abstract关键字对应的标志</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/方法访问标志.png" alt="方法访问标志"></p>
<p>方法中的Java代码，经过编译器编译成字节码指令后，存放在方法属性表集合中一个名为“Code”的属性里面了</p>
<ul>
<li><h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3>为了能正确解析Class文件，在《Java虚拟机规范（Java SE 7）》版中，预定义了21项属性。</li>
</ul>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/虚拟机规范预定义属性.png" alt="虚拟机规范预定义的属性"></p>
<p>每个属性的名称都需从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数即可。</p>
<p>一个符合规则的属性表应该满足如下定义的结构：</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/属性表结构.png" alt="属性表结构"></p>
<p><strong>Code属性</strong><br>Java程序方法体中的代码经过Javac编译器处理后，最终变成字节码指令存储在Code属性中。</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/Code属性表的结构.png" alt="Code属性表结构"></p>
<p>attribute_name_index：指向CONSTANT_Utf8_info型常量的索引，常量固定值为<strong>Code</strong><br>attribute_length：属性值的长度，由于属性名称索引和属性长度一共为6字节，所以属性值的长度固定为整个属性表长度减去6个字节<br>max_stack：操作数栈深度的最大值，在方法执行的任意时刻，操作数栈都不会超过这个深度，虚拟机运行的时候需要根据这个值来分配栈帧中的操作栈深度<br>max_locals：局部变量所需的存储空间，单位是<strong>Slot</strong>，Slot是虚拟机为局部变量分配内存所使用的<strong>最小单位</strong>，对于长度不超过32位的数据类型，每个局部变量占用1个Slot，而double和long这两种64位的数据类型需要2个Slot来存放；局部变量表中的Slot是<strong>可以重用</strong>的，Javac编译器会根据变量的作用域来分配Slot给各个变量使用，然后计算出max_locals的大小<br>code：存储Java源程序编译后生成的字节码指令<br>code_length：字节码长度</p>
<p><strong>LineNumberTable属性</strong><br>用于描述Java源码行号与字节码行号之间的对应关系；可以在javac中分别使用<strong>-g:none或-g:lines</strong>来选择取消或要求生成这项信息，如果不生成，对程序运行产生的最主要影响就是抛出异常时，堆栈中将不会显示出错的<strong>行号</strong>，并且在调试程序的时候，也无法按照源码行来设置<strong>断点</strong></p>
<p><strong>LocalVariableTable属性</strong><br>用于描述栈帧中局部变量表中的变量与Java源码中定义的变量之间的关系；可以在javac中分别使用<strong>-g:none或-g:vars</strong>来选择取消或生成该信息，如果没有生成，最大的影响就是当其他人引用这个方法时，所有<strong>参数名都将丢失</strong>，IDE将会使用诸如<strong>arg0、arg1</strong>的占位符代替原有的参数名</p>
<p><strong>SourceFile属性</strong><br>记录生成这个Class文件的源码文件名称；可以分别使用javac的-g:none或-g:source来关闭或生成，如果不生成这项属性，当抛出异常时，堆栈中将不会显示出错代码所属的<strong>文件名</strong></p>
<p><strong>ConstantValue属性</strong><br>作用是通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量（类变量）才可以使用这项属性。</p>
<p>对于非static类型的变量（<strong>实例变量</strong>）的赋值，虚拟机是在<strong>实例构造器<init></init></strong>方法中进行<br>对于类变量，在类构造器<clinit>方法中或使用ConstantValue属性。目前Sun Javac编译器的选择是：如果同时使用final和static来修饰一个变量（常量），并且这个变量的数据类型是基本类型或者java.lang.String的话，就生成ConstantValue属性来进行初始化，如果没有被final修饰或者并非基本类型及字符串，则将会选择在<clinit>方法中进行初始化</clinit></clinit></p>
<h2 id="字节码指令简介"><a href="#字节码指令简介" class="headerlink" title="字节码指令简介"></a>字节码指令简介</h2><p>这里不详细记录了，具体字节码介绍可以<a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">参考WIKI</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-垃圾收集器]]></title>
      <url>http://www.linmuxi.com/2016/06/23/jvm-note-gc/</url>
      <content type="html"><![CDATA[<p>读书笔记<br><a id="more"></a></p>
<h2 id="对象生死"><a href="#对象生死" class="headerlink" title="对象生死"></a>对象生死</h2><ul>
<li><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><ul>
<li>优点：实现简单，判断效率也高</li>
<li>缺点：很难解决对象之间互相循环引用的问题</li>
<li>Java虚拟机里面没有选用引用计数算法来管理内存</li>
</ul>
</li>
<li><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><ul>
<li><p>主流的商业程序语言（Java、C#）的主流实现中，都是通过可达性分析来判定对象是否存活的</p>
</li>
<li><p>基本思路：通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/可达性分析算法判断对象是否可用.png" alt="可达性分析算法判断对象是否可用"><br>上图中，对象object 5、object 6、object 7 虽然互相有关联，但是他们到GC Roots是不可达的，所以他们将会被判定为是可回收的对象</p>
</li>
<li><p>在Java语言中，可作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI引用的对象</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>  分为强引用、软引用、弱引用、虚引用</p>
<ul>
<li><p>强引用：类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</p>
</li>
<li><p>软引用：描述一些还有用但并非必须的对象。在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行第二次回收。在JDK1.2之后，提供了<strong>SoftReference</strong>类来实现软引用</p>
</li>
<li><p>弱引用：描述非必须对象的，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉被弱引用关联的对象。在JDK1.2之后，提供了<strong>WeakReference</strong>类来实现弱引用</p>
</li>
<li><p>虚引用：也称为幽灵引用或幻影引用，是最弱的一种引用关系。无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用</p>
</li>
</ul>
</li>
</ul>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><ul>
<li><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>  最基础的收集算法，分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象；后续的收集算法都是基于该算法的不足而进行改进得到的，主要不足有两方面：</p>
<ol>
<li>效率问题：标记和清除两个过程的<strong>效率都不高</strong></li>
<li><p>空间问题：标记清除后会产生大量不连续的<strong>内存碎片</strong>，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次GC操作</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/标记清除算法示意图.png" alt="标记清除算法示意图"></p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul>
<li><p>为了解决标记-清除算法的<strong>效率问题</strong>而出现</p>
</li>
<li><p>原理：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这块的内存使用完了，就将还存活的对象复制到另外一块上去，然后再把已使用过的内存空间一次清理掉。这样内存分配时就不用考虑内存碎片等复杂情况了。</p>
</li>
<li><p>商业虚拟机都采用这种收集算法来<strong>回收新生代</strong></p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/复制算法示意图.png" alt="复制算法示意图"></p>
</li>
</ul>
</li>
<li><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul>
<li><p>针对<strong>老年代</strong>采用的收集算法</p>
</li>
<li><p>标记过程与“标记-清除”算法一样</p>
</li>
<li><p>原理：先标记所有待回收的对象，然后将所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/标记整理算法示意图.png" alt="标记整理算法示意图"></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul>
<li><p>当前商业虚拟机的垃圾收集都采用这种算法</p>
</li>
<li><p>思路：根据对象存活周期的不同将内存划分为几块，把java堆分为新生代和老年代，然后针对各个年代的特点采用最合适的收集算法。在新生代，每次GC都有大批对象死去，只有少量存活，就选用复制算法。老年代对象存活率高、没有额外空间对他进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收</p>
</li>
</ul>
</li>
</ul>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/HotSpot虚拟机的垃圾收集器.png" alt="HotSpot虚拟机的垃圾收集器"><br>上图展示了7种作用不同分代的收集器，如果两个收集器之间存在连线，就说明他们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器</p>
<ul>
<li><h3 id="serial收集器"><a href="#serial收集器" class="headerlink" title="serial收集器"></a>serial收集器</h3><ul>
<li><strong>单线程</strong>收集器</li>
<li>在进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束</li>
<li>对于运行在Client模式下的虚拟机来说是一个很好的选择</li>
</ul>
</li>
<li><h3 id="parnew收集器"><a href="#parnew收集器" class="headerlink" title="parnew收集器"></a>parnew收集器</h3><ul>
<li>serial收集器的<strong>多线程</strong>版本</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="parallel-scavenge收集器"><a href="#parallel-scavenge收集器" class="headerlink" title="parallel scavenge收集器"></a>parallel scavenge收集器</h3><ul>
<li>使用<strong>复制算法</strong>的收集器，又是并行的<strong>多线程</strong>收集器</li>
<li><strong>吞吐量优先</strong>收集器</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="serial-old收集器"><a href="#serial-old收集器" class="headerlink" title="serial old收集器"></a>serial old收集器</h3><ul>
<li>serial收集器的<strong>老年代</strong>版本</li>
<li><strong>单线程</strong>收集器，使用<strong>标记-整理</strong>算法</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="parallel-old收集器"><a href="#parallel-old收集器" class="headerlink" title="parallel old收集器"></a>parallel old收集器</h3><ul>
<li>parallel scavenge收集器的<strong>老年代</strong>版本</li>
<li><strong>多线程</strong>收集器，使用<strong>标记-整理</strong>算法</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="cms收集器"><a href="#cms收集器" class="headerlink" title="cms收集器"></a>cms收集器</h3><ul>
<li><p>CMS(Concurrent Mark Sweep)是一种以获取<strong>最短回收停顿时间</strong>为目标的收集器</p>
</li>
<li><p>整个过程分为4个步骤</p>
<ol>
<li><p>初始标记(CMS initial mark)<br> <strong>停掉所有工作线程</strong>，仅仅是标记下GC Roots能直接关联到的对象，<strong>速度很快</strong></p>
</li>
<li><p>并发标记(CMS concurrent mark)<br> 进行GC Roots Tracing的过程，耗时最长的过程之一</p>
</li>
<li><p>重新标记(CMS remark)<br> <strong>停掉所有工作线程</strong>，为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短</p>
</li>
<li><p>并发清除(CMS concurrent sweep)<br> 耗时最长的过程之一</p>
<p>由于整个过程中<strong>耗时最长</strong>的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以总体上来说<strong>CMS收集器的内存回收过程是与用户线程一起并发执行的</strong></p>
</li>
</ol>
</li>
<li><p>cms是一款优秀的收集器，并发收集、低停顿；也有如下缺点：</p>
<ol>
<li>对CPU资源非常敏感</li>
<li>无法处理浮动垃圾</li>
<li>因为是基于<strong>标记-清除</strong>算法实现，所以会有大量空间碎片产生</li>
</ol>
</li>
</ul>
</li>
<li><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><ul>
<li>当今收集器技术发展最前沿成果之一，面向<strong>服务端应用</strong>的垃圾收集器</li>
<li><p>与其他GC收集器相比，G1具备如下特点：</p>
<ul>
<li><p>并行与并发<br>  G1能充分利用多CPU、多核环境下的硬件优势来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行</p>
</li>
<li><p>分代收集</p>
</li>
<li><p>空间整合<br>  G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存</p>
</li>
<li><p>可预测的停顿</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><h3 id="理解gc日志"><a href="#理解gc日志" class="headerlink" title="理解gc日志"></a><a href="http://www.linmuxi.com/2016/03/03/jvm-note-gclog/">理解gc日志</a></h3></li>
<li><h3 id="垃圾收集器参数总结"><a href="#垃圾收集器参数总结" class="headerlink" title="垃圾收集器参数总结"></a>垃圾收集器参数总结</h3><p>  <img src="http://7xqlat.com1.z0.glb.clouddn.com/垃圾收集器相关参数.png" alt="垃圾收集器相关参数"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-Java内存区域]]></title>
      <url>http://www.linmuxi.com/2016/06/13/jvm-note-javamemoryarea/</url>
      <content type="html"><![CDATA[<p>读书笔记<br><a id="more"></a></p>
<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/运行时数据区域.png" alt="运行时数据区域"></p>
<ul>
<li><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul>
<li>一块较小的内存空间，是当前线程所执行的字节码的<strong>行号指示器</strong>，字节码解释器工作室就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>这块内存区域为<strong>线程私有</strong>，每条线程都有一个独立的程序计数器，各线程之间计数器互不影响</li>
<li>此内存区域是Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域</li>
</ul>
</li>
<li><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul>
<li><strong>线程私有</strong>，生命周期同线程相同</li>
<li>每个方法从调用到执行完成的过程，对应着一个栈帧在虚拟机栈中入栈到出栈的过程</li>
<li><strong>栈帧</strong>包含局部变量表、操作数栈、动态链接、方法出口等信息</li>
<li>Java虚拟机规范中对这个区域规定了两种异常状况：<ul>
<li><strong>StackOverflowError</strong>：如果线程请求的栈深度大于虚拟机所允许的深度，抛出此异常</li>
<li><strong>OutOfMemoryError</strong>：如果虚拟机栈扩展时无法申请到足够的内存，抛出此异常</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul>
<li>作用与Java虚拟机栈类似，只是本地方法栈为虚拟机使用到的<strong>Native方法</strong>服务</li>
<li>同样也会抛出<strong>StackOverflowError和OutOfMemoryError</strong>异常</li>
</ul>
</li>
<li><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><ul>
<li>所有<strong>线程共享</strong>的区域</li>
<li>所有对象实例和数组在堆上进行分配内存</li>
<li>细分为：新生代、老年代；或Eden空间、From Survivor空间、To Survivor空间</li>
<li>无法扩展堆大小时会抛出<strong>OutOfMemoryError</strong>异常</li>
</ul>
</li>
<li><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul>
<li>所有<strong>线程共享</strong>的区域</li>
<li>存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>
<li>Not-Heap(非堆)、永久代</li>
<li>对于HotSpot虚拟机，有放弃永久代并逐步改为采用Native Memory来实现方法区的规划，在目前已经发布的JDK1.7的HotSpot中，已经把原本放在永久代的字符串常量池移出了。可以看<a href="http://www.linmuxi.com/2016/03/02/jvm-runtimeconstantpool-oom/">测试结果</a></li>
<li>无法满足内存分配需求时，将抛出<strong>OutOfMemoryError</strong>异常</li>
</ul>
</li>
<li><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul>
<li>JDK1.7以前是方法区的一部分，JDK1.7以后是Java堆的一部分</li>
<li>存放字面量和符号引用</li>
<li>可以通过String类的intern()方法动态生成新的常量并放入池中</li>
<li>无法再申请到内存时会抛出OutOfMemoryError异常</li>
</ul>
</li>
<li><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul>
<li>不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域</li>
<li><strong>NIO</strong>引入了一种基于通道（Channel）和缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在java堆和Native堆中来回复制数据</li>
<li>受本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制，会抛出OutOfMemoryError异常</li>
</ul>
</li>
</ul>
<h2 id="hotspot虚拟机对象探秘"><a href="#hotspot虚拟机对象探秘" class="headerlink" title="hotspot虚拟机对象探秘"></a>hotspot虚拟机对象探秘</h2><ul>
<li><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>  在语言层面上，创建对象通常仅仅是一个<strong>new</strong>关键字而已，而在虚拟机中，对象(普通java对象)的创建会经过如下步骤：</p>
<ol>
<li>虚拟机遇到一条new指令时，首先检查这个指令的参数能否在常量池中定位到一个类的符号引用</li>
<li>检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程</li>
<li>类加载检查通过后，虚拟机将为新生对象分配内存（对象所需内存的大小在类加载完成后便可完全确定）</li>
<li>修改内存指针，并发下会出现线程安全，虚拟机采用了CAS或TLAB(本地线程分配缓冲)来解决</li>
<li>虚拟机对对象进行必要的设置，例如这个对象是哪个类的实例、如何找到类的元数据信息、对象的哈希码、对象的GC分代年龄、是否启用偏向锁等信息，这些信息都是存放在对象头中</li>
<li>完成上面的工作，从虚拟机的视觉来看，一个新的对象已经产生了，但是从Java程序的视觉来看，还需要执行<init>方法来完成对象的初始化，这样一个真正可用的对象才算完全产生出来</init></li>
</ol>
</li>
<li><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><ul>
<li><p>对象头（Header）</p>
<ol>
<li>存储自身的运行数据：如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等</li>
<li>类型指针，即对象指向它的类元数据的指针</li>
</ol>
</li>
<li><p>实例数据（Instance Data）</p>
<ol>
<li>对象真正存储的有效信息，也是在程序代码中定义的各种类型的字段内容</li>
</ol>
</li>
<li><p>对齐填充（Padding）</p>
<ol>
<li>不是必然存在，也没有特别的含义，仅仅起着占位符的作用</li>
<li>由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是对象的大小必须是8字节的整数倍，而对象头部分刚好是8字节的整数倍，因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全</li>
</ol>
</li>
</ul>
</li>
<li><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>  Java程序是通过栈上的reference数据来操作堆上的具体对象，由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。</p>
<ul>
<li><p>句柄访问<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/通过句柄访问对象.png" alt="通过句柄访问对象"></p>
</li>
<li><p>直接指针<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/通过直接内存访问对象.png" alt="通过直接内存访问对象"></p>
<p>两种对象访问各有优缺点，虚拟机Sun HotSpot使用的是第二种方式进行对象访问的</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-高效并发]]></title>
      <url>http://www.linmuxi.com/2016/06/02/jvm-note-concurrent/</url>
      <content type="html"><![CDATA[<p>读书笔记<br><a id="more"></a></p>
<h2 id="java内存模型与线程"><a href="#java内存模型与线程" class="headerlink" title="java内存模型与线程"></a>java内存模型与线程</h2><ul>
<li><h3 id="硬件的效率与一致性"><a href="#硬件的效率与一致性" class="headerlink" title="硬件的效率与一致性"></a>硬件的效率与一致性</h3><p>  处理器为了更快速的读写内存，引入了高速缓存；为了缓存一致性问题，各处理器访问缓存时需要遵循一些协议（MSI、MESI、MOSI、Synapse、Firefly、Dragon Protocol）</p>
<p>  <strong>内存模型</strong>：在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象<br>  <img src="http://7xqlat.com1.z0.glb.clouddn.com/处理器、高速缓存、主内存间的交互关系.png" alt="处理器、高速缓存、主内存间的交互关系"></p>
<p>  <strong>乱序执行优化</strong>：程序语句的计算先后顺序与输入代码的顺序可能不一致，但是结果是一致的。这样做是为了使得处理效率更高</p>
</li>
<li><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>  <strong>JMM</strong>：(Java Memory Model)来屏蔽各种硬件和操作系统的内存访问差异，让java程序在各种平台下都能达到一致的内存访问效果。<br>  <img src="http://7xqlat.com1.z0.glb.clouddn.com/线程、工作内存、内存间的交互.png" alt="线程、主内存、工作内存的交互关系"><br>  1、线程对变量的所有操作都必须在工作内存中进行，不能直接读写主内存中的变量<br>  2、线程之间不能互相访问各自的工作内存，需要通过主内存来完成变量值的传递</p>
<p>  <strong>内存间交互操作</strong>：关于主内存和工作内存之间具体的交互协议，JMM定义了8种操作（lock、unlock、read、load、use、assign、store、write）来完成，每一种操作都是原子的、不可再分的（对于double和long类型的变量来说，有例外，可以不用考虑例外）</p>
<p>  <strong>volatile关键字：</strong></p>
<ol>
<li><p>具备<strong>可见性和一致性</strong>，但是基于volatile变量的运算在并发下可能存在不安全的问题，仍然需要通过加锁（synchronized或java.util.concurrent中的原子类）来保证原子性。</p>
</li>
<li><p><strong>禁止指令重排序优化</strong>，JVM默认会对指令进行重排序优化，但是指令重排序优化会对程序的并发执行造成干扰，使用volatile可以禁止指令重排序优化</p>
</li>
<li><p>与其他<strong>并发工具的比较</strong>:</p>
<ul>
<li><p>在某些情况下，volatile的同步机制的性能要优于锁（synchronized或java.util.concurrent包里面的锁），但是由于虚拟机对锁实现了许多的消除和优化，使得很难量化的认为volatile就会比synchronized快多少。</p>
</li>
<li><p>volatile变量的读操作的性能消耗与普通变量几乎没有什么差别，但是写操作可能会慢些，因为需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>
</li>
<li><p>volatile与锁之间选择的唯一依据是volatile的语义能否满足使用场景的需求</p>
</li>
</ul>
</li>
</ol>
<p><strong> 原子性 </strong><br>  1、由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基础数据类型的访问读写是具备原子性的（long和double的例外可以不用考虑）<br>  2、应用场景需要更大范围的原子性保证，可以使用synchronized关键字。</p>
<p>  <strong>可见性</strong><br>  1、一个线程修改了共享变量的值，其他线程能立即得知这个修改。<br>  2、volatile、synchronized和final都可以保证共享变量的可见性</p>
<p>  <strong>有序性</strong><br>  1、volatile、synchronized来保证线程之间操作的有序性</p>
<p>  <strong>先行发生原则</strong></p>
</li>
<li><h3 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h3><p>  <strong>java线程调度</strong>：协同式线程调度、抢占式线程调度（Java线程默认）</p>
<p>  <strong>状态转换</strong>：</p>
<ol>
<li><p>新建(<strong>New</strong>)：创建后未启动的线程</p>
</li>
<li><p>运行(<strong>Runable</strong>)：线程正在运行或可能正在等待CPU为它分配执行时间</p>
</li>
<li><p>无限期等待(<strong>Waiting</strong>)：不会被分配CPU执行时间，要等待被其他线程显式唤醒，以下方法会让线程处于无限期的等待状态：</p>
<ul>
<li>没有设置Timeout参数的Object.wait()方法。</li>
<li>没有设置Timeout参数的Thread.join()方法</li>
<li>LockSupport.park()方法</li>
</ul>
</li>
<li><p>限期等待(<strong>Timed Waiting</strong>)：不会被分配CPU执行时间，不需要等待被其他线程显式唤醒，在一定时间之后它们会由系统自动唤醒，以下方法会让线程处于限期的等待状态：</p>
<ul>
<li>Thread.sleep()方法</li>
<li>设置了Timeout参数的Object.wait()方法</li>
<li>设置了Timeout参数的Thread.join()方法</li>
<li>LockSupport.parkNanos()方法</li>
<li>LockSupport.parkUntil()方法</li>
</ul>
</li>
<li><p>阻塞(<strong>Blocked</strong>)：线程被阻塞了，在等待获取一个排它锁。例如线程A和B在执行同步方法C时，线程A先拿到排它锁，那么线程B的状态就是阻塞状态，等待线程B释放排它锁</p>
</li>
<li><p>结束(<strong>Terminated</strong>)：线程执行完毕</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/线程状态转换关系.png" alt="线程状态转换"></p>
</li>
</ol>
</li>
</ul>
<h2 id="线程安全与锁优化"><a href="#线程安全与锁优化" class="headerlink" title="线程安全与锁优化"></a>线程安全与锁优化</h2><ul>
<li><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ul>
<li><p>Java语言中的线程安全:</p>
<p>  <strong>不可变</strong>：final定义</p>
<p>  <strong>绝对线程安全</strong>：例如Vector是一个线程安全的容器，他的add()、get()和size()方法都被synchronized修饰，但是在多线程环境下(两个线程同时分别调用add、get方法)，如果不在方法调用端做额外的同步措施的话，可以说使用还是会存在线程不安全。</p>
<p>  <strong>相对线程安全</strong>：大部分线程安全类都属于这种类型，例如Vector、HashTable、Collections的synchronizedCollection()方法包装的集合</p>
<p>  <strong>线程兼容</strong>：指对象本身并不是线程安全的，但是可以通过在调用端正确的使用同步手段来保证对象在并发环境中可以安全的使用，我们平常说一个类不是线程安全，绝大多数指这种情况</p>
<p>  <strong>线程对立</strong>：指无论调用端是否采取同步措施，都无法在多线程环境中并发使用的代码</p>
</li>
<li><p>线程安全实现的方法:</p>
<ol>
<li><p><strong>互斥同步</strong>：临界区、互斥量和信号量都是主要的互斥实现方法；互斥是因，同步是果；互斥是方法，同步是目的；<br> <strong>synchronized</strong>：java中实现互斥同步的重要手段；是一个重量级的操作，会将用户态转换到核心态中，这种转换很耗费处理器时间。有可能状态转换消耗的时间比用户代码执行的时间还要长。虚拟机本身也进行了一些优化，例如在通知操作系统阻塞线程之前加入一段自旋等待过程，避免频繁的切入到核心态之中。</p>
<p> <strong>ReentrantLock</strong>：同synchronized功能类似，相比前者，ReentrantLock增加了一些高级功能：等待可中断、可实现公平锁、锁可以绑定多个条件</p>
</li>
<li><p><strong>非阻塞同步</strong>：基于冲突检测的乐观并发策略-CAS<br> java.util.concurrent包里面的整数原子类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作。</p>
</li>
</ol>
</li>
</ul>
</li>
<li><h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><ul>
<li><p><strong>自旋锁与自适应自旋</strong>：避免用户态到内核态的切换</p>
</li>
<li><p><strong>锁消除</strong>：对代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除</p>
</li>
<li><p><strong>锁粗化</strong>：锁同步范围扩展。例如：如果在循环里对同一个对象加锁，虚拟机会默认将锁同步的范围扩展（粗化）至循环体外部，这样就只需要加锁一次。</p>
</li>
<li><p><strong>轻量级锁</strong>：在无竞争的情况下使用CAS操作去消除同步使用的互斥量</p>
</li>
<li><p><strong>偏向锁</strong>：在无竞争的情况下把整个同步都消除掉</p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle之登录安全]]></title>
      <url>http://www.linmuxi.com/2016/05/31/oracle-login-security-01/</url>
      <content type="html"><![CDATA[<p>在安装完oracle数据库后，打开终端输入：sqlplus / as sysdba; 可以在不输入密码的情况下登录到sys用户。这种登录方式是采用操作系统认证；</p>
<p>这样要是谁混进了我们的数据库服务器都可以这种方式登录。这种默认配置使得数据库存在安全隐患；</p>
<p>可以通过修改如下配置使其必须通过密码验证方式登录<br>1、找到文件：%ORACLE_HOME%\NETWORK\ADMIN\sqlnet.ora<br>2、修改文件内容：SQLNET.AUTHENTICATION_SERVICES= (none)</p>
<p>修改完成后要重启实例；<br>shutdown immediate;// shutdown abort;<br>startup;</p>
<!-- 这样就无法通过 sqlplus / as sysdba 登录了。系统会提示：ORA-01031: insufficient privileges -->
<!-- SQLNET.AUTHENTICATION_SERVICES = none|all|ntf(windows)
none：表示关闭操作系统认证，只能采用密码认证
all：用于linux或unix平台，关闭本机密码文件认证，采用操作系统认证，但远程可以使用密码文件认证。
nts：用于window平台，采用操作系统认证 -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改Android Studio工程目录结构]]></title>
      <url>http://www.linmuxi.com/2016/05/16/androidstudio-modify-workstruct-01/</url>
      <content type="html"><![CDATA[<p>接上一篇，我们已将Eclipse中的Android项目导入到Android Studio2.0中，并能成功运行起来。</p>
<p>细心的可以发现，Android Studio为我们添加了些新的文件和文件夹：settings.gradle、build.gradle、gradle、app …</p>
<p>其中app中包含了Android项目源代码，这是AS将所有代码按照既定格式复制过去了，这样就存在两处源代码。这当然不是我们想要的结果，我们想要的是依旧使用Eclipse目录结构来进行开发。</p>
<p>针对上面的问题，接下来，我们做下简单的配置，以便于在Eclipse和Android Studio中都能很好的进行协同开发。</p>
<p>找到工程(TV)下面的build.gradle配置文件。</p>
<p>步骤：<br>step1：将app目录下build.gradle内容复制到工程(TV)下的build.gradle里面。<br>step2：关键的一步，在Android闭包中增加如下代码<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        manifest.srcFile <span class="string">'AndroidManifest.xml'</span></div><div class="line">        assets.srcDirs = [<span class="string">'assets'</span>]</div><div class="line">        res.srcDirs = [<span class="string">'res'</span>]</div><div class="line">        resources.srcDirs = [<span class="string">'src'</span>]</div><div class="line">        java.srcDirs = [<span class="string">'src'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>step3：Rebuild Project</p>
<p>通过上面的步骤，就可以将AndroidStudio目录结构同Eclipse一样了。</p>
<p>最后，可以将多余的文件进行删除：app</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Android Studio2.0导入Eclipse项目]]></title>
      <url>http://www.linmuxi.com/2016/05/12/android-import-as2-01/</url>
      <content type="html"><![CDATA[<p>Android Studio2.0以及能够很友好的支持Eclipse项目导入。<br>当选择Import Project，Android Studio2.0会自动添加Gradle相关支持，我们要做的是对相关的SDK、BuildTools、JDK版本做下适当配置即可。</p>
<p>不过，如果选择Project from Version Control从版本控制中导入项目时，AS不会添加Gradle相关支持。所以这里可以先从版本库中将代码Check Out到本地，然后利用Import Project导入即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack入门教程]]></title>
      <url>http://www.linmuxi.com/2016/04/13/webpack-tutorials-01/</url>
      <content type="html"><![CDATA[<p>本篇是webpack的入门教程，通过本教程来引导大家完成一些小例子。<br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li>安装webpack</li>
<li>使用webpack</li>
<li>使用loaders</li>
<li>使用developement server</li>
</ul>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a><strong>安装webpack</strong></h2><p>前提是需要已经安装了node.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure></p>
<p>进行全局安装，这样webpack命令就可以正常使用了</p>
<h2 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a><strong>使用webpack</strong></h2><p>先创建一个空目录<br>在目录下创建如下文件：<br>add entry.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"hello world"</span>);</div></pre></td></tr></table></figure></p>
<p>add index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来运行程序:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./entry.js bundle.js</div></pre></td></tr></table></figure></p>
<p>程序会完成编译并创建一个bundle.js文件.<br>如果程序运行成功你就能看到如下显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hash: ac9248475027b987a559</div><div class="line">Version: webpack 1.12.15</div><div class="line">Time: 39ms</div><div class="line">    Asset     Size  Chunks             Chunk Names</div><div class="line">bundle.js  1.42 kB       0  [emitted]  main</div><div class="line">   [0] ./entry.js 30 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure></p>
<p>在浏览器中打开index.html，页面会显示</p>
<blockquote>
<p>hello world</p>
</blockquote>
<p>接下来，我们将一部分代码移到外部文件中.<br>add content.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="string">"hello world from content.js"</span>;</div></pre></td></tr></table></figure></p>
<p>update entry.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="built_in">document</span>.write(<span class="string">"hello world"</span>);</div><div class="line">+ <span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure></p>
<p>接着重新编译：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./entry.js bundle.js</div></pre></td></tr></table></figure></p>
<p>刷新浏览器你应该能看到：</p>
<blockquote>
<p>hello world from content.js</p>
</blockquote>
<h2 id="使用loaders"><a href="#使用loaders" class="headerlink" title="使用loaders"></a><strong>使用loaders</strong></h2><p>接下来我们想添加一个css文件到我们的程序中。</p>
<p>webpack默认只能处理JavaScript文件，所以我们需要使用<code>css-loader</code>和<code>style-loader</code>来处理css文件。</p>
<p>运行<code>npm install css-loader style-loader</code>进行安装加载器。</p>
<p>接下来我们做如下操作：<br>add style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#FF0000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>update entry.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ <span class="built_in">require</span>(<span class="string">"!style!css!./style.css"</span>);</div><div class="line">  <span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure></p>
<p>重新运行编译并刷新浏览器，你应该能看到浏览器输出<code>hello world from content.js</code>并且背景是红色;</p>
<p>在上面entry.js文件中<code>require(&quot;!style!css!./style.css&quot;);</code>表示使用style和css加载器来加载style.css文件,如果我们不想在文件中指定加载器，可以这样做：</p>
<p>update entry.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="built_in">require</span>(<span class="string">"!style!css!./style.css"</span>);</div><div class="line">+ <span class="built_in">require</span>(<span class="string">"./style.css"</span>);</div><div class="line">  <span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure></p>
<p>运行编译：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./entry.js bundle.js --<span class="built_in">module</span>-bind <span class="string">"css=style!css"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意上面必须是双引号</p>
</blockquote>
<p>运行的结果和之前是一样的</p>
<p>接下来我们将配置项移到一个配置文件中：<br>add webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">"./entry.js"</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: __dirname,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">"style!css"</span> &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在我们运行编译：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>编译输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Hash: ac9248475027b987a559</div><div class="line">Version: webpack 1.12.15</div><div class="line">Time: 39ms</div><div class="line">    Asset     Size  Chunks             Chunk Names</div><div class="line">bundle.js  1.42 kB       0  [emitted]  main</div><div class="line">   [0] ./entry.js 30 bytes &#123;0&#125; [built]</div><div class="line">   ...</div></pre></td></tr></table></figure></p>
<blockquote>
<p>webpack命令会尝试在当前目录加载<strong>webpack.config.js</strong>文件</p>
</blockquote>
<h3 id="输出设置"><a href="#输出设置" class="headerlink" title="输出设置"></a>输出设置</h3><p>如果项目编译是时间比较长，我们想显示进度条，可以通过如下配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress --colors</div></pre></td></tr></table></figure></p>
<h3 id="监视模式"><a href="#监视模式" class="headerlink" title="监视模式"></a>监视模式</h3><p>我们不想当文件发生改变每次都要重新进行编译。可以通过如下配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress --colors --watch</div></pre></td></tr></table></figure></p>
<h2 id="使用developement-server"><a href="#使用developement-server" class="headerlink" title="使用developement server"></a><strong>使用developement server</strong></h2><p>先安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-server -g</div></pre></td></tr></table></figure></p>
<p>然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --progress --colors</div></pre></td></tr></table></figure></p>
<p>通过<a href="http://localhost:8080/webpack-dev-server/bundle" target="_blank" rel="external">http://localhost:8080/webpack-dev-server/bundle</a> 来访问；</p>
<blockquote>
<p>服务以监控模式在运行。</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://webpack.github.io/docs/tutorials/getting-started" target="_blank" rel="external">webpack.github.io</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack 是什么？]]></title>
      <url>http://www.linmuxi.com/2016/04/13/webpack-what-01/</url>
      <content type="html"><![CDATA[<p>webpack是一个模块打包工具。<br><a id="more"></a><br><img src="http://webpack.github.io/assets/what-is-webpack.png" alt="webpack"></p>
<h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a><strong>为什么</strong></h3><p>业界已经存在很多模块打包工具,为什么又要做一个出来？</p>
<p>业界存在的模块打包工具都不适合于大型项目（大型单页面应用）. 急欲推出这个模块打包工具是因为它包含了Code Splitting(模块按需加载)和将所有静态资源整合的功能。</p>
<p>作者尝试了去扩展已存在的模块打包工具，但是都不能实现所有目标。</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a><strong>目标</strong></h3><ul>
<li>将依赖树分割成按需加载</li>
<li>保存较短的初始化加载时间</li>
<li>所有的静态资源都是一个模块</li>
<li>具备集成第三方库的能力</li>
<li>具备可定制化的功能</li>
<li>适合于大型项目</li>
</ul>
<h3 id="webpack有什么不同"><a href="#webpack有什么不同" class="headerlink" title="webpack有什么不同"></a><strong>webpack有什么不同</strong></h3><p><strong>Code Splitting</strong><br>webpack依赖有同步和异步两种模式，异步依赖会通过一个新chunk来作为分割点，然后循环chunk按需加载。</p>
<p><strong>Loaders</strong><br>webpack默认只能处理JavaScript文件，但是它提供了很多加载器来将其他静态资源转换成JavaScript文件，通过这样做，每个静态资源都是一个模块。</p>
<p><strong>Clever parsing</strong><br>webpack具有一个非常灵活的解析器，能处理差不多每一个第三方库.在依赖中它允许的表达式如：<code>require(&quot;./templates/&quot;+name+&quot;.jade&quot;)</code>.它能处理大部分公共模块样式：<strong>CommonJS</strong>和<strong>AMD</strong></p>
<p><strong>Plugin system</strong><br>webpack具有丰富的插件系统，很多内部特性都是基于这个插件系统。允许自定义插件</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="external">webpack.github.io</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用gulp来压缩hexo中的静态资源文件]]></title>
      <url>http://www.linmuxi.com/2016/03/25/gulp-compress-hexo-01/</url>
      <content type="html"><![CDATA[<p>标题取的有点模糊不清，主要是想说下如何通过gulp来压缩hexo生成的html、js、css、png内容<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>gulp：基于nodejs流的自动化构建工具<br>关于gulp的介绍与安装请自行参考官网描述，本章不做阐述</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="Step1：hexo根目录新增gulpfile-js文件"><a href="#Step1：hexo根目录新增gulpfile-js文件" class="headerlink" title="Step1：hexo根目录新增gulpfile.js文件"></a>Step1：hexo根目录新增gulpfile.js文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//html压缩</span></div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="comment">//js压缩</span></div><div class="line"><span class="keyword">var</span> jsmin = <span class="built_in">require</span>(<span class="string">'gulp-jsmin'</span>);</div><div class="line"><span class="comment">//文件重命名</span></div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"><span class="comment">//图片压缩png/jpg/gif</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="comment">//png压缩</span></div><div class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</div><div class="line"><span class="comment">//css压缩</span></div><div class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> root = <span class="string">"./public"</span>;</div><div class="line"><span class="keyword">var</span> buildDir = root;</div><div class="line"><span class="keyword">var</span> datas=&#123;</div><div class="line">	<span class="attr">html</span>:[root+<span class="string">"/**/*.html"</span>],</div><div class="line">	<span class="attr">image</span>:[root+<span class="string">"/**/*.png"</span>],</div><div class="line">	<span class="attr">css</span>:[root+<span class="string">"/**/*.css"</span>],</div><div class="line">	<span class="attr">js</span>:[root+<span class="string">"/**/*.js"</span>,<span class="string">'!*min.js'</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 压缩html</span></div><div class="line">gulp.task(<span class="string">"htmlmin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.src(datas.html)</div><div class="line">	.pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>:<span class="literal">true</span>,<span class="attr">minifyJS</span>:<span class="literal">true</span>,<span class="attr">minifyCSS</span>:<span class="literal">true</span>,<span class="attr">removeComments</span>:<span class="literal">true</span>&#125;))</div><div class="line">	.pipe(gulp.dest(buildDir));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// png图片压缩</span></div><div class="line">gulp.task(<span class="string">"imagemin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.src(datas.image)</div><div class="line">	.pipe(imagemin(&#123;</div><div class="line">		<span class="attr">progressive</span>:<span class="literal">true</span>,</div><div class="line">		<span class="attr">svgoPlugins</span>:[&#123;<span class="attr">removeViewBox</span>:<span class="literal">false</span>&#125;],</div><div class="line">		<span class="attr">use</span>:[pngquant()] <span class="comment">//压缩率64%</span></div><div class="line">	&#125;))</div><div class="line">	.pipe(gulp.dest(buildDir));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// js压缩</span></div><div class="line">gulp.task(<span class="string">"jsmin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.src(datas.js)</div><div class="line">	.pipe(jsmin())</div><div class="line">	<span class="comment">//.pipe(rename(&#123;suffix:'.min'&#125;))</span></div><div class="line">	.pipe(gulp.dest(buildDir));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// css压缩</span></div><div class="line">gulp.task(<span class="string">"cssmin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.src(datas.css)</div><div class="line">	.pipe(csso())</div><div class="line">	.pipe(gulp.dest(buildDir));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">"htmlmin"</span>,<span class="string">"imagemin"</span>,<span class="string">"jsmin"</span>,<span class="string">"cssmin"</span>]);</div></pre></td></tr></table></figure>
<h3 id="Step2：执行命令"><a href="#Step2：执行命令" class="headerlink" title="Step2：执行命令"></a>Step2：执行命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo ge</div><div class="line">gulp</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>gulp提供了相当多的插件，大家可以自行去了解使用，还是挺好使的</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://gulpjs.com/" target="_blank" rel="external">gulp官网</a><br><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[系统集成项目管理相关的标准规范]]></title>
      <url>http://www.linmuxi.com/2016/03/18/si-pme-gb-01/</url>
      <content type="html"><![CDATA[<p>本篇记录基于《系统集成项目管理工程师教程》”第21.6.2 标准”章节。自己在网上把相关的标准搜罗了一番，该教程上面的部分标准已经废弃，本篇已经做了更新，截至目前下面所列的标准都是最新的并提供了下载。便于自己随时查阅也方便有需要的伙伴下载。</p>
<a id="more"></a>
<h2 id="基础标准"><a href="#基础标准" class="headerlink" title="基础标准"></a><strong>基础标准</strong></h2><p><strong>1、GB/T 11457-2006 软件工程术语</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 11457-2006 信息技术 软件工程术语.rar" target="_blank" rel="external">下载</a><br>本标准定义软件工程领域中通用的术语，适用于软件开发、使用维护、科研、教学和出版</p>
<p><strong>2、GB/T 1526-1989 信息处理数据流程图、程序流程图、系统流程图、程序网络图和系统资源图的文件编制符号及约定</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 1526-1989 信息处理 数据流程图、程序流程图、系统流程图、程序网络图和系统资源图的文件编制符号及约定.rar" target="_blank" rel="external">下载</a><br>本标准规范了常用的图形符号的画法，增强了相关流程图的可读性，也方便人员之间的交流和对同一事务的共同理解。</p>
<p><strong>3、GB/T 14085-1993 信息处理系统 计算机系统配置图符号及约定</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 14085-1993 信息处理系统 计算机系统配置图符号及约定.rar" target="_blank" rel="external">下载</a><br>本标准规定了计算机系统配置图中所使用的图形符号及其约定。</p>
<h2 id="开发标准"><a href="#开发标准" class="headerlink" title="开发标准"></a><strong>开发标准</strong></h2><p><strong>1、GB/T 8566-2007 软件生存周期过程</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 8566-2007 信息技术 软件生存周期过程.rar" target="_blank" rel="external">下载</a><br>本标准给出了软件完整生存周期中所涉及的各个过程的一个完整集合，并可以根据自己项目的实际对这些过程进行裁剪</p>
<p><strong>2、GB/T 15853-1995 软件支持环境</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 15853-1995软件支持环境.pdf" target="_blank" rel="external">下载</a><br>本标准规定了软件支持环境的基本要求，软件开发支持环境的内容及实现方法，以及对软件生存期支持部门软件支持能力的具体要求。</p>
<p><strong>3、GB/T 14079-1993 软件维护指南</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 14079-1993 软件维护指南.rar" target="_blank" rel="external">下载</a><br>本标准描述软件维护的内容和类型、维护过程及维护的控制和改进</p>
<h2 id="文档标准"><a href="#文档标准" class="headerlink" title="文档标准"></a><strong>文档标准</strong></h2><p><strong>1、GB/T 16680-1996 软件文档管理指南</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 16680-1996 软件文档管理指南.rar" target="_blank" rel="external">下载</a><br>本标准描述了如何关于如何编制文档，文档编制有哪些编制和指南，如何制定文档编制计划，如何确定文档管理的各个过程，文档管理需要哪些资源</p>
<!--
本标准为那些对软件或基于软件的产品的开发负有责任的管理者提供软件文档的管理指南。本标准的目的在于协助管理者在他们的机构中产生有效的文档。
本标准涉及策略、标准、规程、资源和计划，管理者必须关注这些内容，以便有效地管理软件文档。
不论项目的大小，软件文档管理的原则是一致的。对于小项目，可以不采用本标准中规定的有关细节。管理者可裁剪这些内容以满足他们的特殊需要。
-->
<p><strong>2、GB/T 8567-2006 计算机软件文档编制规范</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 8567-2006 计算机软件文档编制规范.rar" target="_blank" rel="external">下载</a><br>本标准给出了软件项目开发过程中相关的25种文件的编制指导。<br><!--
本标准根据GB/T 8566-2001《信息技术 软件生存周期过程》的规定，主要对软件的开发过程和管理过程应编制的主要文档及其编制的内容、格式规定了基本要求。
本标准原则上适用于所有类型的软件产品的开发过程和管理过程。
使用者可根据实际情况对本标准进行适当裁剪。软件文档从使用的角度大致可分为软件的用户需要的用户文档和开发方在开发过程中使用的内部文档（开发文档）两类。供方应提供的文档的类型和规模，由软件的需方和供方在合同中规定。
--></p>
<p><strong>3、GB/T 9385-2008 计算机软件需求说明编制指南</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 9385-2008 计算机软件需求规格说明规范.rar" target="_blank" rel="external">下载</a><br>本标准给出了软件项目开发过程中编制软件需求说明书的详细指导。</p>
<h2 id="管理标准"><a href="#管理标准" class="headerlink" title="管理标准"></a><strong>管理标准</strong></h2><p><strong>1、GB/T 12505-1990 计算机软件配置管理计划规范</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 12505-1990 计算机软件配置管理计划规范.rar" target="_blank" rel="external">下载</a><br>本标准规定了在制定软件配置管理计划时应该遵循的统一的基本要求。</p>
<p><strong>2、GB/T 16260-2006 软件工程产品质量规范</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 16260-2006 软件工程产品质量.rar" target="_blank" rel="external">下载</a><br>本标准描述了如何使用质量特性来评价软件质量，分4部分：质量模型、外部度量、内部度量、使用质量的度量</p>
<p><strong>3、GB/T 12504-1990 计算机软件质量保证计划规范</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 12504-1990 计算机软件质量保证计划规范.rar" target="_blank" rel="external">下载</a><br>本标准规定了在制定软件质量保证计划时应该遵循的统一的基本要求。</p>
<p><strong>4、GB/T 14394-2008 计算机软件可靠性和可维护性管理</strong> <a href="http://7xqlat.com1.z0.glb.clouddn.com/GBT 14394-2008 计算机软件可靠性和可维护性管理.rar" target="_blank" rel="external">下载</a><br>本标准规定了软件产品在其生存周期内如何选择适当的软件可靠性和可维护性管理要素，并指导软件可靠性和可维护性大纲的制定与实施。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><ul>
<li><a href="http://www.bzfxw.com/" target="_blank" rel="external">标准分享网</a></li>
<li><a href="http://www.sac.gov.cn/SACSearch/search" target="_blank" rel="external">中国国家标准化管理委员会</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录-公司官网开发]]></title>
      <url>http://www.linmuxi.com/2016/03/17/jx-website/</url>
      <content type="html"><![CDATA[<p>这段时间一直在协同美工对<a href="http://www.jxjust.com" target="_blank" rel="external">公司官网</a>做改版，应该说是重新设计开发。<br><a id="more"></a><br>忙活了一段时间，今天终于收工了。官网做的比较小，一些基本的信息展示和简单的表单提交，个人对美工给的这个效果图表示有点小失望，设计的没有想象中的高端大气。这个版本是针对pc端，没有做响应式设计，计划是后期单独为移动端做页面。前端使用了简单的html+css+js，后端使用的是asp.net mvc框架。下面发几张效果图特此记录该里程：</p>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a><strong>首页</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_home.png-hunterblog" alt="首页"></p>
<h3 id="产品服务"><a href="#产品服务" class="headerlink" title="产品服务"></a><strong>产品服务</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_product.png-hunterblog" alt="产品服务"></p>
<h3 id="产品明细"><a href="#产品明细" class="headerlink" title="产品明细"></a><strong>产品明细</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_product_detail.png-hunterblog" alt="产品明细"></p>
<h3 id="营业网点"><a href="#营业网点" class="headerlink" title="营业网点"></a><strong>营业网点</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_branch.png-hunterblog" alt="营业网点"></p>
<h3 id="新闻中心"><a href="#新闻中心" class="headerlink" title="新闻中心"></a><strong>新闻中心</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_news.png-hunterblog" alt="新闻中心"></p>
<h3 id="加入我们"><a href="#加入我们" class="headerlink" title="加入我们"></a><strong>加入我们</strong></h3><p><img src="http://7xqlat.com1.z0.glb.clouddn.com/jx_website_joinus.png-hunterblog" alt="加入我们"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从GitCafe迁移到Coding]]></title>
      <url>http://www.linmuxi.com/2016/03/07/gitcafe-to-coding-of-pages/</url>
      <content type="html"><![CDATA[<p>在上周，Coding宣布收购Gitcafe，且Gitcafe平台将在5月31日后关闭服务。因为我的博客是部署在Gitcafe上的，所以不得已需要将其迁移到Coding平台上去。整个修改步骤也比较容易。<br><a id="more"></a></p>
<h3 id="项目迁移"><a href="#项目迁移" class="headerlink" title="项目迁移"></a><strong>项目迁移</strong></h3><p>我们可以直接将Gitcafe上面的库迁移到Coding上来，也可以重新在Coding上新建库都是可以的。<br>如果要迁移，官网也提供了一键迁移的操作页面，这里就不描述了。</p>
<h3 id="Coding平台"><a href="#Coding平台" class="headerlink" title="Coding平台"></a><strong>Coding平台</strong></h3><p>新建一个分支：<strong>coding-pages</strong><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/coding_branch.png-hunterblog" alt=""></p>
<p>开启Pages服务并绑定自定义域名<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/coding_pages.png-hunterblog" alt=""></p>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><strong>_config.yml</strong></h3><p>在全局_config.yml中deploy新增coding节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    coding: https://git.coding.net/hunterlin/hunterlin.git,coding-pages</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-内存分配]]></title>
      <url>http://www.linmuxi.com/2016/03/04/jvm-note-memory-allocation/</url>
      <content type="html"><![CDATA[<p>读到第3.6节，跟着文中作者的介绍与描述做了相关内容的测试，特做此记录。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本篇参考3.6节中的三小节分别来理解和测试相关内容：</p>
<ul>
<li>对象优先在Eden分配</li>
<li>大对象直接进入老年代</li>
<li>长期存活的对象将进入老年代</li>
</ul>
<h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a><strong>对象优先在Eden分配</strong></h2><p>大多数情况，对象在新生代Eden区中分配内存，当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC。</p>
<p>下面我们通过具体代码来分析对象在新生代中的分配情况：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: </div><div class="line"> * -Xms20M -Xmx20M -Xmn10M  #Java堆大小为20m，不可扩展，其中10m分配给年轻代，剩下10m分配给老年代</div><div class="line"> * -XX:SurvivorRatio=8 #设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10，Eden区占8/10</div><div class="line"> * -XX:+PrintGCDetails #打印GC日志 </div><div class="line"> * -XX:+UseSerialGC #使用Serial+Serial Old的收集器组合进行内存回收</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMemoryAlloc</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span>*<span class="number">1024</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] allocation1,allocation2,allocation3,allocation4;</div><div class="line">		allocation1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>*_1MB];<span class="comment">//发生第一次Minor GC</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据虚拟机参数初始新生代的内存是这样：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_memory_alloc_01.png-hunterblog" alt=""></p>
<p>main方法中分配了3个2MB大小和1个4MB大小的对象，当在进行allocation4分配的时候会触发第一次MinorGC操作。</p>
<p>因为allocation4对象需要分配4MB的内存空间，此时Eden已经被前面3个2MB的对象占用了共6MB的大小，Eden还剩余2MB的大小(总Eden空间大小是8192K)，所以在进行allocation4分配的时候由于Eden空间不足会触发第一次MinorGC操作。</p>
<p>MinorGC操作(采用“复制算法”)会将Eden区的3个2MB对象复制到Survivor区域，由于Survivor区域总大小只有1024K，分配不下3个2MB大小的对象，所以只好通过分配担保机制提前将3个2MB的对象转移到年老代中过去。</p>
<p>最后MinorGC操作完成后，Eden分配着4MB的allocation4对象，Survivor区空闲，年老代分配了总共6MB(allocation1,allocation2,allocation3)的对象，下面我们通过GC日志来验证这点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[GC[DefNew: 7146K-&gt;484K(9216K), 0.0047529 secs] 7146K-&gt;6628K(19456K), 0.0047906 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4746K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  52% used [0x00000000f9a00000, 0x00000000f9e297b0, 0x00000000fa200000)</div><div class="line">  from space 1024K,  47% used [0x00000000fa300000, 0x00000000fa3791a8, 0x00000000fa400000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</div><div class="line"> tenured generation   total 10240K, used 6144K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 2582K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb085a70, 0x00000000fb085c00, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure>
<p><code>[GC[DefNew: 7146K-&gt;484K(9216K), 0.0047529 secs] 7146K-&gt;6628K(19456K), 0.0047906 secs]</code><br>可以看到新生代总内存9216K，由GC前占用的7146K回收到了484K，Java堆内存从7146K到6628K几乎没有怎么变化，因为GC回收时四个对象仍然是可用的(存在Eden和老年代中)。</p>
<p><code>def new generation   total 9216K, used 4746K</code><br>新生代总内存9216K，已经使用了4746K，被占用的区域就是Eden区</p>
<p><code>eden space 8192K,  52% used</code><br>新生代中Eden的内存为8192K，已经被使用了52%，就是被allocation4对象占用着</p>
<p><code>to   space 1024K,   0%</code><br>Survivor to区总大小1024k，空闲</p>
<p><code>tenured generation   total 10240K, used 6144K</code><br>年老代总内存10240K，已经被allocation1,allocation2,allocation3三个对象占用了6144K。</p>
<p>通过GC日志的分析已经证明了我们上面提到的内存分配规则。</p>
<h2 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a><strong>大对象直接进入老年代</strong></h2><p>大对象是指需要大量连续内存空间的Java对象，写程序的时候要尽量避免大对象，经常出现大对象容易导致内存还有不少空间时候就提前触发垃圾收集以获取足够的内存空间来安放这些大对象。</p>
<p>下面我们还是通过代码来分析下，将上面代码中allocation4对象的大小改为8MB：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: </div><div class="line"> * -Xms20M -Xmx20M -Xmn10M  #Java堆大小为20m，不可扩展，其中10m分配给年轻代，剩下10m分配给老年代</div><div class="line"> * -XX:SurvivorRatio=8 #设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10，Eden区占8/10</div><div class="line"> * -XX:+PrintGCDetails #打印GC日志 </div><div class="line"> * -XX:+UseSerialGC #使用Serial+Serial Old的收集器组合进行内存回收</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMemoryAlloc</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span>*<span class="number">1024</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] allocation1,allocation2,allocation3,allocation4;</div><div class="line">		allocation1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1MB];</div><div class="line">		allocation4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*_1MB];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看下运行之后的GC日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 7310K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  89% used [0x00000000f9a00000, 0x00000000fa123978, 0x00000000fa200000)</div><div class="line">  from space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</div><div class="line"> tenured generation   total 10240K, used 8192K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  80% used [0x00000000fa400000, 0x00000000fac00010, 0x00000000fac00200, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 2582K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb085a70, 0x00000000fb085c00, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure></p>
<p>通过日志发现在分配allocation4对象内存的时候并没有触发GC操作，而是将allocation4对象直接分配到了老年代中。</p>
<p>另外虚拟机提供了-XX:PretenureSizeThreshold参数(默认是0)，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在Eden区和两个Survior区之间发生大量的内存复制(复制算法收集内存)操作。</p>
<p><strong>PS:PretenureSizeThreshold参数只对Serial和ParNew两款收集器有效</strong></p>
<h2 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a><strong>长期存活的对象将进入老年代</strong></h2><p>虚拟机采用分代收集的思想来管理内存，那么内存回收时如何识别哪些对象应该在新生代，哪些对象应该在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄计数器。即对象在Eden中出生并经过第一次Minor GC后仍然存活的且能被Survivor容纳的，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor空间每熬过一次Minor GC，年龄就增加1，当它的年龄增加到一定程度（默认是15），就将会被迁移到老年代中。对象迁移老年代的年龄阈值可以通过参数-XX:+MaxTenuringThreshold设置。</p>
<p>下面我们分别通过参数-XX:+MaxTenuringThreshold=1和-XX:+MaxTenuringThreshold=15设置对象的年龄为1和15来验证下：</p>
<p><strong>-XX:+MaxTenuringThreshold=1</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	VM Args: -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:SurvivorRatio=8 </div><div class="line">	-XX:MaxTenuringThreshold=1 -XX:+UseSerialGC -XX:+PrintTenuringDistribution</div><div class="line">**/</div><div class="line">public class TestMaxTenuringThreshold &#123;</div><div class="line">	private static final int _1MB = 1024*1024;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		//什么时候进入老年代取决于XX:MaxTenuringThreshold设置</div><div class="line">		byte[]allocation1,allocation2,allocation3;</div><div class="line">		allocation1 = new byte[_1MB / 4];</div><div class="line">		allocation2 = new byte[4 * _1MB];</div><div class="line">		allocation3 = new byte[4 * _1MB];// 第一次触发Minor GC</div><div class="line">		allocation3 = null;</div><div class="line">		allocation3 = new byte[4 * _1MB];// 第二次触发Minor GC</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>GC日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[GC[DefNew: 5190K-&gt;740K(9216K), 0.0029755 secs] 5190K-&gt;4836K(19456K), 0.0030150 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">[GC[DefNew: 4836K-&gt;0K(9216K), 0.0012083 secs] 8932K-&gt;4836K(19456K), 0.0012270 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4259K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  52% used [0x00000000f9a00000, 0x00000000f9e28fd0, 0x00000000fa200000)</div><div class="line">  from space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</div><div class="line"> tenured generation   total 10240K, used 4836K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  47% used [0x00000000fa400000, 0x00000000fa8b9218, 0x00000000fa8b9400, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 2582K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb085a60, 0x00000000fb085c00, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure></p>
<p>通过日志可以看到一共触发了2次Minor GC操作，分别代码第11行和13行；下面我们具体分析下：</p>
<p>在进行第一次GC的时候，Eden区域已经被allocation1和allocation2两个对象占用了4352K的内存空间，当再分配allocation3的内存空间的时候（由于Eden总空间只有8M）会触发第一次MinorGC操作，会将allocation1和allocation2两个对象迁移到Survivor区域，然后将allocation3对象分配在Eden区共占用4M内存大小。</p>
<p><code>[DefNew: 5190K-&gt;740K(9216K), 0.0029755 secs] 5190K-&gt;4836K(19456K), 0.0030150 secs]</code><br>可以看到GC发生时，新生代由5190K回收到了740k；Java Heap几乎没有怎么变化；因为此时对象仍然可用。</p>
<p>接下来将allocation3对象失效；然后再分配allocation3对象内存空间，由于Eden空间已经被之前的allocation3老对象占用着，剩余空间不足以分配新的allocation3对象内存，所以会触发第二次Minor GC操作；</p>
<p>由于allocation3老对象已经被设置为失效(内存中的allocation3老对象已经没有引用指向它)，所以会在第二次GC的时候将其在Eden中占用的内存回收掉；<br>由于MaxTenuringThreshold参数设置为1，那么在Survivor区域的allocation1和allocation2两个对象会被迁移到老年代；<br>最后新的allocation3对象会被分配到Eden区域；</p>
<p><code>[DefNew: 4836K-&gt;0K(9216K), 0.0012083 secs] 8932K-&gt;4836K(19456K), 0.0012270 secs]</code><br>可以看到新生代由4836K回收到了0k，Java Heap由8932K回收到了4836K，回收掉的就是allocation3老对象占用的内存</p>
<p>最后通过日志可以看到<code>def new generation   total 9216K, used 4259K</code>,年轻代占用了4259k的内存（eden区的allocation3新对象），<code>tenured generation   total 10240K, used 4836K</code>老年代占用了4836K的内存(allocation1和allocation2两个对象)</p>
<p><strong>-XX:+MaxTenuringThreshold=15</strong><br>GC日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[GC [DefNew</div><div class="line">Desired survivor size 524288 bytes, new threshold 15 (max 15)</div><div class="line">- age   1:     445680 bytes,     445680 total</div><div class="line">: 4703K-&gt;435K(9216K), 0.0025569 secs] 4703K-&gt;4531K(19456K), 0.0025839 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">[GC [DefNew</div><div class="line">Desired survivor size 524288 bytes, new threshold 15 (max 15)</div><div class="line">- age   2:     445680 bytes,     445680 total</div><div class="line">: 4531K-&gt;435K(9216K), 0.0004236 secs] 8627K-&gt;4531K(19456K), 0.0004367 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4859K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  54% used [0x00000000f9a00000, 0x00000000f9e51f98, 0x00000000fa200000)</div><div class="line">  from space 1024K,  42% used [0x00000000fa200000, 0x00000000fa26ccf0, 0x00000000fa300000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</div><div class="line"> tenured generation   total 10240K, used 4096K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  40% used [0x00000000fa400000, 0x00000000fa800010, 0x00000000fa800200, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 3045K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  14% used [0x00000000fae00000, 0x00000000fb0f9740, 0x00000000fb0f9800, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure></p>
<p>从GC日志可以分析：</p>
<p>第一次GC操作之前：新生代Eden区有allocation1对象（256KB）和allocation2对象（4MB）。<br>GC操作之后：将Eden区域的两个对象进行迁移（采用复制算法），由于Survivor区(1024K)无法容纳allocation2对象(4MB)，所以将allocation1对象迁移到了老年代中，而allocation1对象（256K）则迁移到了Survivor区，所以此时新生代内存占有总容量只有Survivor区域的allocation1对象。这就是GC操作内存变换的缘由<code>4703K-&gt;435K(9216K)</code></p>
<p>第二次GC之前：新生代Eden区域有老的allocation3对象(4MB),Survivor区域的allocation1对象(256KB)。<br>GC操作之后：由于老的allocation3对象已经是无效对象，所以其占用的内存会被清理掉；而Survivor区的allocation1对象则在Survivor区域来回倒腾下(to-from)还停留在Survivor区域，只是年龄加1(原因是我们配置了MaxTenuringThreshold=15)。所以此时新生代内存占有总容量还是只有Survivor区域的allocation1对象。这就是GC操作内存变换的缘由<code>4531K-&gt;435K(9216K)</code></p>
<p>所以最后新生代占用内存4859K（eden区allocation3对象的4MB，Survivor区的allocation1对象）；老年代占用内存4096K（allocation2对象的4MB）</p>
<p><strong>说明</strong><br>在测试MaxTenuringThreshold=15的过程中，发现在JDK1.7上运行该参数无效，设置与否都是1；切换到JDK1.6上运行该参数就有效；</p>
<p>JDK1.6版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.6.0_45&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.6.0_45-b06)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)</div></pre></td></tr></table></figure></p>
<p>JDK1.7版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.7.0_79&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</div></pre></td></tr></table></figure></p>
<p>PS：大家可以留言分享下。</p>
<!--
分配担保机制：
当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。

-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读《深入理解Java虚拟机》-理解GC日志]]></title>
      <url>http://www.linmuxi.com/2016/03/03/jvm-note-gclog/</url>
      <content type="html"><![CDATA[<p>读到第3.5.8节，按照文章描述跟着作者的步伐一起测试了下，特做下日志分析记录。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>本篇以<strong>Serial+Serial Old</strong>组合收集器日志为例来分析下GC日志(-XX:+UseSerialGC)</p>
<h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a><strong>GC日志</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[GC[DefNew: 7146K-&gt;484K(9216K), 0.0034871 secs] 7146K-&gt;6628K(19456K), 0.0035216 secs] [Times: user=0.00 sys=0.00, </div><div class="line">real=0.00 secs] </div><div class="line">Heap</div><div class="line"> def new generation   total 9216K, used 4746K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  52% used [0x00000000f9a00000, 0x00000000f9e297b0, 0x00000000fa200000)</div><div class="line">  from space 1024K,  47% used [0x00000000fa300000, 0x00000000fa3791a8, 0x00000000fa400000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</div><div class="line"> tenured generation   total 10240K, used 6144K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 2582K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb085a70, 0x00000000fb085c00, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure>
<h2 id="GC日志说明"><a href="#GC日志说明" class="headerlink" title="GC日志说明"></a><strong>GC日志说明</strong></h2><p>1、“[GC”和“[Full GC”说明了这次垃圾收集的停顿类型，如果有“Full”则说明这次GC是发生了Stop-The-World的(就是在垃圾收集的时候停止了所有用户进程)。如果是调用System.gc()所触发的收集，那么就显示“[Full GC(System)”</p>
<p>2、“[DefNew”、“[Tenured”、“[Perm”表示GC发生的区域，这里显示的区域名称和使用的GC收集器是有关系的。<br>例如：<br>Serial收集器：新生代名为“Default New Generation”，所以显示“[DefNew”<br>ParNew收集器，新生代名为“Parallel New Generation”，所以显示“[ParNew”<br>Parallel Scavenge收集器，新生代名为“PSYoungGen”<br>老年代和永久代同理，名称也是由收集器决定的。</p>
<p>3、“7146K-&gt;484K(9216K)”表示“GC前该内存区域(新生代)已使用容量-&gt;GC后该内存区域已使用容量(该内存区域总容量)”</p>
<p>4、“0.0034871 secs”表示该内存区域GC所占用的时间，单位是秒</p>
<p>5、“7146K-&gt;6628K(19456K)”表示“GC前Java堆已使用容量-&gt;GC后Java堆已使用容量(Java堆总容量)”</p>
<p>6、“Times: user=0.00 sys=0.00, real=0.00 secs”分别代表用户态消耗的CPU时间、内核态消耗的CPU时间和操作从开始到结束所经过的墙钟时间。（CPU时间与墙钟时间的区别是，墙钟时间包括各种非运算的等待耗时，例如等待磁盘I/O、等待线程阻塞，而CPU时间不包括这些耗时，但当系统有多CPU或者多核的话，多线程操作会叠加这些CPU时间，所以当看到user或sys时间超过real时间是完全正常的）</p>
<h2 id="其他收集器日志"><a href="#其他收集器日志" class="headerlink" title="其他收集器日志"></a><strong>其他收集器日志</strong></h2><p>使用<strong>ParNew+Serial Old</strong>收集器组合日志(-XX:+UseParNewGC):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[GC[ParNew: 7146K-&gt;508K(9216K), 0.0023849 secs] 7146K-&gt;6652K(19456K), 0.0024203 secs] [Times: user=0.00 sys=0.00, </div><div class="line"></div><div class="line">real=0.02 secs] </div><div class="line">Heap</div><div class="line"> par new generation   total 9216K, used 4770K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</div><div class="line">  eden space 8192K,  52% used [0x00000000f9a00000, 0x00000000f9e297b0, 0x00000000fa200000)</div><div class="line">  from space 1024K,  49% used [0x00000000fa300000, 0x00000000fa37f1b8, 0x00000000fa400000)</div><div class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</div><div class="line"> tenured generation   total 10240K, used 6144K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</div><div class="line">   the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)</div><div class="line"> compacting perm gen  total 21248K, used 2582K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</div><div class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb085a70, 0x00000000fb085c00, 0x00000000fc2c0000)</div><div class="line">No shared spaces configured.</div></pre></td></tr></table></figure></p>
<p>使用<strong>Parallel Scavenge+Parallel Old</strong>收集器组合(-XX:+UseParallelOldGC):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Heap</div><div class="line"> PSYoungGen      total 9216K, used 7310K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</div><div class="line">  eden space 8192K, 89% used [0x00000000ff600000,0x00000000ffd23978,0x00000000ffe00000)</div><div class="line">  from space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</div><div class="line">  to   space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</div><div class="line"> ParOldGen       total 10240K, used 4096K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</div><div class="line">  object space 10240K, 40% used [0x00000000fec00000,0x00000000ff000010,0x00000000ff600000)</div><div class="line"> PSPermGen       total 21504K, used 2582K [0x00000000f9a00000, 0x00000000faf00000, 0x00000000fec00000)</div><div class="line">  object space 21504K, 12% used [0x00000000f9a00000,0x00000000f9c85a70,0x00000000faf00000)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[测试JVM运行时常量池溢出]]></title>
      <url>http://www.linmuxi.com/2016/03/02/jvm-runtimeconstantpool-oom/</url>
      <content type="html"><![CDATA[<p>运行时常量池属于方法区(俗称永久代)，如果要使运行时常量池溢出其实就是使方法区溢出，可以通过调整方法区的大小并配合String.intern方法来实现。<br><a id="more"></a></p>
<h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a><strong>Java代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * VM Args: -XX:PermSize=10m -XX:MaxPermSize=10m</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">int</span> i =<span class="number">1</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			list.add(String.valueOf(i++).intern());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码设置方法区的初始内存和最大内存为10m，并通过intern方法不停往方法区写入数据。</p>
<p>最后运行的结果如自己所预料的那样，出现方法区溢出<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/oom_permgen_space_01.png" alt="方法区溢出"></p>
<p>不过，大家请仔细看，上面是基于jdk1.6运行的结果，我们切换到jdk1.7运行再看看，发现不会出现方法区溢出，这是为什么呢？</p>
<p>查看jdk1.7发布<a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html" target="_blank" rel="external">notes</a>发现：</p>
<blockquote>
<p>Area: HotSpot<br>Synopsis: In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but are instead allocated in the main part of the Java heap (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the String.intern() method will see more significant differences.<br>RFE: 6962931</p>
</blockquote>
<p>在JDK7中，常量池已经从方法区中迁移到了java堆中。</p>
<p>为了验证这个问题，我们调整VM的堆内存大小<code>-Xms10m -Xmx10m</code>再运行，结果如下<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/oom_jav_heap_space_01.png" alt="java堆溢出"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于String.intern方法在JDK1.6、1.7中的表现]]></title>
      <url>http://www.linmuxi.com/2016/03/02/string-intern-jdk6-jdk7-01/</url>
      <content type="html"><![CDATA[<p>在读《深入理解Java虚拟机》第2.4.3节的时候，作者讨论了String.intern方法在jdk6、7中的不同表现，当时看到觉得挺有意思，自己也下来实验了一把，确实如同作者提到的那样，在JDK1.6、1.7中intern方法执行的结果不一样。<br><a id="more"></a></p>
<h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a><strong>实例代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str1 = <span class="keyword">new</span> StringBuffer(<span class="string">"计算机"</span>).append(<span class="string">"软件"</span>).toString();</div><div class="line">		System.out.println(str1.intern() == str1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码在JDK1.6中运行结果是false，在JDK1.7中运行结果是true。作者的解释是在JDK1.6中intern方法会把首次遇到的字符串实例复制到永久代中，返回的也是永久代中的这个字符串实例的引用，而JDK1.7中intern方法实现不会再复制实例，只是在常量池中记录首次出现的实例引用。</p>
<p>我们再看下官网api关于intern方法的介绍<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jdk1.6_string_intern.png" alt="JDK1.6">;<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jdk1.7_string_intern.png" alt="JDK1.7">;</p>
<p>两个版本关于intern的描述居然都是一样的：</p>
<blockquote>
<p>当intern方法被执行后，如果常量池中存在该字符串(通过equals判断)，那么就将该字符串从常量池中返回，否则，将该字符串对象添加到常量池中并将指向该对象的引用返回。</p>
</blockquote>
<p>明明intern方法在这两个版本中的表现不一样，文档这里为什么没有一点点体现呢？</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>JDK1.6<br>调用intern方法如果常量池中包含该字符串则返回该字符串引用地址，如果不包括则将该字符串添加到常量池中再返回新的引用地址。所以当调用str1.intern方法时，”计算机软件”在常量池中是不存在的，所以会将该字符串添加到常量池中并返回新的引用地址，所以结果为false。</p>
<p>JDK1.7<br>调用intern方法只是在常量池中记录该字符串的实例引用地址，如果该字符串在常量池中存在，则返回该实例引用地址，不存在则记录实例引用后返回地址。所以当调用str1.intern方法时，“计算机软件”在常量池中不存在，所以常量池中会记录该字符串实例引用并返回引用地址，所以返回的引用地址和str1是同一个实例引用，最后结果为true。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h2><p>最后需要说明一点的是，常量池中会有一些已经存在的字符串常量，看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str1 = <span class="keyword">new</span> StringBuffer(<span class="string">"ma"</span>).append(<span class="string">"in"</span>).toString();</div><div class="line">		System.out.println(str1.intern() == str1);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码在JDK7中执行的结果为false，因为在调用intern方法的时候，常量池中已经存在main，所以返回的是main的引用地址，和str1是不同的实例对象，所以结果为false。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM字节码之简单解读01]]></title>
      <url>http://www.linmuxi.com/2016/02/26/jvm-class-read-01/</url>
      <content type="html"><![CDATA[<p>本篇通过一段简单的代码来分析下字节码的执行，认识认识几个常见的字节码指令<br><a id="more"></a></p>
<h2 id="Java源代码"><a href="#Java源代码" class="headerlink" title="Java源代码"></a><strong>Java源代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">100</span>;</div><div class="line">	<span class="keyword">int</span> j = <span class="number">200</span> + i - <span class="number">100</span>;</div><div class="line">	<span class="keyword">int</span> z = j++;</div><div class="line">	System.out.println(z+i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面源码执行之后的结果是300，下面我们就通过分析class来看看结果是怎么得来的。</p>
<h2 id="Class字节码"><a href="#Class字节码" class="headerlink" title="Class字节码"></a><strong>Class字节码</strong></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">   Stack=3, Locals=4, Args_size=1</div><div class="line">   0:   bipush  100</div><div class="line">   2:   istore_1</div><div class="line">   3:   sipush  200</div><div class="line">   6:   iload_1</div><div class="line">   7:   iadd</div><div class="line">   8:   bipush  100</div><div class="line">   10:  isub</div><div class="line">   11:  istore_2</div><div class="line">   12:  iload_2</div><div class="line">   13:  iinc    2, 1</div><div class="line">   16:  istore_3</div><div class="line">   17:  getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">   20:  iload_3</div><div class="line">   21:  iload_1</div><div class="line">   22:  iadd</div><div class="line">   23:  invokevirtual   #3; //Method java/io/PrintStream.println:(I)V</div><div class="line">   26:  return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们就来分析下字节码的执行：<br><strong>Stack=3, Locals=4, Args_size=1</strong>,这段说明栈中元素有3个，局部变量表中有元素4个，参数1个</p>
<p><strong>0:   bipush  100</strong>      # 将常量100压入栈中<br><strong>2:   istore_1</strong>          # 从栈中取出常量100存储到局部变量表中，下标索引为1<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_01.png-hunterblog" alt=""></p>
<p><strong>3:   sipush  200</strong>      # 将常量200压入栈中<br><strong>6:   iload_1</strong>          # 将下标索引为1的常量从局部变量表中压入栈中。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_02.png-hunterblog" alt=""></p>
<p><strong>7:   iadd      </strong>       # 从栈中取出两个整型常量相加并将结果存储到栈中<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_03.png-hunterblog" alt=""></p>
<p><strong>8:   bipush  100  </strong>    # 将常量100压入栈中<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_04.png-hunterblog" alt=""></p>
<p><strong>10:  isub      </strong>       # 从栈中取出两个整型常量做相减并将结果存储到栈中<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_05.png-hunterblog" alt=""></p>
<p><strong>11:  istore_2    </strong>      # 从栈中取出常量存储到局部变量表中，下标索引为2<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_06.png-hunterblog" alt=""></p>
<p><strong>12:  iload_2     </strong>     # 将下标索引为2的常量从局部变量表中压入栈中<br><strong>13:  iinc    2, 1 </strong>    # 将局部变量表中下标索引为2的变量自增。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_07.png-hunterblog" alt=""></p>
<p><strong>16:  istore_3   </strong>      # 从栈中取出常量存储到局部变量表中，下标索引为3<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_08.png-hunterblog" alt=""></p>
<p><strong>17:  getstatic </strong>      #2; //Field java/lang/System.out:Ljava/io/PrintStream;<br><strong>20:  iload_3  </strong>        # 将下标索引为3的常量从局部变量表中压入栈中<br><strong>21:  iload_1  </strong>        # 将下标索引为1的常量从局部变量表中压入栈中<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_09.png-hunterblog" alt=""></p>
<p><strong>22:  iadd    </strong>         # 从栈中取出两个整型常量相加并将结果存储到栈中<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/jvm_read_class_stack_10.png-hunterblog" alt=""></p>
<p><strong>23:  invokevirtual </strong>  #3; //Method java/io/PrintStream.println:(I)V<br><strong>26:  return</strong></p>
<p>所以最后执行结果是300</p>
<p>大家可能注意到了，在字节码第三行<strong>Stack=3, Locals=4, Args_size=1</strong>，显示的是栈中有3个元素，为什么我们这里只有两个？其实栈中还有一个this元素，由于this不在本篇介绍范围之类，所以例图就省略了，特此说明下。大家可能疑惑这个this是什么时候入栈的，通过下面的代码相信大家就明白了<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public test.Test();</div><div class="line">  Code:</div><div class="line">   Stack=1, Locals=1, Args_size=1</div><div class="line">   0:   aload_0</div><div class="line">   1:   invokespecial   #1; //Method java/lang/Object."&lt;init&gt;":()V</div><div class="line">   4:   return</div><div class="line">  LineNumberTable:</div><div class="line">   line 3: 0</div></pre></td></tr></table></figure></p>
<!-- PS：由于认识较肤浅，如文中有不适当或有误的地方还望大家不吝指出。 -->
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings" target="_blank" rel="external">Java字节码指令列表</a></p>
<!--
查看字节码
javap -c Test
javap -v Test
javap -v Test > E:/Test.dc
-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM字节码之整型入栈指令(iconst、bipush、sipush、ldc)]]></title>
      <url>http://www.linmuxi.com/2016/02/25/jvm-int-pushstack-01/</url>
      <content type="html"><![CDATA[<p>本篇主要分享下在JVM中int类型数值采用何种指令入栈的，根据int值范围JVM入栈字节码指令就分为4类，下面分别介绍下这四类指令。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>当int取值<strong>-1~5</strong>采用iconst指令，取值<strong>-128~127</strong>采用bipush指令，取值<strong>-32768~32767</strong>采用sipush指令，取值<strong>-2147483648~2147483647</strong>采用 ldc 指令。</p>
<h2 id="iconst"><a href="#iconst" class="headerlink" title="iconst"></a><strong>iconst</strong></h2><p>当int取值<strong>-1~5</strong>时，JVM采用<strong>iconst</strong>指令将常量压入栈中。<br>定义<strong>Test.java</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">5</span>;</div><div class="line">	<span class="keyword">int</span> j = -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看<strong>class</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">  Code:</div><div class="line">   <span class="number">0</span>:   iconst_5</div><div class="line">   <span class="number">1</span>:   istore_1</div><div class="line">   <span class="number">2</span>:   iconst_m1</div><div class="line">   <span class="number">3</span>:   istore_2</div><div class="line">   <span class="number">4</span>:   <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析class文件，int取值0~5时JVM采用iconst_0、iconst_1、iconst_2、iconst_3、iconst_4、iconst_5指令将常量压入栈中，取值-1时采用iconst_m1指令将常量压入栈中。</p>
<h3 id="bipush"><a href="#bipush" class="headerlink" title="bipush"></a><strong>bipush</strong></h3><p>当int取值<strong>-128~127</strong>时，JVM采用<strong>bipush</strong>指令将常量压入栈中。<br>定义<strong>Test.java</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">127</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看<strong>class</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">  Code:</div><div class="line">   <span class="number">0</span>:   bipush  <span class="number">127</span></div><div class="line">   <span class="number">2</span>:   istore_1</div><div class="line">   <span class="number">3</span>:   <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到上面代码第三行是采用<strong>bipush</strong>指令将常量127压入栈中。</p>
<h3 id="sipush"><a href="#sipush" class="headerlink" title="sipush"></a><strong>sipush</strong></h3><p>当int取值<strong>-32768~32767</strong>时，JVM采用<strong>sipush</strong>指令将常量压入栈中。<br>定义<strong>Test.java</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = <span class="number">32767</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看<strong>class</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</div><div class="line">  Code:</div><div class="line">   <span class="number">0</span>:   sipush  <span class="number">32767</span></div><div class="line">   <span class="number">3</span>:   istore_1</div><div class="line">   <span class="number">4</span>:   <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到上面代码第三行是采用<strong>sipush</strong>指令将常量32767压入栈中。</p>
<h3 id="ldc"><a href="#ldc" class="headerlink" title="ldc"></a><strong>ldc</strong></h3><p>当int取值<strong>-2147483648~2147483647</strong>时，JVM采用<strong>ldc</strong>指令将常量压入栈中。<br>定义<strong>Test.java</strong>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i = Integer.MAX_VALUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>查看<strong>class</strong>文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static void main(java.lang.String[]);</div><div class="line">  Code:</div><div class="line">   0:   ldc     #2; //int 2147483647</div><div class="line">   2:   istore_1</div><div class="line">   3:   return</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到上面代码第三行是采用<strong>ldc</strong>指令将2147483647常量压入栈中，需要注意的是ldc指令是从常量池中获取值的，也就是说在这段范围（<strong>-2147483648~2147483647</strong>）内的int值是存储在常量池中的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html" target="_blank" rel="external">JVM规范</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github之SSH连接配置]]></title>
      <url>http://www.linmuxi.com/2016/02/24/github-config-ssh/</url>
      <content type="html"><![CDATA[<p>虽然github推荐使用https方式进行连接，但是ssh方式咱们也得会，官网上也都有详细的<a href="https://help.github.com/articles/testing-your-ssh-connection/" target="_blank" rel="external">文档介绍</a>，步骤比较简单，记录这篇的目的是给初入门的小伙伴多一个学习的门径，同时也方便日后自己查看。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>在没有配置ssh的情况下使用ssh连接操作github库的时候会出现如下异常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:linmuxi/<span class="built_in">test</span>-git.git</div><div class="line">Cloning into <span class="string">'test-git'</span>...</div><div class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'192.30.252.129'</span> to the list of known hosts.</div><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">~</div></pre></td></tr></table></figure></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h2><blockquote>
<p>前提是我们已经新建好了一个库test-git,ssh路径是：git@github.com:linmuxi/test-git.git</p>
</blockquote>
<h3 id="1、检查ssh-keys是否存在"><a href="#1、检查ssh-keys是否存在" class="headerlink" title="1、检查ssh keys是否存在"></a><strong>1、检查ssh keys是否存在</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<p>如果目录下面没有id_rsa、id_rsa.pub则表示key不存在</p>
<h3 id="2、生成ssh-key"><a href="#2、生成ssh-key" class="headerlink" title="2、生成ssh key"></a><strong>2、生成ssh key</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Hunter/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Hunter/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Hunter/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:7KwlOZ4yljBZE2ZJ7dr8QGIyQeiPk49L+01fnC0hAZY your_email@example.com</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line">+---[RSA 4096]----+</div><div class="line">| o...=.          |</div><div class="line">|. . *Eo          |</div><div class="line">|.  + o .         |</div><div class="line">| .o = o..        |</div><div class="line">|  +* B .S.       |</div><div class="line">| ++.. ++o +      |</div><div class="line">| .+o o+o+= .     |</div><div class="line">|....B..*o .      |</div><div class="line">| ooo ++.         |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<h3 id="3、将ssh-key添加到ssh-agent"><a href="#3、将ssh-key添加到ssh-agent" class="headerlink" title="3、将ssh key添加到ssh-agent"></a><strong>3、将ssh key添加到ssh-agent</strong></h3><p>先确认ssh-agent是可用的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">eval</span> $(ssh-agent <span class="_">-s</span>)</div><div class="line">Agent pid 20632</div></pre></td></tr></table></figure></p>
<p>将ssh key添加到ssh-agent<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div><div class="line">Identity added: /c/Users/Hunter/.ssh/id_rsa (/c/Users/Hunter/.ssh/id_rsa)</div></pre></td></tr></table></figure></p>
<h3 id="4、将ssh-key配置到github"><a href="#4、将ssh-key配置到github" class="headerlink" title="4、将ssh key配置到github"></a><strong>4、将ssh key配置到github</strong></h3><p>复制key内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>配置key到github<br>登录github-&gt;选择Settings-&gt;SSH keys-&gt;New SSH key</p>
<p>测试ssh key的配置情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh -t git@github.com</div><div class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">'192.30.252.128'</span> to the list of known hosts.</div><div class="line">PTY allocation request failed on channel 0</div></pre></td></tr></table></figure></p>
<p>到这里就配置好了</p>
<p>再次执行clone操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:linmuxi/<span class="built_in">test</span>-git.git</div><div class="line">Cloning into <span class="string">'test-git'</span>...</div><div class="line">remote: Counting objects: 56, done.</div><div class="line">remote: Compressing objects: 100% (34/34), done.</div><div class="line">remote: Total 56 (delta 4), reused 0 (delta 0), pack-reused 8</div><div class="line">Receiving objects: 100% (56/56), 5.42 KiB | 0 bytes/s, done.</div><div class="line">Resolving deltas: 100% (4/4), done.</div><div class="line">Checking connectivity... done.</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你真的了解try{ return }finally{}中的return？]]></title>
      <url>http://www.linmuxi.com/2016/02/23/java-try-finally-return-01/</url>
      <content type="html"><![CDATA[<p>你真的了解try{ return }finally{}中的return？不妨点进来看看，说不定会有一定的小收获呢。<br><a id="more"></a><br>今天去逛论坛 时发现了一个很有趣的<a href="http://bbs.csdn.net/topics/391005556" target="_blank" rel="external">问题</a>：</p>
<blockquote>
<p>谁能给我我解释一下这段程序的结果为什么是：2.而不是：3</p>
</blockquote>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> ++x;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            ++x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test t = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">int</span> y = t.aaa();</div><div class="line">        System.out.println(y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看了问题后，得出了以下几个问题：</p>
<ul>
<li>如果在 try 语句块里使用 return 语句，那么 finally 语句块还会执行吗？（如果你的答案是不会执行，请务必要看下去 ^_^）</li>
<li>如果执行，那么是怎样实现既执行 return 又执行 finally 的呢？（如果你的答案是不知道，请继续看下去！！）</li>
<li>上面的程序输出为什么是2？（ 如果不知道，继续看下去~~）</li>
<li>在网上看到还有人还问“是先执行return还是先执行finally？”的<br>（个人觉得，如果知道finally会执行就可以得出是，先执行finally再执行return的。因为，如果先执行return，那么整个函数都跳出了，那么还怎么执行finally？^_^）</li>
</ul>
<p>刚看到这个问题后。突然发现基础不够扎实，居然来第一个都答不出来。。。（不知道还有木有和我也一样也回答不出以上的问题的？ 如果有请在评论里告诉我一声，让我知道，我并不孤独~~）</p>
<p>根据已有的知识知道：</p>
<blockquote>
<p>return 是可以当作终止语句来用的，我们经常用它来跳出当前方法，并返回一个值给调用方法。然后该方法就结束了，不会执行return下面的语句。<br>finally ：无论try语句发生了什么，无论抛出异常还是正常执行。finally语句都会执行。<br>那么问题来了。。。。在try语句里使用return后，finally是否还会执行？finally一定会执行的说法是否还成立？如果成立，那么先执行return还是先执行finally？</p>
</blockquote>
<h3 id="验证-finally-语句是否会执行，以及-return-和-finally的执行顺序"><a href="#验证-finally-语句是否会执行，以及-return-和-finally的执行顺序" class="headerlink" title="验证 finally 语句是否会执行，以及 return 和 finally的执行顺序"></a><strong>验证 finally 语句是否会执行，以及 return 和 finally的执行顺序</strong></h3><p>在求知欲的驱动下，我继续进行更深的探索，果断打开了Oracle的主页，翻阅了<a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" target="_blank" rel="external">java 官方教程的finally语句</a>。发现了官方教程对这个特殊情况有说明：</p>
<blockquote>
<p>The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling — it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.</p>
<blockquote>
<p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute. Likewise, if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p>
</blockquote>
</blockquote>
<p>个人简单翻译：</p>
<blockquote>
<p>当try语句退出时肯定会执行finally语句。这确保了即使发了一个意想不到的异常也会执行finally语句块。但是finally的用处不仅是用来处理异常——它可以让程序员不会因为return、continue、或者break语句而忽略了清理代码。把清理代码放在finally语句块里是一个很好的做法，即便可能不会有异常发生也要这样做。</p>
<blockquote>
<p>注意，当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</p>
</blockquote>
</blockquote>
<p>从上面的官方说明，我们知道<strong>无论try里执行了return语句、break语句、还是continue语句，finally语句块还会继续执行</strong>。同时，在<a href="http://stackoverflow.com/questions/65035/does-finally-always-execute-in-java/65185#65185" target="_blank" rel="external">stackoverflow</a>里也找到了一个答案，我们可以调用System.exit()来终止它：</p>
<blockquote>
<p>finally will be called.<br>The only time finally won’t be called is: if you call System.exit(), another thread interrupts current one, or if the JVM crashes first</p>
</blockquote>
<p>另外，在<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.17" target="_blank" rel="external">java的语言规范</a>有讲到，如果在try语句里有return语句，finally语句还是会执行。它会在把控制权转移到该方法的调用者或者构造器前执行finally语句。也就是说，使用return语句把控制权转移给其他的方法前会执行finally语句。</p>
<h3 id="个人验证"><a href="#个人验证" class="headerlink" title="个人验证"></a><strong>个人验证</strong></h3><p>我们依然使用上面的代码作为例子。首先，分别在以下三行代码前加上断点：</p>
<ul>
<li>int x = 1;</li>
<li>return ++x;</li>
<li>++x;</li>
</ul>
<p>然后以debug模式运行代码。</p>
<p>刚开始时，效果如下图：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_01.png-hunterblog" alt="">;<br>按一下F6，我们可以发现，程序已经执行到 return ++x;,但还没执行该语句，此刻x=1<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_02.png-hunterblog" alt="">;<br>继续按一下F6，程序执行到 ++x;,但还没执行该语句，因此此时的x=2（刚执行完return ++x语句的++x，但没执行return）<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_03.png-hunterblog" alt="">;<br>继续按一下F6，此时，我们发现程序又跳回到 return +xx 这一行，此刻x=3(执行了finally语句里的++x)<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_04.png-hunterblog" alt="">;</p>
<p>从上面过程中可以看到，</p>
<ul>
<li>在 <strong>try</strong> 里 使用 <strong>return</strong> 还是会执行finally语句的（我们用debug的模式看到了程序会条件 finally语句里执行）</li>
<li>执行完finally语句才执行 return。为什么?从上面的图可以合理推理出return ++x是分开来执行的，先执行++x，再执行finally，最后才执行return跳出函数。因为程序调两次跳到了 return +xx; 语句上。（其实要验证 return ++x 是分开两部分执行的方法很简单，把变量x变成static变量并在main函数里输出，会发现x的值还是3，即使两次跳到 return ++x 也只是第一次执行了加1操作，第二次只是执行了return而没有执行++x。这里是合理推理，后面有真凭实据~~）</li>
</ul>
<p>看到这，我们可能会再次纠结起来了。从上面的验证可以看出，finally语句执行了，而且x的值也确实加到3了，那么为什么y是2呢？</p>
<h3 id="验证为什么是2不是3"><a href="#验证为什么是2不是3" class="headerlink" title="验证为什么是2不是3"></a><strong>验证为什么是2不是3</strong></h3><p>翻看<a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" target="_blank" rel="external">官方的jvm规范</a>就会把一切的谜团解开了：</p>
<blockquote>
<p>If the try clause executes a return, the compiled code does the following:</p>
<ol>
<li>Saves the return value (if any) in a local variable.</li>
<li>Executes a jsr to the code for the finally clause.</li>
<li>Upon return from the finally clause, returns the value saved in the local variable.</li>
</ol>
</blockquote>
<p>简单翻译下：</p>
<blockquote>
<p>如果try语句里有return，那么代码的行为如下：</p>
<ol>
<li>如果有返回值，就把返回值保存到局部变量中</li>
<li>执行jsr指令跳到finally语句里执行</li>
<li>执行完finally语句后，返回之前保存在局部变量表里的值</li>
</ol>
</blockquote>
<p>根据上面的说明就可以轻易地解释为什么是2了。<br>当执行到return ++x;时，jvm在执行完++x后会在局部变量表里另外分配一个空间来保存当前x的值。<br>注意，现在还没把值返回给y，而是继续执行finally语句里的语句。等执行完后再把之前保存的值（是2不是x）返回给y。<br>所以就有了y是2不是3的情况。</p>
<p>其实这里还有一点要注意的是，如果你在finally里也用了return语句，比如return +xx。那么y会是3。因为规范规定了，当try和finally里都有return时，会忽略try的return，而使用finally的return。</p>
<p>查看Test.class的字节码我们同样也可以很轻松地知道为什么是2而不是3：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_05.png-hunterblog" alt="">;</p>
<p>大概讲讲指令操作顺序：<br>iconst_1： 把常数1进栈 —&gt; istore_1： 栈顶元素出栈并把元素保存在本地变量表的第二个位置里（下标为1的位置里） —&gt; iinc 1, 1 ： 本地变量表的第二个元素自增1 —&gt;iload_1：第二个元素进栈 —&gt; istore_2：栈顶元素出栈并把元素保存在本地变量表的第2个位置里 —&gt; iinc 1, 1 ： 本地变量表的第二个元素自增1 —&gt; iload_2：第二个元素进栈 （注意，此时栈顶元素为2）—&gt; ireturn：返回栈顶元素。</p>
<p>后面的指令是要在2-7行出现异常时在跳到12行的，这个例子没出现异常，不用关注。</p>
<p>上面流程栈和本地变量表的情况如下图：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/java_try_finally_return_06.png-hunterblog" alt="">;</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li>再次发现帮助别人解决问题的好处，不仅能帮人还能完善自己</li>
<li>字节码的知识还是挺实用的，有空要深入研究下</li>
<li>再次证明官方教程和资料真的很有用</li>
</ul>
<p>参考资料：<br><a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" target="_blank" rel="external">Java虚拟机规范</a><br><a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" target="_blank" rel="external">java 官方教程的finally语句</a><br><a href="http://www.ibm.com/developerworks/library/it-haggar_bytecode/" target="_blank" rel="external">IBM的Java字节码教程</a><br><a href="http://book.douban.com/subject/24722612/" target="_blank" rel="external">深入理解Java虚拟机（第2版）</a></p>
<p><strong>本文转摘自：<a href="http://www.cnblogs.com/averey/p/4379646.html" target="_blank" rel="external">http://www.cnblogs.com/averey/p/4379646.html</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle单向高级流复制的使用]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-stream-01/</url>
      <content type="html"><![CDATA[<p>本篇分享下Oracle中流复制的使用。<br><a id="more"></a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需求：需要将A地采集到的数据发送到B地数据库中。<br>环境：网络环境是A到B是单项通讯</p>
<p>暂且称A为主库，B为从库</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>一、在主库配置到从库的tns连接<br>~ tnsping boyuupq_10_19</p>
<p>二、修改数据库域名(注意修改完后要重启数据库)<br>查看数据库域名<br><code>select * from global_name;</code> //boyuupq.REGRESS.RDBMS.DEV.US.ORACLE.COM</p>
<p>修改数据库域名<br><code>alter database rename global_name to boyuupq_10_18;</code></p>
<p>执行完这步之后，查询发现数据库域名还是上面的结果，新建dblink名称后面也会自动拼接上这后缀。<br>这时可以执行：<code>update global_name set global_name = boyuupq_10_18;</code></p>
<p>三、新建流管理员strmadmin(使用sysdba帐号)<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SQL&gt;conn /as sysdba</div><div class="line">SQL&gt; create user strmadmin identified by strmadmin default tablespace users temporary tablespace temp;</div><div class="line">SQL&gt; execute dbms_defer_sys.register_propagator('strmadmin');</div><div class="line">SQL&gt; grant execute any procedure to strmadmin;</div><div class="line">SQL&gt; execute dbms_repcat_admin.grant_admin_any_repgroup('strmadmin');</div><div class="line">SQL&gt; execute dbms_repcat_admin.grant_admin_any_schema(username =&gt; 'strmadmin');</div><div class="line">SQL&gt; grant comment any table to strmadmin;</div><div class="line">SQL&gt; grant lock any table to strmadmin;</div><div class="line">SQL&gt; grant select any dictionary to strmadmin;</div></pre></td></tr></table></figure></p>
<p>四、用流管理员strmadmin新增到从库的dblink<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL&gt; conn strmadmin/strmadmin</div><div class="line">SQL&gt; create database link "boyuupq_10_19" connect to strmadmin identified by strmadmin using 'boyuupq_10_19';</div></pre></td></tr></table></figure></p>
<p>五、查询dblink<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SQL&gt; select owner,db_link,host from all_db_links;</div><div class="line">OWNER         DB_LINK                                 HOST   </div><div class="line">STRMADMIN  boyuupq_10_19    boyuupq_10_19</div></pre></td></tr></table></figure></p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>一、修改数据库域名(注意修改完后要重启数据库)<br>查看数据库域名<br><code>select * from global_name;</code> //boyuupq.REGRESS.RDBMS.DEV.US.ORACLE.COM</p>
<p>修改数据库域名<br><code>alter database rename global_name to boyuupq_10_19;</code></p>
<p>执行完这步之后，查询发现数据库域名还是上面的结果，新建dblink名称后面也会自动拼接上这后缀。<br>这时可以执行：<code>update global_name set global_name = boyuupq_10_19;</code></p>
<p>二、新建流管理员strmadmin(使用sysdba帐号)<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SQL&gt;conn /as sysdba</div><div class="line">SQL&gt; create user strmadmin identified by strmadmin default tablespace users temporary tablespace temp;</div><div class="line">SQL&gt; execute dbms_defer_sys.register_propagator('strmadmin');</div><div class="line">SQL&gt; grant execute any procedure to strmadmin;</div><div class="line">SQL&gt; execute dbms_repcat_admin.grant_admin_any_repgroup('strmadmin');</div><div class="line">SQL&gt; execute dbms_repcat_admin.grant_admin_any_schema(username =&gt; 'strmadmin');</div><div class="line">SQL&gt; grant comment any table to strmadmin;</div><div class="line">SQL&gt; grant lock any table to strmadmin;</div><div class="line">SQL&gt; grant select any dictionary to strmadmin;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上面的操作主要是配置数据库名称、流管理员、dblink，下面将要进行流队列、捕获进程、传播进程、应用进程的配置</p>
</blockquote>
<h3 id="创建流队列"><a href="#创建流队列" class="headerlink" title="创建流队列"></a>创建流队列</h3><p>主库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_streams_adm.set_up_queue( </div><div class="line">		queue_table =&gt; <span class="string">'boyuupq_10_18_queue_table'</span>, </div><div class="line">		queue_name =&gt; <span class="string">'boyuupq_10_18_queue'</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure></p>
<p>从库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_streams_adm.set_up_queue( </div><div class="line">		queue_table =&gt; <span class="string">'boyuupq_10_19_queue_table'</span>, </div><div class="line">		queue_name =&gt; <span class="string">'boyuupq_10_19_queue'</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure></p>
<h3 id="创建捕获进程-主库"><a href="#创建捕获进程-主库" class="headerlink" title="创建捕获进程(主库)"></a>创建捕获进程(主库)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_streams_adm.add_schema_rules( </div><div class="line">		schema_name =&gt; <span class="string">'sa'</span>, </div><div class="line">		streams_type =&gt; <span class="string">'capture'</span>, </div><div class="line">		streams_name =&gt; <span class="string">'capture_boyuupq_10_18'</span>, </div><div class="line">		queue_name =&gt; <span class="string">'strmadmin.boyuupq_10_18_queue'</span>, </div><div class="line">		include_dml =&gt; <span class="literal">true</span>, </div><div class="line">		include_ddl =&gt; <span class="literal">true</span>, </div><div class="line">		include_tagged_lcr =&gt; <span class="literal">false</span>, </div><div class="line">		source_database =&gt; <span class="literal">null</span>, </div><div class="line">		inclusion_rule =&gt; <span class="literal">true</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="创建传播进程-主库"><a href="#创建传播进程-主库" class="headerlink" title="创建传播进程(主库)"></a>创建传播进程(主库)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_streams_adm.add_schema_propagation_rules( </div><div class="line">		schema_name =&gt; <span class="string">'sa'</span>, </div><div class="line">		streams_name =&gt; <span class="string">'boyuupq18_to_boyuupq19'</span>, </div><div class="line">		source_queue_name =&gt; <span class="string">'strmadmin.boyuupq_10_18_queue'</span>, </div><div class="line">		destination_queue_name =&gt; <span class="string">'strmadmin.boyuupq_10_19_queue@book'</span>, </div><div class="line">		include_dml =&gt; <span class="literal">true</span>, </div><div class="line">		include_ddl =&gt; <span class="literal">true</span>, </div><div class="line">		include_tagged_lcr =&gt; <span class="literal">false</span>, </div><div class="line">		source_database =&gt; <span class="string">'boyuupq_10_18'</span>, //主库数据库名称，注意这里的配置是否正确</div><div class="line">		inclusion_rule =&gt; <span class="literal">true</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="修改propagation休眠时间为0，表示实时传播LCR"><a href="#修改propagation休眠时间为0，表示实时传播LCR" class="headerlink" title="修改propagation休眠时间为0，表示实时传播LCR"></a>修改propagation休眠时间为0，表示实时传播LCR</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_aqadm.alter_propagation_schedule( </div><div class="line">		queue_name =&gt; <span class="string">'boyuupq_10_18_queue'</span>, </div><div class="line">		destination =&gt; <span class="string">'boyuupq_10_19'</span>, //到从库的dblink名称</div><div class="line">		latency =&gt; <span class="number">0</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="创建应用进程-从库"><a href="#创建应用进程-从库" class="headerlink" title="创建应用进程(从库)"></a>创建应用进程(从库)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line"><span class="keyword">begin</span> </div><div class="line">	dbms_streams_adm.add_schema_rules( </div><div class="line">		schema_name =&gt; <span class="string">'sa'</span>, </div><div class="line">		streams_type =&gt; <span class="string">'apply'</span>, </div><div class="line">		streams_name =&gt; <span class="string">'apply_boyuupq_10_19'</span>, </div><div class="line">		queue_name =&gt; <span class="string">'strmadmin.boyuupq_10_19_queue'</span>, </div><div class="line">		include_dml =&gt; <span class="literal">true</span>, </div><div class="line">		include_ddl =&gt; <span class="literal">true</span>, </div><div class="line">		include_tagged_lcr =&gt; <span class="literal">false</span>, </div><div class="line">		source_database =&gt; <span class="string">'boyuupq_10_18'</span>, //主库数据库名称</div><div class="line">		inclusion_rule =&gt; <span class="literal">true</span>); </div><div class="line"><span class="keyword">end</span>; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="启动应用进程-从库-先应用、后捕获，传播自动启动"><a href="#启动应用进程-从库-先应用、后捕获，传播自动启动" class="headerlink" title="启动应用进程(从库,先应用、后捕获，传播自动启动)"></a>启动应用进程(从库,先应用、后捕获，传播自动启动)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line">#启动Apply进程 </div><div class="line">begin </div><div class="line">	dbms_apply_adm.start_apply( </div><div class="line">		apply_name =&gt; 'apply_boyuupq_10_19'); </div><div class="line">end; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="启动捕获进程-主库"><a href="#启动捕获进程-主库" class="headerlink" title="启动捕获进程(主库)"></a>启动捕获进程(主库)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line">#启动Capture进程 </div><div class="line">begin </div><div class="line">	dbms_capture_adm.start_capture( </div><div class="line">		capture_name =&gt; 'capture_boyuupq_10_18'); </div><div class="line">end; </div><div class="line">/</div></pre></td></tr></table></figure>
<blockquote>
<p>到这里流配置就完成了，可以通过下面的sql语句进行运行状况的查询</p>
</blockquote>
<h3 id="查询stream运行状况"><a href="#查询stream运行状况" class="headerlink" title="查询stream运行状况"></a>查询stream运行状况</h3><p>主库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--捕获进程信息</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dba_capture;</div><div class="line"><span class="comment">--传播进程信息</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dba_propagation;</div><div class="line"><span class="comment">--已经捕获到的表对象</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DBA_CAPTURE_PREPARED_TABLES <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">SCN</span>;</div><div class="line"><span class="comment">--已经捕获到的schema对象</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> dba_capture_prepared_schemas;</div></pre></td></tr></table></figure></p>
<p>从库：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--应用进程信息</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_apply;</div><div class="line"><span class="comment">--应用进程错误详细信息</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_apply_error;</div><div class="line"><span class="comment">--当前已经实例化的schema对象</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_apply_instantiated_schemas;</div><div class="line"><span class="comment">--当前已经实例化并同步过来的对象(表)</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_apply_instantiated_objects;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>下面提供了停止相应流进程的操作</p>
</blockquote>
<h3 id="停止捕获进程-主库"><a href="#停止捕获进程-主库" class="headerlink" title="停止捕获进程(主库)"></a>停止捕获进程(主库)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line">#停止Capture进程 </div><div class="line">begin </div><div class="line">	dbms_capture_adm.stop_capture( </div><div class="line">		capture_name =&gt; 'capture_boyuupq_10_18'); </div><div class="line">end; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="停止应用进程-从库"><a href="#停止应用进程-从库" class="headerlink" title="停止应用进程(从库)"></a>停止应用进程(从库)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">connect strmadmin/strmadmin;</div><div class="line">#停止Apply进程 </div><div class="line">begin </div><div class="line">	dbms_apply_adm.stop_apply( </div><div class="line">		apply_name =&gt; 'apply_boyuupq_10_19'); </div><div class="line">end; </div><div class="line">/</div></pre></td></tr></table></figure>
<h3 id="删除传播进程、应用进程"><a href="#删除传播进程、应用进程" class="headerlink" title="删除传播进程、应用进程"></a>删除传播进程、应用进程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">exec dbms_capture_adm.drop_capture("capture_boyuupq_10_18");</div><div class="line">exec dbms_apply_adm.drop_apply('apply_boyuupq_10_19');</div></pre></td></tr></table></figure>
<h3 id="删除所有流配置信息"><a href="#删除所有流配置信息" class="headerlink" title="删除所有流配置信息"></a>删除所有流配置信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exec dbms_streams_adm.remove_streams_configuration();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Undo与Redo的介绍]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-undo-redo/</url>
      <content type="html"><![CDATA[<p>本篇主要分享下Oracle中Undo与Redo的介绍<br><a id="more"></a></p>
<h2 id="undo"><a href="#undo" class="headerlink" title="undo"></a>undo</h2><p>undo: 回滚段，分为系统存储段、非系统存储段,基于表空间数据存储,存储旧数据<br>根据undo_management参数来判断是基于UNDOTBS1表空间还是system表空间存储回滚段(只要数据未提交、回滚段未写满或者回滚段未超时的情况下，旧数据都能被回滚回来。)</p>
<h2 id="redo"><a href="#redo" class="headerlink" title="redo"></a>redo</h2><p>redo：重做日志，分为在线、离线，基于日志文件存储，存储新旧数据<br>如果开启数据库归档，则归档日志文件为离线重做日志文件</p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>执行场景：id = 100,age = 100;</p>
<p>用户session1执行修改操作：<code>update scott.emp set age = 10 where id = 100;</code></p>
<p>此时还未commit，实际已经做了如下操作：<br>1、在SGA区(数据缓冲区)产生回滚段记录UNDO块包含旧数据<br>2、在SGA区(数据缓冲区)将id=100对应的数据给修改为10<br>3、在SGA区中重做日志缓冲区中生成了重做记录(条目)包含修改前后的数据<br>4、得到所需的所有锁</p>
<p>PS：如果此时用户session2来查询id=100的数据，结果是age=100，这个结果是从回滚段记录undo中获取的</p>
<p>当commit的时候，做的操作如下：<br>1、为事务产生一个SCN(system change number)<br>2、LGWR把重做日志缓冲区条目写到磁盘(重做日志文件),并在联机重做日志中记录SCN.<br>3、释放锁<br>4、对缓冲区中的数据块进行块清理（刷新数据文件）</p>
<!-- show parameter undo;
如果undo_management为auto，则undo块数据存储在UNDOTBS1表空间，如果为manual(手动模式),则undo块数据存储在System表空间中 -->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ORA-01555：快照过旧，回滚段号10(名称为“_SYSSMU10$”)过小]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-flashback-err-02/</url>
      <content type="html"><![CDATA[<p>前篇介绍了利用闪回查询可以将误删的数据恢复，但该操作并不能100%进行数据恢复。本篇就该问题进行分享下。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该异常的原因是UNDO表空间(System表空间或UNDOTBS1表空间)的数据已经被覆盖或是保留时间过期。因为闪回查询是基于UNDO数据来执行的。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>有两种方式可以解决该问题<br>1、增大UNDO表空间大小<br>2、或者修改undo_retention的时间</p>
<p>通过show parameter undo 查询UNDO的信息;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sql&gt; show parameter undo</div><div class="line">undo_management string AUTO</div><div class="line">undo_retention integer 86400  (默认为分钟)</div><div class="line">undo_tablespace string UNDOTBS1</div></pre></td></tr></table></figure></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>undo表空间用于存放undo数据，当执行DML操作（insert、update、delete）时，oracle会将这些操作的旧数据写入到undo段。</p>
<p>ora-01555快照过旧就是因为undo空间不够大，其中一部分undo数据被覆盖了，用户无法获得修改前的数据或是保留时间过期。</p>
<p>undo数据分为三种：<br>活动的undo：未提交事务的undo数据，这些undo数据永远不能覆盖，用于回滚rollback事务。<br>过期的undo：已提交事务的undo数据，这些undo数据可以覆盖。<br>未过期的undo：事务已提交，但事务提交前，有些查询正在进行，它要读取的是提交前的数据，这部分数据就是未过期数据。如果这部分undo数据被覆盖了，就会发生ora-01555错误。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle恢复被误删的数据]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-recover-del-data/</url>
      <content type="html"><![CDATA[<p>这篇分享下如何恢复被Delete掉的数据。<br><a id="more"></a></p>
<p>下面一共介绍三种恢复数据的方法：</p>
<h2 id="利用闪回"><a href="#利用闪回" class="headerlink" title="利用闪回"></a>利用闪回</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 开启行移动功能</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> my_test <span class="keyword">ENABLE</span> <span class="keyword">ROW</span> <span class="keyword">MOVEMENT</span>;</div><div class="line">// 闪回表到指定时间点(需要开启行移动功能)</div><div class="line">FLASHBACK TABLE my_test TO TIMESTAMP to_timestamp('2013-10-17 17:05:00','yyyy-mm-dd hh24:mi:ss')</div></pre></td></tr></table></figure>
<h2 id="利用Oracle的快照进行某个时间点的数据查询"><a href="#利用Oracle的快照进行某个时间点的数据查询" class="headerlink" title="利用Oracle的快照进行某个时间点的数据查询"></a>利用Oracle的快照进行某个时间点的数据查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 查询在当前时间之前的8分钟时候的数据</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_test <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">TIMESTAMP</span> (<span class="keyword">SYSDATE</span> - <span class="built_in">INTERVAL</span> <span class="string">'8'</span> <span class="keyword">MINUTE</span>)</div><div class="line">// 查询指定时间点的数据</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_test <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">TIMESTAMP</span> to_timestamp(<span class="string">'2013-10-17 17:05:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>);</div></pre></td></tr></table></figure>
<h2 id="基于SCN"><a href="#基于SCN" class="headerlink" title="基于SCN"></a>基于SCN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 查询指定时间点的SCN</div><div class="line"><span class="keyword">SELECT</span> timestamp_to_scn(to_timestamp(<span class="string">'2013-10-17 17:05:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>)) <span class="keyword">FROM</span> dual;</div><div class="line">// 查询指定SCN点的数据</div><div class="line"><span class="keyword">select</span> * <span class="keyword">FROM</span> my_test <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">SCN</span> <span class="number">10305758694685</span></div></pre></td></tr></table></figure>
<p><strong> PS:如果是在被删除的第一时间进行数据恢复，则可能性很大，否则可能性会大大减小。</strong><br>因为回滚段可能会被后来的数据覆盖掉(进行快照查询会出现：ORA-01555:快照过旧)。当然，也可以通过增大回滚表空间(UNDOTBS1)的大小来提高回滚数据存放的时间</p>
<!--
//指定删除时间、对象名称，返回存储过程或函数的执行sql
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> RECOVE_PROCE(DEL_TIME <span class="keyword">IN</span> VARCHAR2,PROC_NAME <span class="keyword">IN</span> VARCHAR2) <span class="keyword">RETURN</span> VARCHAR2 <span class="keyword">IS</span></div><div class="line"><span class="comment">/**</div><div class="line">	*</div><div class="line">	* function Name :存储过程或function 删除后恢复方法</div><div class="line">	* del_time 对象被删除时间</div><div class="line">	* proc_Name :被删除对象名称</div><div class="line">	* return :返回重建对象的语句</div><div class="line">	*</div><div class="line">*/</span></div><div class="line">OBJ_NUM <span class="built_in">NUMBER</span>;</div><div class="line">STR_PROC VARCHAR2(2000);</div><div class="line">STR_END VARCHAR2(2000) := '';</div><div class="line">STR_SQL VARCHAR2(2000);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">SELECT</span> OBJ# <span class="keyword">INTO</span> OBJ_NUM</div><div class="line">		<span class="keyword">FROM</span> OBJ$ <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">TIMESTAMP</span> TO_TIMESTAMP(DEL_TIME, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>)</div><div class="line">	<span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="keyword">UPPER</span>(PROC_NAME);</div><div class="line"></div><div class="line">	FOR I IN (</div><div class="line">		<span class="keyword">SELECT</span> <span class="keyword">ROWID</span> RID, <span class="keyword">SOURCE</span> <span class="keyword">FROM</span> <span class="keyword">SOURCE</span>$ <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">TIMESTAMP</span> TO_TIMESTAMP(DEL_TIME, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>)</div><div class="line">		<span class="keyword">WHERE</span> OBJ# = OBJ_NUM <span class="keyword">ORDER</span> <span class="keyword">BY</span> LINE</div><div class="line">			) <span class="keyword">LOOP</span></div><div class="line">	</div><div class="line">		<span class="keyword">SELECT</span> <span class="keyword">SOURCE</span> <span class="keyword">INTO</span> STR_PROC </div><div class="line">			<span class="keyword">FROM</span> <span class="keyword">SOURCE</span>$ <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="keyword">TIMESTAMP</span> TO_TIMESTAMP(DEL_TIME, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>)</div><div class="line">		<span class="keyword">WHERE</span> OBJ# = OBJ_NUM <span class="keyword">AND</span> <span class="keyword">ROWID</span> = I.RID <span class="keyword">ORDER</span> <span class="keyword">BY</span> LINE;</div><div class="line">		</div><div class="line">		STR_END := STR_END || STR_PROC;</div><div class="line">	</div><div class="line">	<span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line"></div><div class="line">	STR_SQL := '<span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="string">' || STR_END;</div><div class="line">	</div><div class="line">	RETURN STR_SQL;</div><div class="line">	</div><div class="line">	EXCEPTION</div><div class="line">		WHEN OTHERS THEN</div><div class="line">			DBMS_OUTPUT.PUT_LINE(SQLCODE || SQLERRM);</div><div class="line"></div><div class="line">	RETURN NULL;</div><div class="line"></div><div class="line">END RECOVE_PROCE;</span></div></pre></td></tr></table></figure>
<p>–&gt;</p>
-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle回收站(Recycle Bin)的使用]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-recycle-bin/</url>
      <content type="html"><![CDATA[<p>我们Drop掉的表还能被找回来吗？答案是必须的。就该问题本篇分享下Oracle中Recycle Bin的使用。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回收站(Recycle Bin）从原理上来说就是一个数据字典表，放置用户删除（drop）掉的数据库对象信息。用户进行删除操作的对象并没有被数据库删除，仍然会占用空间。除非是由于用户手工进行Purge或者因为存储空间不够而被数据库清掉。</p>
<p>除非拥有sysdba权限，每个用户只能看到属于自己的对象。所以，对于用户来说，好像每个人都拥有自己的回收站。即使用户有删除其它schema对象的权限，也只能在recyclebin中看到属于自己的对象</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>启动和关闭<br><code>SELECT Value FROM V$parameter WHERE Name = &#39;recyclebin&#39;;</code><br>或<br><code>show parameter recyclebin;</code><br>如果返回值为“on”表明回收站是启动的，“off”表明是关闭的。</p>
<p>当然，你可以启动或者关闭回收站里的每个会话（session）和系统（system），代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ALTER SYSTEM SET recyclebin = ON; </div><div class="line"></div><div class="line">ALTER SESSION SET recyclebin = ON; </div><div class="line"></div><div class="line">ALTER SYSTEM SET recyclebin = OFF; </div><div class="line"></div><div class="line">ALTER SESSION SET recyclebin = OFF;</div></pre></td></tr></table></figure></p>
<p>获取回收站里的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM RECYCLEBIN; </div><div class="line"></div><div class="line">SELECT * FROM USER_RECYCLEBIN; </div><div class="line"> </div><div class="line">SELECT * FROM DBA_RECYCLEBIN;</div></pre></td></tr></table></figure></p>
<p>还原被Drop的表<br><code>flashback table &lt;droped_table_name&gt; to before drop [rename &lt;new_table_name&gt;]</code></p>
<p>利用flashback将删除的表闪回，不过这个flashback并不是100%将删除的表还原，具体下篇再介绍。</p>
<p>清空回收站<br>a.清空一个特定的表：purge table <table_name><br>b.清空一个特定的索引：purge index <index_name><br>c.清空与该表空间有关联的对象：purge tablespace <tablespace_name><br>d.清空一个特定用户的表空间对象：purge tablespace <tablespace_name> user <user_name><br>e.清空回收站：purge recyclebin<br>f.当一个表被删除（drop）时就直接从回收站中清空:drop table <table_name> purge;</table_name></user_name></tablespace_name></tablespace_name></index_name></table_name></p>
<p>注意：<br>以下几种drop不会将相关对象放进RecycleBin：<br>drop tablespace：会将RecycleBin中所有属于该tablespace的对象清除<br>drop user：会将RecycleBin中所有属于该用户的对象清除<br>drop cluster：会将RecycleBin中所有属于该cluster的成员对象清除<br>drop type：会将RecycleBin中所有依赖该type的对象清除</p>
<p><strong> PS：如果大家使用PlSql developer工具，该工具提供了RecycleBin窗口可视化操作。 </strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更改ORACLE归档路径及归档模式]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle_change_archive_mode/</url>
      <content type="html"><![CDATA[<p>本篇分享下如何更改ORACLE归档路径及归档模式<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在ORACLE10g和11g版本，ORACLE默认的日志归档路径为闪回恢复区 （$ORACLE_BASE/flash_recovery_area）。对于这个路径，ORACLE有一个限制，就是默认只有2G的空间，而且不只是归 档日志的默认路径，也是备份文件和闪回日志的默认地址，这样的话归档日志锁使用的空间就达不到2G，在没有设置好这个路径大小的情况下，很多系统都遇到过 归档日志满而无法归档导致数据库夯住的问题。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>可以使用下面的SQL语句去查看归档信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SQL&gt; archive <span class="built_in">log</span> list</div><div class="line">数据库日志模式             非存档模式</div><div class="line">自动存档             禁用</div><div class="line">存档终点            USE_DB_RECOVERY_FILE_DEST</div><div class="line">最早的联机日志序列     321</div><div class="line">当前日志序列           326。</div></pre></td></tr></table></figure></p>
<p>上面的存档终点USE_DB_RECOVERY_FILE_DEST默认就是闪回恢复区（$ORACLE_BASE/flash_recovery_area），可以通过下面的SQL查看闪回恢复区的信息。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SQL&gt; show parameter db_recover</div><div class="line">NAME                        <span class="built_in">TYPE</span>         VALUE</div><div class="line">--------------------------  ----------- ----------------------------</div><div class="line">db_recovery_file_dest       string      D:\oracle\flash_recovery_area</div><div class="line">db_recovery_file_dest_size  big integer   <span class="number">2</span>G</div></pre></td></tr></table></figure></p>
<p>通过上面的SQL结果可以看到，闪回恢复区为D:\oracle\flash_recovery_area，大小为2G，也可以通过查询v$recovery_file_dest视图查看闪回恢复的限制信息。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQL&gt; select name,SPACE_LIMIT,SPACE_USED from v$recovery_file_dest;</div><div class="line">NAME                           SPACE_LIMIT SPACE_USED</div><div class="line">------------------------------ ----------- ----------</div><div class="line"><span class="function">D:\<span class="title">oracle</span>\<span class="title">flash_recovery_area</span>   2147483648   21225472</span></div></pre></td></tr></table></figure></p>
<p>默认情况下，归档日志会存放到闪回恢复区（D:\oracle\flash_recovery_area）内，如果闪回恢复区已经使用到2G，归档日志就有可能无法继续归档，数据库夯住，通常的解决方法是增大闪回恢复区，可以用以下SQL实现。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL&gt; alter system set db_recovery_file_dest_size=3G;</div><div class="line">系统已更改。</div></pre></td></tr></table></figure></p>
<p>即使用这种方法解决的当前燃眉之急，但是如果备份策略不是很完善，数据库非常繁忙的情况下，还有可能遇到这种情况，通常需要修改归档日志的路径，将归档日志放到其他不受限制的路径下来解决这个问题，可通过下面的SQL来修改归档日志的存放路径。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL&gt; alter system set log_archive_dest_1='location=D:\arch';</div><div class="line">系统已更改。</div></pre></td></tr></table></figure></p>
<p>然后将数据库启动到MOUNT状态，将数据库修改为归档模式后建数据库启动到OPEN状态。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SQL&gt; shutdown immediate</div><div class="line">数据库已经关闭。</div><div class="line">已经卸载数据库。</div><div class="line">ORACLE 例程已经关闭。</div><div class="line">SQL&gt; startup mount</div><div class="line">ORACLE 例程已经启动。</div><div class="line">数据库装载完毕。</div><div class="line">SQL&gt; alter database archivelog;</div><div class="line">数据库已更改。</div><div class="line">SQL&gt; alter database open;</div><div class="line">数据库已更改。</div></pre></td></tr></table></figure>
<p>再次查看数据库的归档情况。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SQL&gt; archive log list</div><div class="line">数据库日志模式            存档模式</div><div class="line">自动存档             启用</div><div class="line">存档终点            D:\arch</div><div class="line">最早的联机日志序列     <span class="number">321</span></div><div class="line">下一个存档日志序列   <span class="number">326</span></div><div class="line">当前日志序列           <span class="number">326</span></div></pre></td></tr></table></figure>
<p>可以通过切换日志，查看归档路径下是否有归档日志产生来验证归档路径设置是否正确，可以通过下面的命令切换日志。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL&gt; alter system switch logfile;</div><div class="line">系统已更改。</div></pre></td></tr></table></figure>
<p>查看归档路径（D:\arch）下是否有归档路径产生。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">D:\<span class="title">arch</span>&gt;<span class="title">dir</span>/<span class="title">b</span></span></div><div class="line"><span class="title">ARC0000000326_0764368160</span>.0001</div></pre></td></tr></table></figure>
<p>可以看到在D:\arch路径下已经产生了归档日志，归档日志的名字受log_archive_format参数限制，可以通过下面的命令查看。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQL&gt; show parameter log_archive_format</div><div class="line">NAME                   <span class="built_in">TYPE</span>         VALUE</div><div class="line">---------------------- ------------ ------------</div><div class="line">log_archive_format     string       ARC<span class="variable">%S_%</span>R.%T</div></pre></td></tr></table></figure>
<p>上面产生的归档文件名字为ARC0000000326_0764368160.0001，%S也就是0000000326是日志切换号，也就是上文archive log list中的当前日志序列，%R是场景号，%T是线程号，可以理解成是节点号，如果不是RAC环境，%T都是1，还可以在log_archive_format参数值中加上%D，%D是16进制标识的DBID，如下演示：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SQL&gt; alter system <span class="built_in">set</span> log_archive_format='ARC<span class="variable">%S_%</span>R.<span class="variable">%T_%</span>D.log' scope=spfile;</div><div class="line">系统已更改。  </div><div class="line">SQL&gt; shutdown immediate</div><div class="line">数据库已经关闭。</div><div class="line">已经卸载数据库。</div><div class="line">ORACLE 例程已经关闭。</div><div class="line">SQL&gt; startup</div><div class="line">ORACLE 例程已经启动。</div><div class="line">数据库装载完毕。</div><div class="line">数据库已经打开。</div><div class="line">SQL&gt; alter system switch logfile;</div><div class="line">系统已更改。</div></pre></td></tr></table></figure>
<p>查看归档日志的名字，5AA14A62就是16进制的DBID。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">D:\<span class="title">arch</span>&gt;<span class="title">dir</span>/<span class="title">b</span></span></div><div class="line"><span class="title">ARC0000000326_0764368160</span>.0001</div><div class="line"><span class="title">ARC0000000327_0764368160</span>.0001<span class="title">_5AA14A62.LOG</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[问题：ORA-00257: 归档程序错误。在释放之前仅限于内部连接]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-archive-err-01/</url>
      <content type="html"><![CDATA[<p>本篇分享下Oracle异常问题的处理方法<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间发现测试环境Oracle数据库连接不上了，到后台看日志输出：’问题：ORA-00257: 归档程序错误。在释放之前仅限于内部连接’，经分析是归档日志文件占满FLASH_RECOVERY_AREA的空间，下面就该问题分析下具体的解决方法。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、查询FLASH-RECOVERY-AREA空间大小"><a href="#1、查询FLASH-RECOVERY-AREA空间大小" class="headerlink" title="1、查询FLASH_RECOVERY_AREA空间大小"></a>1、查询FLASH_RECOVERY_AREA空间大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//查看恢复区各文件占用百分比情况</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v$flash_recovery_area_usage;</div><div class="line">//查看恢复区总大小</div><div class="line"><span class="keyword">show</span> parameter db_recovery_file_dest;</div></pre></td></tr></table></figure>
<h3 id="2、扩大FLASH-RECOVERY-AREA的空间或删除归档日志"><a href="#2、扩大FLASH-RECOVERY-AREA的空间或删除归档日志" class="headerlink" title="2、扩大FLASH_RECOVERY_AREA的空间或删除归档日志"></a>2、扩大FLASH_RECOVERY_AREA的空间或删除归档日志</h3><p>A.扩大FLASH_RECOVERY_AREA的空间<br>执行<code>alter system set db_recovery_file_dest_size=扩容大小 scope=both;</code></p>
<p>B.删除归档日志</p>
<ul>
<li>先手动删除归档日志物理文件(PS:没有完全删除，控制文件中还有记录，所以实际占用的容量并没有调整，此时应该是无效的归档日志文件)</li>
<li>利用RMAN删除无效归档日志文件<ul>
<li>rman target/@edmp （使用sysdba登录，rman target sys/pwd@orcl）</li>
<li>crosscheck archivelog all;（检查控制文件和实际物理文件的差别）<br>ps：出现验证失败的，表示该归档日志文件已经被物理删除</li>
<li>list expired archivelog all;（查看所有过期归档日志文件列表,PS:要使用crosscheck archivelog all进行同步之后才能正确显示过期归档日志列表）</li>
<li>delete expired archivelog all;（删除所有过期归档文件）</li>
<li>list archivelog all;（查看所有归档日志文件列表）<br>到这里，归档文件就已经被正确删除了。</li>
</ul>
</li>
<li>删除归档日志（做好备份）<ul>
<li>DELETE ARCHIVELOG ALL COMPLETED BEFORE ‘SYSDATE-7’;（删除7天前的备份）</li>
<li>DELETE ARCHIVELOG FROM TIME ‘SYSDATE-7’;（删除从7天前到现在的全部日志）</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对Oracle数据做批量更新的两种方法]]></title>
      <url>http://www.linmuxi.com/2016/02/22/oracle-update-01/</url>
      <content type="html"><![CDATA[<p>同时对多条(w)数据做update操作，我用到了下面的两种方法<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实对表数据做更新一个update操作的事情，为啥还要整出下面的两种方法，之前在工作中测试数据，需要批量对数据做更新，都是在plsql中执行update，有一会遇到数据量稍微大点的，基本就“卡死”在update了。所以对数据量大点的操作基本不推荐直接update，根据测试结果我更偏向第二种方式。</p>
<h2 id="1-Bulk-Collect"><a href="#1-Bulk-Collect" class="headerlink" title="1. Bulk Collect"></a>1. Bulk Collect</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">DECLARE</div><div class="line">  TYPE rowid_list IS TABLE OF UROWID INDEX BY BINARY_INTEGER;</div><div class="line">  rowid_infos rowid_list;</div><div class="line">  i NUMBER;</div><div class="line">  CURSOR c_rowids IS SELECT ROWID FROM t_target;</div><div class="line">BEGIN</div><div class="line">  OPEN c_rowids;</div><div class="line">  LOOP</div><div class="line">    FETCH c_rowids BULK COLLECT INTO rowid_infos LIMIT 2000;</div><div class="line">    FORALL i IN 1..rowid_infos.count</div><div class="line">           UPDATE t_target SET DEVICE_MODE = to_char(LENGTH(DEVICE_MODE)+1)</div><div class="line">           WHERE ROWID = rowid_infos(i) AND 1 = 1;</div><div class="line">    EXIT WHEN ROWid_infos.count &lt; 2000;</div><div class="line">  END LOOP;</div><div class="line">END;</div></pre></td></tr></table></figure>
<h2 id="2-insert-append"><a href="#2-insert-append" class="headerlink" title="2. insert append"></a>2. insert append</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--创建临时表(不产生undo)</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> T_TARGET_TEMP NOLOGGING <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> T_TARGET <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">0</span>;</div><div class="line"><span class="comment">--写入数据的同时做出更新操作(以不产生undo的方式写入数据)</span></div><div class="line"><span class="keyword">INSERT</span> <span class="comment">/*+append*/</span><span class="keyword">INTO</span> T_TARGET_TEMP </div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">       <span class="keyword">UUID</span>,</div><div class="line">       ASSET_NO,</div><div class="line">       FACTORY,</div><div class="line">       to_char(<span class="keyword">LENGTH</span>(DEVICE_MODE)+<span class="number">1</span>),<span class="comment">/** 做出修改 */</span></div><div class="line">       RUN_STATUS</div><div class="line"><span class="keyword">FROM</span> t_target;</div><div class="line"><span class="comment">--提交</span></div><div class="line"><span class="keyword">COMMIT</span>;</div><div class="line"><span class="comment">--删除原表</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> T_TARGET <span class="keyword">PURGE</span>;</div><div class="line"><span class="comment">--更名临时表为源表名</span></div><div class="line"><span class="keyword">RENAME</span> T_TARGET_TEMP <span class="keyword">TO</span> T_TARGET;</div><div class="line"><span class="comment">--修改表结构为归档模式,参数undo</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> T_TARGET <span class="keyword">LOGGING</span>;</div><div class="line"><span class="comment">--创建索引</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> IDX_COMM_ADDRESS <span class="keyword">on</span> T_TARGET (COMM_ADDRESS)</div><div class="line">  <span class="keyword">tablespace</span> EDMP</div><div class="line">  pctfree <span class="number">10</span></div><div class="line">  <span class="keyword">initrans</span> <span class="number">2</span></div><div class="line">  <span class="keyword">maxtrans</span> <span class="number">255</span></div><div class="line">  <span class="keyword">storage</span></div><div class="line">  (</div><div class="line">    <span class="keyword">initial</span> <span class="number">4</span>M</div><div class="line">    <span class="keyword">minextents</span> <span class="number">1</span></div><div class="line">    <span class="keyword">maxextents</span> <span class="keyword">unlimited</span></div><div class="line">  );</div><div class="line">....</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[发布Node.js应用到NPM]]></title>
      <url>http://www.linmuxi.com/2016/02/19/node-js-publish-to-npm/</url>
      <content type="html"><![CDATA[<p>本篇主要分享下如何将Node.js应用发布到NPM<br><a id="more"></a></p>
<p><strong>前言</strong><br>前提NPM和Node.js环境已经安装完成。</p>
<p><strong>发布到Npm</strong><br>首页你得有一个NPM账户，没有大家可以自行到NPM官网上去<a href="https://www.npmjs.com/signup" target="_blank" rel="external">注册</a>。</p>
<p>1、通过npm初始化package.json文件<br><!-- ![](http://7xqlat.com1.z0.glb.clouddn.com/npm_init_01.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">hunter@hunter-ubuntu:~/hello-hunter$ npm init</div><div class="line">...</div><div class="line">Press ^C at any time to quit.</div><div class="line">name: (hello-hunter) </div><div class="line">version: (1.0.0) </div><div class="line">description: this is node demo</div><div class="line">entry point: (index.js) </div><div class="line">test command: </div><div class="line">git repository: </div><div class="line">keywords: test</div><div class="line">author: hunter</div><div class="line">license: (ISC) MIT</div><div class="line">About to write to /home/hunter/hello-hunter/package.json:</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;hello-hunter&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;this is node demo&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [</div><div class="line">    &quot;test&quot;</div><div class="line">  ],</div><div class="line">  &quot;author&quot;: &quot;hunter&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Is this ok? (yes) yes</div></pre></td></tr></table></figure></p>
<p>2、在目录下面新增index.js文件，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"hello hunter"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、登录npm<br><!-- ![](http://7xqlat.com1.z0.glb.clouddn.com/npm_login_01.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hunter@hunter-ubuntu:~/hello-hunter$ npm login</div><div class="line">Username: hunterlin</div><div class="line">Password: </div><div class="line">Email: (this IS public) ***</div><div class="line">Logged in as hunterlin on https://registry.npmjs.org/.</div></pre></td></tr></table></figure></p>
<p>注意：创建的账户要到邮箱中激活才可以使用。</p>
<p>4、发布应用到npm<br><!-- ![](http://7xqlat.com1.z0.glb.clouddn.com/npm_publish_01.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hunter@hunter-ubuntu:~/hello-hunter$ npm publish</div><div class="line">+ hello-hunter@3.0.0</div></pre></td></tr></table></figure></p>
<p>到这里我们的node应用就发布到npm上面去了，我们可以在官网查询到我们发布的应用<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/npm_search_01.png" alt=""></p>
<p>5、从npm下载应用<br>构建如下目录结构：</p>
<ul>
<li>hello-nodejs<ul>
<li>index.js</li>
<li>package.json</li>
</ul>
</li>
</ul>
<p>index.js文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">// 引入hello-hunter模块并调用</div><div class="line">require(&apos;hello-hunter&apos;)();</div></pre></td></tr></table></figure></p>
<p>package.json文件内容通过npm init来生成。</p>
<p>通过npm下载hello-hunter模块<br><!-- ![](http://7xqlat.com1.z0.glb.clouddn.com/npm_install_01.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hunter@hunter-ubuntu:~/test-nodejs$ npm install hello-hunter --save</div><div class="line">test-nodejs@1.0.0 /home/hunter/test-nodejs</div><div class="line">└── hello-hunter@1.0.0</div></pre></td></tr></table></figure></p>
<p>运行node程序<br><!-- ![](http://7xqlat.com1.z0.glb.clouddn.com/npm_node_run_01.png) --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hunter@hunter-ubuntu:~/test-nodejs$ node index.js </div><div class="line">hello hunter</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何编写Hexo插件]]></title>
      <url>http://www.linmuxi.com/2016/02/19/hexo-custom-plugin-01/</url>
      <content type="html"><![CDATA[<p>本篇主要分享下如何在Hexo中自定义插件。<br><a id="more"></a><br><strong>前言</strong><br>我们现在编写一个插件，功能很简单，就是将文章中的所有超链接的打开方式换成在tab或新窗口中打开。</p>
<p><strong>实现步骤</strong></p>
<ul>
<li>在node_modules目录下面新增插件目录hexo-test(注意hexo规定自定义插件目录名称必须是hexo-开头的)</li>
<li>在hexo-test目录下面新增以下文件：<ul>
<li>hexo-test(插件目录)<ul>
<li>index.js</li>
<li>package.json</li>
<li>README.md</li>
<li>LICENSE</li>
<li>lib<ul>
<li>filter.js</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>开始编写插件：<br>在_config.yml中配置插件选项：<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">test:</span></div><div class="line">	_target: <span class="literal">true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>index.js文件内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">if</span>(hexo.config.test &amp;&amp; hexo.config.test._target)&#123;</div><div class="line">	hexo.extend.filter.register(<span class="string">"after_render:html"</span>,<span class="built_in">require</span>(<span class="string">'./lib/filter'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>lib\filter.js文件内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> $ = cheerio.load(source);</div><div class="line">	$(<span class="string">"a"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</div><div class="line">		$(<span class="keyword">this</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>);</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> $.html();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>package.json文件内容：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-test"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<!-- 将插件依赖添加到博客package.json中：
~~~json
{
  "name": "hunter-blog",
  "version": "1.0.0",
  "private": true,
  "hexo": {
    "version": "3.1.1"
  },
  "dependencies": {
    "hexo": "^3.1.0",
    "hexo-deployer-git": "0.0.4",
    "hexo-generator-archive": "^0.1.2",
    "hexo-generator-category": "^0.1.2",
    "hexo-generator-index": "^0.1.2",
    "hexo-generator-search": "^1.0.2",
    "hexo-generator-tag": "^0.1.1",
    "hexo-renderer-ejs": "^0.1.0",
    "hexo-renderer-marked": "^0.2.4",
    "hexo-renderer-stylus": "^0.3.0",
    "hexo-server": "^0.1.2",
    "hexo-test": "1.0.0"
  }
}
~~~ -->
<p>到这里，我们的自定义插件就完成了。</p>
<p>大家可以参考官网关于自定义插件文档介绍：<a href="https://hexo.io/docs/plugins.html" target="_blank" rel="external">https://hexo.io/docs/plugins.html</a><br>另外官网上也介绍了如何将自定义插件发布到hexo站点供其他小伙伴使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CommonJS,AMD,CMD及UMD规范介绍]]></title>
      <url>http://www.linmuxi.com/2016/02/18/commonJS-amd-cmd-umd-intro/</url>
      <content type="html"><![CDATA[<p>本篇分享下关于前端模块规范CommonJS、AMD、CMD及UMD的介绍。<br><a id="more"></a></p>
<p><strong>前言</strong><br>为什么要制定这些前端模块规范？由于JavaScript的崛起，很多基于js编写的应用组件给予了我们很大的便利，但是不可以避免会出现一个问题就是很多组件并不能愉快的在一起协同工作，例如会出现命名冲突、文件依赖等问题,参考下<a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">前端模块化开发的价值</a><br>为了解决这些问题，一些牛人们就制定出了前端模块化规范，他们规定开发者们都采用一种约定好的模式来进行代码编写，以避免对整个生态圈的污染。</p>
<p><strong>他们的异同</strong><br>CommonJS是运行在服务端的模块规范，Node.js实现了这种规范<br>AMD、CMD、UMD是运行在浏览器端的模块规范，常用到的库有seajs，requirejs</p>
<p><strong>CommonJS</strong><br>据CommonJS规范，一个单独的文件就是一个模块，每一个模块都是一个单独的作用域。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象，CommonJS以同步方式加载模块。</p>
<p>模块定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MyUtil.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">util</span>(<span class="params">args</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"hello "</span>+args.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = util;</div></pre></td></tr></table></figure></p>
<p>模块加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="comment">//require以同步方式加载模块</span></div><div class="line"></div><div class="line"><span class="comment">//加载jquery模块</span></div><div class="line"><span class="keyword">var</span> jquery = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line"></div><div class="line"><span class="comment">//加载自定义模块.js</span></div><div class="line"><span class="keyword">var</span> MyUtil = <span class="built_in">require</span>(<span class="string">'./MyUtil'</span>);</div><div class="line"></div><div class="line"><span class="comment">//加载common目录下面的index.js</span></div><div class="line"><span class="comment">//var common = require('./common');</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> util = <span class="keyword">new</span> MyUtil(&#123;<span class="attr">name</span>:<span class="string">"hunter"</span>&#125;);</div><div class="line">util.show();</div></pre></td></tr></table></figure></p>
<p>执行Node.js应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node index.js</div></pre></td></tr></table></figure></p>
<p><strong>AMD</strong><br>全称”Asynchronous Module Definition”(异步模块加载规范) , requirejs库实现了该规范。<br><!-- 定义模块使用define，加载模块使用requirejs或require。 --></p>
<p>模块定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;&#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>模块加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="comment">//加载jquery模块和sub模块</span></div><div class="line">requirejs([<span class="string">'lib/jquery'</span>,<span class="string">'app/sub'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,sub</span>)</span>&#123;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>关于requirejs库的详细使用可以参考：<a href="http://requirejs.org" target="_blank" rel="external">http://requirejs.org</a></p>
<p><strong>CMD</strong><br>全称”Common Module Definition”(通用模块加载规范)，seajs库实现了该规范。</p>
<p>模块定义及加载<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 所有模块都通过 define 来定义</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 通过 require 引入依赖</span></div><div class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 通过 exports 对外提供接口</span></div><div class="line">  exports.doSomething = ...</div><div class="line"></div><div class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></div><div class="line">  <span class="built_in">module</span>.exports = ...</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>关于seajs库的详细使用可以参考：<a href="http://seajs.org" target="_blank" rel="external">http://seajs.org</a></p>
<p><strong>UMD</strong><br>全称”Universal Module Definition”(通用模块规范)<br>UMD是AMD和CommonJS的糅合,因为AMD、CommonJS规范是两种不一致的规范，虽然他们应用的场景也不太一致，但是人们仍然是期望有一种统一的规范来支持这两种规范,于是UMD规范诞生了。</p>
<p>采用UMD规范编写的组件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">        <span class="comment">// AMD</span></div><div class="line">        define([<span class="string">'jquery'</span>], factory);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="comment">// Node, CommonJS-like</span></div><div class="line">        <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Browser globals (root is window)</span></div><div class="line">        root.returnExports = factory(root.jQuery);</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">// methods</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	<span class="built_in">console</span>.log(<span class="string">"Jquery:"</span>+$);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// exposed public method</span></div><div class="line">    <span class="keyword">return</span> myFunc;</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>RequireJS调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载require.js文件</span></div><div class="line">&lt;script src=<span class="string">"require.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">//加载app模块</span></div><div class="line">	requirejs([<span class="string">'app'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</div><div class="line">		app();</div><div class="line">	&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>Node.js调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">require</span>(<span class="string">'./app'</span>)();</div></pre></td></tr></table></figure></p>
<p>原生调用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">this</span>.returnExports();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面三种调用方式输出的结果是一样的，如果想让编写的组件支持AMD和CommonJS规范，那么就采用UMD来包装下吧。<br>jQuery就采用这个方式包装了下让其可以支持AMD和CommonJS规范。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="built_in">module</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">	<span class="comment">// Expose jQuery as module.exports in loaders that implement the Node</span></div><div class="line">	<span class="comment">// module pattern (including browserify). Do not create the global, since</span></div><div class="line">	<span class="comment">// the user will be storing it themselves locally, and globals are frowned</span></div><div class="line">	<span class="comment">// upon in the Node module world.</span></div><div class="line">	<span class="built_in">module</span>.exports = jQuery;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// Otherwise expose jQuery to the global object as usual</span></div><div class="line">	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line"></div><div class="line">	<span class="comment">// Register as a named AMD module, since jQuery can be concatenated with other</span></div><div class="line">	<span class="comment">// files that may use define, but not via a proper concatenation script that</span></div><div class="line">	<span class="comment">// understands anonymous AMD modules. A named AMD is safest and most robust</span></div><div class="line">	<span class="comment">// way to register. Lowercase jquery is used because AMD module names are</span></div><div class="line">	<span class="comment">// derived from file names, and jQuery is normally delivered in a lowercase</span></div><div class="line">	<span class="comment">// file name. Do this after creating the global so that if an AMD module wants</span></div><div class="line">	<span class="comment">// to call noConflict to hide this version of jQuery, it will work.</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd ) &#123;</div><div class="line">		define( <span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> jQuery; &#125; );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js事件对象EventEmitter]]></title>
      <url>http://www.linmuxi.com/2016/02/17/node-js-eventobj-EventEmitter/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下Node.js事件对象EventEmiiter的介绍和使用<br><a id="more"></a></p>
<p><strong>前言</strong><br>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。<br>Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。<br>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p>
<p><strong>EventEmitter类</strong><br>events模块只提供了一个对象：EventEmitter。EventEmitter的核心就是事件触发与事件监听器功能的封装。<br>可以通过require(“events”)来访问该模块。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">use <span class="string">'strict'</span></div><div class="line"><span class="comment">// 引入 events 模块</span></div><div class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="comment">// 创建 eventEmitter 对象</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</div><div class="line"><span class="comment">//注册test_event事件的监听器</span></div><div class="line">eventEmitter.on(<span class="string">'test_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'test_event 事件触发'</span>); </div><div class="line">&#125;); </div><div class="line"><span class="comment">//1秒后向eventEmitter对象发送事件test_event,此时会调用test_event的监听器</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">	eventEmitter.emit(<span class="string">'test_event'</span>); </div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p><strong>EventEmitter类信息</strong></p>
<ul>
<li>Events<ul>
<li>Class: events.EventEmitter<ul>
<li>Inheriting from ‘EventEmitter’</li>
<li>Class Method: EventEmitter.listenerCount(emitter, event)</li>
<li>Event: ‘newListener’</li>
<li>Event: ‘removeListener’</li>
<li>EventEmitter.defaultMaxListeners</li>
<li>emitter.addListener(event, listener)</li>
<li>emitter.emit(event[, arg1][, arg2][, …])</li>
<li>emitter.getMaxListeners()</li>
<li>emitter.listenerCount(type)</li>
<li>emitter.listeners(event)</li>
<li>emitter.on(event, listener)</li>
<li>emitter.once(event, listener)</li>
<li>emitter.removeAllListeners([event])</li>
<li>emitter.removeListener(event, listener)</li>
<li>emitter.setMaxListeners(n)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>用法参考：<a href="http://nodejs.cn/doc/node/events.html" target="_blank" rel="external">http://nodejs.cn/doc/node/events.html</a></p>
<p><strong>继承EventEmitter</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	EventEmitter.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过util提供的方法使MyObject继承EventEmitter的方法</span></div><div class="line">util.inherits(MyObject,EventEmitter);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyObject();</div><div class="line">obj.on(<span class="string">"data"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"接受事件："</span>+arg1+<span class="string">"  "</span>+arg2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	obj.emit(<span class="string">"data"</span>,<span class="string">"hello"</span>,<span class="string">"world"</span>);</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>通过继承EventEmitter，obj拥有了事件注册和触发等功能，很多node.js核心模块中的事件响应都是基于这种方法来实现的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo生成静态文件异常分析]]></title>
      <url>http://www.linmuxi.com/2016/02/17/hexo-generate-staticfile-error-analy/</url>
      <content type="html"><![CDATA[<p>关闭Hexo默认highlight代码高亮，执行<code>hexo g</code>生成静态文件，出现异常：<code>FATAL Template render error: tag name expected</code><br><a id="more"></a></p>
<p><strong>前言</strong><br>想利用Google Code Prettify代码高亮来取代Hexo默认的highlight代码高亮，在修改全局配置文件_config.yml的highlight为false之后运行<code>hexo g</code>生成静态文件,结果出现异常：<code>FATAL Template render error: tag name expected</code></p>
<p><strong>原因</strong><br>在文章内容中出现了下面两种情况：<br><code># }</code> #和}之间没有空格导致</p>
<p><code>{ %</code> {和%之间没有空格导致</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读Hexo源码第二节]]></title>
      <url>http://www.linmuxi.com/2016/02/17/hexo-source-analy-02/</url>
      <content type="html"><![CDATA[<p>在<a href="2016/02/16/hexo-source-analy-01/">上一篇</a>中已经介绍了Hexo-cli是如何加载到Hexo模块的，这篇着重分析下Hexo模块代码。<br><a id="more"></a></p>
<p><strong>hexo-cli/lib/index.js</strong><br>loadHexoModule方法<br>主要是加载Hexo模块并实例化Hexo对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHexoModule</span>(<span class="params">path, args</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> modulePath = pathFn.join(path, <span class="string">'node_modules'</span>, <span class="string">'hexo'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//加载Hexo模块(\hexo\lib\hexo\index.js),关于这里是如何加载到的，上一篇文章“读Hexo源码第一节”已经做了说明</span></div><div class="line">    <span class="keyword">var</span> Hexo = <span class="built_in">require</span>(modulePath);</div><div class="line">    <span class="comment">//Hexo模块构造函数下面有介绍</span></div><div class="line">    <span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(path, args);</div><div class="line">    log = hexo.log;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> runHexoCommand(hexo, args);</div><div class="line">  &#125; <span class="keyword">catch</span> (_) &#123;</div><div class="line">    log.error(<span class="string">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class="line">    log.error(<span class="string">'Try running: \'npm install hexo --save\''</span>);</div><div class="line">    process.exit(<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>runHexoCommand方法<br>主要是调用init方法进行初始化以及调用call方法去处理输入的命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runHexoCommand</span>(<span class="params">hexo, args</span>) </span>&#123;</div><div class="line">  <span class="comment">//调用hexo模块的init方法,init内容在下面介绍</span></div><div class="line">  <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cmd = args._.shift();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cmd) &#123;</div><div class="line">      <span class="keyword">var</span> c = hexo.extend.console.get(cmd);</div><div class="line">      <span class="keyword">if</span> (!c) cmd = <span class="string">'help'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.v || args.version) &#123;</div><div class="line">      cmd = <span class="string">'version'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.consoleList) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(hexo.extend.console.list()).join(<span class="string">'\n'</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.completion) &#123;</div><div class="line">      <span class="keyword">return</span> completion(args);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      cmd = <span class="string">'help'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    watchSignal(hexo);</div><div class="line">    </div><div class="line">    <span class="comment">//调用hexo模块的call方法，具体内容在下面介绍</span></div><div class="line">    <span class="keyword">return</span> hexo.call(cmd, args).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> hexo.exit(err).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        handleError(err);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>hexo/lib/hexo/index.js</strong><br>关于hexo模块，着重看下构造函数、init、call方法</p>
<p>Hexo构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hexo</span>(<span class="params">base, args</span>) </span>&#123;</div><div class="line">  <span class="comment">//获取当前路径 E:\demo\hexo\source_analy</span></div><div class="line">  base = base || process.cwd();</div><div class="line">  args = args || &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="comment">//Hexo继承EventEmitter,使其拥有事件绑定和触发的能力。配合构造函数下面的代码require('util').inherits(Hexo, EventEmitter);</span></div><div class="line">  EventEmitter.call(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">//设置目录名称</span></div><div class="line">  <span class="keyword">this</span>.base_dir = base + sep;</div><div class="line">  <span class="keyword">this</span>.public_dir = pathFn.join(base, <span class="string">'public'</span>) + sep;</div><div class="line">  <span class="keyword">this</span>.source_dir = pathFn.join(base, <span class="string">'source'</span>) + sep;</div><div class="line">  <span class="keyword">this</span>.plugin_dir = pathFn.join(base, <span class="string">'node_modules'</span>) + sep;</div><div class="line">  <span class="keyword">this</span>.script_dir = pathFn.join(base, <span class="string">'scripts'</span>) + sep;</div><div class="line">  <span class="keyword">this</span>.scaffold_dir = pathFn.join(base, <span class="string">'scaffolds'</span>) + sep;</div><div class="line">  <span class="keyword">this</span>.theme_dir = pathFn.join(base, <span class="string">'themes'</span>, defaultConfig.theme) + sep;</div><div class="line">  <span class="keyword">this</span>.theme_script_dir = pathFn.join(<span class="keyword">this</span>.theme_dir, <span class="string">'scripts'</span>) + sep;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.env = &#123;</div><div class="line">    <span class="attr">args</span>: args,</div><div class="line">    <span class="attr">debug</span>: <span class="built_in">Boolean</span>(args.debug),</div><div class="line">    <span class="attr">safe</span>: <span class="built_in">Boolean</span>(args.safe),</div><div class="line">    <span class="attr">silent</span>: <span class="built_in">Boolean</span>(args.silent),</div><div class="line">    <span class="attr">env</span>: process.env.NODE_ENV || <span class="string">'development'</span>,</div><div class="line">    <span class="attr">version</span>: pkg.version,</div><div class="line">    <span class="attr">init</span>: <span class="literal">false</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//全局配置文件_config.yml路径</span></div><div class="line">  <span class="keyword">this</span>.config_path = args.config ? pathFn.resolve(base, args.config)</div><div class="line">                                 : pathFn.join(base, <span class="string">'_config.yml'</span>);</div><div class="line">  </div><div class="line">  <span class="comment">//下面的模块都提供了register方法，在hexo的init方法中会将nodejs模块注册到下面对应的模块中去</span></div><div class="line">  <span class="keyword">this</span>.extend = &#123;</div><div class="line">    <span class="attr">console</span>: <span class="keyword">new</span> extend.Console(),</div><div class="line">    <span class="attr">deployer</span>: <span class="keyword">new</span> extend.Deployer(),</div><div class="line">    <span class="comment">// 过滤器链，提供了注册、异步和同步执行方法，可以将我们自定义的nodejs应用注册进去，可以参考nodejs模块：hexo-server</span></div><div class="line">    filter: <span class="keyword">new</span> extend.Filter(),</div><div class="line">    <span class="attr">generator</span>: <span class="keyword">new</span> extend.Generator(),</div><div class="line">    <span class="attr">helper</span>: <span class="keyword">new</span> extend.Helper(),</div><div class="line">    <span class="attr">migrator</span>: <span class="keyword">new</span> extend.Migrator(),</div><div class="line">    <span class="attr">processor</span>: <span class="keyword">new</span> extend.Processor(),</div><div class="line">    <span class="attr">renderer</span>: <span class="keyword">new</span> extend.Renderer(),</div><div class="line">    <span class="comment">//采用Nunjucks渲染标签</span></div><div class="line">    tag: <span class="keyword">new</span> extend.Tag()</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">//设置全局配置文件_config.yml</span></div><div class="line">  <span class="keyword">this</span>.config = _.clone(defaultConfig);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.log = createLogger(<span class="keyword">this</span>.env);</div><div class="line"></div><div class="line">  <span class="comment">//提供render方法渲染数据或文件，具体内部还是调用this.extend.renderer注册的相关对象</span></div><div class="line">  <span class="keyword">this</span>.render = <span class="keyword">new</span> Render(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">//提供format方法处理url请求地址，在生成静态文件(hexo/lib/plugins/console/generate.js)的时候会调用里面的方法</span></div><div class="line">  <span class="keyword">this</span>.route = <span class="keyword">new</span> Router();</div><div class="line"></div><div class="line">  <span class="comment">//提供create、render、publish方法，主要用于文章的创建和渲染以及将草稿文章发布成正式文章,具体内部还是调用了this.extend.renderer、this.extend.filter、this.extend.tag注册的相关对象</span></div><div class="line">  <span class="keyword">this</span>.post = <span class="keyword">new</span> Post(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.scaffold = <span class="keyword">new</span> Scaffold(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">//默认db.json未加载</span></div><div class="line">  <span class="keyword">this</span>._dbLoaded = <span class="literal">false</span>;</div><div class="line"></div><div class="line">  <span class="comment">//默认静态文件未生成</span></div><div class="line">  <span class="keyword">this</span>._isGenerating = <span class="literal">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.database = <span class="keyword">new</span> Database(&#123;</div><div class="line">    <span class="attr">version</span>: dbVersion,</div><div class="line">    <span class="attr">path</span>: pathFn.join(base, <span class="string">'db.json'</span>)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">//初始化Schema模型并存储到database中</span></div><div class="line">  registerModels(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.source = <span class="keyword">new</span> Source(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>.theme = <span class="keyword">new</span> Theme(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>.locals = <span class="keyword">new</span> Locals(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">this</span>._bindLocals();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>init方法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Hexo.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.log.debug(<span class="string">'Hexo version: %s'</span>, chalk.magenta(<span class="keyword">this</span>.version));</div><div class="line">  <span class="keyword">this</span>.log.debug(<span class="string">'Working directory: %s'</span>, chalk.magenta(tildify(<span class="keyword">this</span>.base_dir)));</div><div class="line"></div><div class="line">  <span class="comment">// Load internal plugins</span></div><div class="line">  <span class="comment">//注册Hexo控制台命令到this.extend.console模块中，例如我们用到的hexo clean &amp; hexo g &amp; hexo d ...</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/console'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">//注册到this.extend.filter模块中,具体功能下面分析</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/filter'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/generator'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">//注册到this.extend.helper模块中，提供了我们可以使用到的帮助标签，例如：link_to、image_tag、tagcloud等等，详情见：hexo/lib/plugins/helper/index.js</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/helper'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/processor'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">//注册到this.extend.renderer模块中,提供了对html、css、js、json、swig、yml等语法的解析方法</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/renderer'</span>)(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">//注册到this.extend.tag模块中，提供对"&#123; % % &#125;"语法的解析，详情见：hexo/lib/plugins/tag/index.js</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'../plugins/tag'</span>)(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Load config</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.each([</div><div class="line">    <span class="string">'update_package'</span>, <span class="comment">// Update package.json</span></div><div class="line">    <span class="string">'load_config'</span>, <span class="comment">// Load config</span></div><div class="line">    <span class="string">'load_plugins'</span> <span class="comment">// Load external plugins &amp; scripts</span></div><div class="line">  ], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./'</span> + name)(self);</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> self.execFilter(<span class="string">'after_init'</span>, <span class="literal">null</span>, &#123;<span class="attr">context</span>: self&#125;);</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// Ready to go!</span></div><div class="line">    self.emit(<span class="string">'ready'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>call方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Hexo.prototype.call = function(name, args, callback)&#123;</div><div class="line">  if (!callback &amp;&amp; typeof args === &apos;function&apos;)&#123;</div><div class="line">    callback = args;</div><div class="line">    args = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var self = this;</div><div class="line"></div><div class="line">  return new Promise(function(resolve, reject)&#123;</div><div class="line">    //根据控制台输入的参数到Hexo.extend.console中获取到对应的js模块</div><div class="line">    var c = self.extend.console.get(name);</div><div class="line"></div><div class="line">    if (c)&#123;</div><div class="line">      //调用对应参数的js模块</div><div class="line">      c.call(self, args).then(resolve, reject);</div><div class="line">    &#125; else &#123;</div><div class="line">      reject(new Error(&apos;Console `&apos; + name + &apos;` has not been registered yet!&apos;));</div><div class="line">    &#125;</div><div class="line">  &#125;).nodeify(callback);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>hexo/lib/plugins/filter模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> filter = ctx.extend.filter;</div><div class="line">  <span class="comment">//对文章中的摘要进行处理，即&lt;!--more--&gt;</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./after_post_render'</span>)(ctx);</div><div class="line">  <span class="comment">//处理代码高亮和将标题首字母转大写</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./before_post_render'</span>)(ctx);</div><div class="line">  <span class="comment">//保存database中的数据到db.json</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./before_exit'</span>)(ctx);</div><div class="line">  <span class="comment">//渲染文章内容</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./before_generate'</span>)(ctx);</div><div class="line">  <span class="comment">//模版本地化(i18n)</span></div><div class="line">  <span class="built_in">require</span>(<span class="string">'./template_locals'</span>)(ctx);</div><div class="line"></div><div class="line">  filter.register(<span class="string">'new_post_path'</span>, <span class="built_in">require</span>(<span class="string">'./new_post_path'</span>));</div><div class="line">  filter.register(<span class="string">'post_permalink'</span>, <span class="built_in">require</span>(<span class="string">'./post_permalink'</span>));</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<!--Hexo相关Node.js库

bluebird：github.com/petkaantonov/bluebird
bluebird是一个功能齐全的库,专注于创新的特性和性能

warehouse：github.com/tommy351/warehouse
Hexo使用的数据库

titlecase：首字母转大写

-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读Hexo源码第一节]]></title>
      <url>http://www.linmuxi.com/2016/02/16/hexo-source-analy-01/</url>
      <content type="html"><![CDATA[<p>Hexo使用已经有段时间了，昨天想利用Google-Code-Prettify取代Hexo默认的高亮配置，修改了_config.yml的highlight为false，结果在生成静态文件的时候报错，由于对Hexo内部运转不是太清楚，为了解决这个问题，我不得不深入研究下Hexo的源码来了解其运行过程。<br><a id="more"></a><br>hexo-cli安装完成后，需要进行环境变量配置，这样我们才能在dos中使用hexo命令。<br>我这里的nodejs是安装在E:\opensource\nodejs目录下面,那么需要把E:\opensource\nodejs配置到path变量中。</p>
<p>我们在dos中执行：<code>hexo help</code>，其实是调用E:\opensource\nodejs目录下面的hexo.cmd批处理文件。</p>
<p><strong>hexo.cmd</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">rem 先判断当前目录下是否存在node.exe</div><div class="line">@IF EXIST <span class="string">"%~dp0\node.exe"</span> (</div><div class="line">  rem 存在则调用当前目录下面的node_modules\hexo-cli\bin\hexo 模块</div><div class="line">  <span class="string">"%~dp0\node.exe"</span>  <span class="string">"%~dp0\node_modules\hexo-cli\bin\hexo"</span> %*</div><div class="line">) ELSE (</div><div class="line">  @SETLOCAL</div><div class="line">  @SET PATHEXT=%PATHEXT:;.JS;=;%</div><div class="line">  node  <span class="string">"%~dp0\node_modules\hexo-cli\bin\hexo"</span> %*</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><strong>hexo模块</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env node</span></div><div class="line"></div><div class="line"><span class="string">'use strict'</span>;</div><div class="line">//调用上一层目录lib(执行下面的index.js文件)</div><div class="line">require(<span class="string">'../lib'</span>)();</div></pre></td></tr></table></figure></p>
<p>lib目录结构：</p>
<ul>
<li>lib<ul>
<li>index.js</li>
<li>find_pkg.js</li>
<li>completion.js</li>
<li>logger.js</li>
<li>goodbye.js</li>
<li>console<ul>
<li>index.js</li>
<li>init.js</li>
<li>version.js</li>
<li>help.js</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>lib/index.js文件</strong><br>主要是调用find_pkg模块进行package.json的查找<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports = <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//调用find_pkg模块进行包查找</span></div><div class="line">  <span class="keyword">return</span> findPkg(cwd, args).then(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">    <span class="comment">//如果当前目录不存在则调用hexo-cli命令输出</span></div><div class="line">    <span class="keyword">if</span> (!path) <span class="keyword">return</span> runCLICommand(args);</div><div class="line">    <span class="comment">//如果找到了package.json，则加载Hexo模块</span></div><div class="line">    <span class="keyword">return</span> loadHexoModule(path, args);</div><div class="line">  &#125;).catch(handleError);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>lib/find_pkg.js</strong><br>主要是查找当前目录下的package.json文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPkg</span>(<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="comment">//查找当前目录下面的package.json,例如：E:\demo\hexo\source_analy\pakcage.json</span></div><div class="line">  <span class="keyword">var</span> pkgPath = pathFn.join(path, <span class="string">'package.json'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> fs.exists(pkgPath).then(<span class="function"><span class="keyword">function</span>(<span class="params">exist</span>) </span>&#123;</div><div class="line">    <span class="comment">//如果找到了package.json则检查是否是hexo包声明</span></div><div class="line">    <span class="keyword">return</span> exist ? checkPkg(pkgPath) : <span class="literal">false</span>;</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">exist</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exist) <span class="keyword">return</span> path;</div><div class="line">	<span class="comment">//如果没有找到，则往上一目录进行查找</span></div><div class="line">    <span class="keyword">var</span> parent = pathFn.dirname(path);</div><div class="line">    <span class="keyword">if</span> (parent === path) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> findPkg(parent);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假设我们的hexo环境已经初始化好(hexo init)，通过find_pkg模块已经查找到了package.json，接着会加载Hexo模块<br><!-- 新建一个目录E:/demo/hexo/source_analy,切换当前路径到该目录下面，然后执行:`hexo init & npm install hexo --save`。 --><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHexoModule</span>(<span class="params">path, args</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> modulePath = pathFn.join(path, <span class="string">'node_modules'</span>, <span class="string">'hexo'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//请求当前目录下面的/node_modules/hexo模块,这里我的全路径是：E:\demo\hexo\source_analy\node_modules\hexo</span></div><div class="line">    <span class="keyword">var</span> Hexo = <span class="built_in">require</span>(modulePath);</div><div class="line">	<span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(path, args);</div><div class="line">    log = hexo.log;</div><div class="line">	<span class="comment">//处理hexo命令</span></div><div class="line">    <span class="keyword">return</span> runHexoCommand(hexo, args);</div><div class="line">  &#125; <span class="keyword">catch</span> (_) &#123;</div><div class="line">    log.error(<span class="string">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class="line">    log.error(<span class="string">'Try running: \'npm install hexo --save\''</span>);</div><div class="line">    process.exit(<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中require(modulePath)中modulePath是一个目录地址，不是js文件，下面没有index.js文件，这里是如何识别他是一个nodejs模块的呢。这就要看该目录下面的package.json文件了,在大概116行，其实是通过这里的main指定了node模块的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"main": "lib/hexo"</div></pre></td></tr></table></figure></p>
<p>到这里基本就很清楚Hexo模块是如何加载进来的，下一节着重分析下Hexo模块代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bat语法总结]]></title>
      <url>http://www.linmuxi.com/2016/02/16/bat-syntax/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下Window下Bat相关语法的介绍和使用<br><a id="more"></a></p>
<p><strong>echo和@</strong><br>@     关闭当前行回显<br>echo off     从下一行开始关闭回显<br>@echo off     从本行开始关闭回显，一般批处理第一行都是这个<br>echo on     从下一行开始打开回显<br>echo     显示当前echo是关闭还是打开状态<br>echo hello     屏幕打印hello字符串</p>
<p><strong>errorlevel</strong><br><code>echo %errorlevel%</code><br>每个命令运行结束，可以用这个命令行查看返回码，默认值为0，命令执行出错会设errorlevel为1</p>
<p><strong>dir</strong><br>显示目录下的所有文件<br><code>dir d:temp3</code> 显示temp3下的所有文件，不包括隐藏、系统、只读文件、子目录文件<br><code>dir /s/a d:temp3</code> 显示temp3下的所有文件，包括隐藏、系统、只读文件、子目录文件<br><code>dir /a d:temp3</code> 显示temp3下的所有文件和子目录包括隐藏和系统文件<br><code>dir /a:d d:temp3</code> 显示temp3下的所有目录<br><code>dir /a:-d d:temp3</code> 显示temp3下的所有文件<br><code>dir /b/p d:temp3</code> 分页显示temp3下的所有文件的文件名<br><code>dir /s d:temp3\*.txt</code> 显示temp3目录及其子目录下面的所有txt文件</p>
<p><strong>md</strong><br>创建目录<br><code>md d:mydir</code>  在d盘创建目录<br><code>md d:&quot;one/&quot;two</code> 在d盘创建目录one/two</p>
<p><strong>rd</strong><br>删除目录<br><code>rd abc</code> 删除空目录abc<br><code>rd /s/q d:&quot;temp</code> 删除d盘temp文件夹及其子文件夹和文件 </p>
<p><strong>del</strong><br>删除文件<br><code>del d:&quot;test.txt</code> 删除指定文件，不能是隐藏、系统、只读文件<br><code>del /q/a/f d:&quot;temp\*.*</code> 删除d:temp文件夹下面的所有文件、包括隐藏、只读、系统文件、不包括子目录<br><code>del /q/a/f/s d:&quot;temp2\*.*</code>删除d:temp2文件夹及其子文件夹下面的所有文件、包括隐藏、只读、系统文件、不包括子目录</p>
<p><strong>ren</strong><br>重命名<br><code>ren d:&quot;temp&quot; temp2</code> 将d盘目录下面的temp重命名为temp2</p>
<p><strong>type</strong><br>文件内容查看<br><code>type d:temp\child\aa.txt</code> 查看文件内容</p>
<p><strong>copy</strong><br>文件复制<br><code>copy d:&quot;temp&quot;\&quot;child&quot;\&quot;aa.txt&quot; d:&quot;temp&quot;\&quot;AA.txt&quot;</code> 复制文件并重命名<br><code>copy con d:temp\&quot;hello world.txt&quot;</code> 从屏幕上等待输入，将输入数据拷贝到指定目录，按Ctrl+Z 回车结束输入<br><code>copy 1.txt+2.txt 3.txt</code> 合并1.txt和2.txt的内容拷贝到3.txt文件,如果不指定3.txt 则保存到1.txt</p>
<p>con：屏幕；prn：打印机；nul：空设备</p>
<p><strong>title</strong><br><code>title hello</code> 设置cmd窗口标题为hello</p>
<p><strong>ver</strong><br>ver 显示系统版本</p>
<p><strong>pause</strong><br>pause 暂停命令</p>
<p><strong>rem和::</strong><br>注释命令<br>rem 这里是注释，不会被执行<br>:: 也是注释,不会回显</p>
<p><strong>date和time</strong><br>日期和时间<br>date 显示日期并提示输入新的日期<br>time 显示时间并提示输入新的时间<br>date/t 只显示日期不提示输入新日期</p>
<p><strong>goto和: 跳转命令</strong><br>:label  行首为：表示该行是标签行,标签行不执行操作<br>goto label 跳转到指定的标签行</p>
<p><strong>find</strong><br>查找文件内容<br><code>find &quot;hello&quot; d:temp\AA.txt</code> 在AA.txt文件中查找含有hello字符串的行<br><code>find /i &quot;hello&quot; d:temp\AA.txt</code> 查找含有hello的行，忽略大小写<br><code>find /c &quot;hello&quot; d:temp\AA.txt</code> 显示含有hello的行的总行数</p>
<p><strong>more </strong><br>逐屏显示<br><code>more &quot;d:temp/AA.txt&quot;</code></p>
<p><strong>tree</strong><br>显示目录结构<br><code>tree d:temp</code> 以树形结构显示temp目录下的所有文件</p>
<p><strong>&amp;</strong><br>按顺序执行多条命令，不管命令是否执行成功<br><code>hexo clean &amp; hexo g &amp; hexo d</code></p>
<p><strong>&amp;&amp;</strong><br>顺序执行多条命令，当碰到执行出错的命令将不执行后面的命令<br><code>find &quot;hello&quot; d:temp\AA.txt &amp;&amp; echo 找到你了</code></p>
<p><strong>||</strong><br>顺序执行多条命令，当碰到执行正确的命令将不执行后面的命令<br><code>find &quot;hello&quot; d:temp\AA.txt || echo 没有找到</code></p>
<p><strong>|</strong><br>管道命令<br><code>dir d:temp3 /s/a | find /c &quot;.txt&quot;</code><br>先执行dir命令，对其输出的结果执行后面的find命令，该命令的结果是：输出当前文件夹及其所有子文件夹里面的.txt文件的个数</p>
<p><strong>&gt;和&gt;&gt;</strong><br>输出重定向命令<br><code>&gt;</code> 清除文件内容再写入<br><code>&gt;&gt;</code> 不清除文件内容，直接追加内容到文件末尾</p>
<p><code>type d:temp3\AA.txt &gt; prn</code><br>将AA.txt文件内容转向输出到打印机，不在屏幕上显示</p>
<p><code>echo hello world &gt; con</code><br>在屏幕上显示hello world,实际上所有的输出都是默认 &gt; con 的</p>
<p><code>echo ^^1^&gt;2 &gt; d:temp3\test.txt</code><br>生成内容为：^1&gt;2<br>^和&gt;是控制命令，要将他们输出，则必须在前面加^符号</p>
<p><strong>&lt;</strong><br>从文件中获取输入信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">echo</span> 2026-02-16 &gt; d:temp\date.txt</div><div class="line">date &lt; d:temp\date.txt</div><div class="line">del d:temp\date.txt</div></pre></td></tr></table></figure></p>
<p><strong>%0 %1 %2 %3 %*</strong><br>命令行传递给批处理的参数<br>%0 批处理文件本身<br>%1 第一个参数<br>%3 第二个参数<br>%* 第n个参数</p>
<p>用法：test.bat 第一个参数 第二个参数</p>
<p>批参数的替代已被增强，语法如下：<br>%~d1 将%1扩充到一个驱动器号<br>%~f1 将%1扩充到一个全路径名<br>%~p1 将%1扩充到一个相对路径<br>%~n1 将%1扩充到一个文件名</p>
<p><strong>if</strong><br>判断命令<br><code>if %1 == server echo 第一个参数是server</code><br>运行test.bat server</p>
<p><code>if /i %1 equ server echo 第一个参数是server</code><br>忽略大小写</p>
<p>==与equ是一样的效果,其他运算符参见：if/?</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> exist d:temp\AA.txt <span class="built_in">echo</span> 存在AA.txt文件</div><div class="line"></div><div class="line"><span class="keyword">if</span> exist D:temp\AA.txt ( </div><div class="line"><span class="built_in">echo</span> 存在AA文件</div><div class="line">) <span class="keyword">else</span> (</div><div class="line"><span class="built_in">echo</span> 不存在AA文件</div><div class="line">)</div></pre></td></tr></table></figure>
<p>注意：if、else和括号之间有空格</p>
<p><strong>for</strong><br>循环命令<br><code>for %%i in (1,2,3 a b c) do echo %%i</code><br>循环小括号里面的字符串,然后执行do后面的命令<br>字符串分隔符可以是,空格</p>
<p><code>for %%i in (D:temp3\*.txt) do find &quot;hello&quot; %%i</code><br>循环temp3目录下的所有txt文件并执行find查找包含hello的字符串行</p>
<p><code>for /r %%i in (D:temp3\*.txt) do find &quot;hello&quot; %%i</code><br>循环temp3目录及其子目录下面的所有txt文件，并搜索包含hello的字符串行</p>
<p><strong>start</strong><br>批处理中调用外部程序的命令</p>
<p><strong>call</strong><br>批处理中调用另外一个批处理的命令</p>
<p><strong>xcopy</strong><br>文件夹拷贝<br><code>xcopy d:temp d:temp2 /s/e/i/y</code><br>将temp文件夹、所有子文件夹和文件复制到指定目录，覆盖已有的文件<br>参数/i表示如果指定目标目录不存在则自动创建，否则会询问<br>注意：隐藏的文件不会复制过去</p>
<p><strong>subst</strong><br>映射磁盘<br><code>subst Q: \\10.0.88.10\公共盘</code>  #这样就将指定的公共盘符映射到本地了，可以通过Q:来访问了<br><code>subst Q: /d</code>  #取消该映射<br><code>subst</code>  #查看所有的映射</p>
<p>查看网络驱动器的ip地址<br>regedit&gt;HKEY_CURRENT_USER&gt;Network</p>
<p>查看命令帮助<br>命令 /?<br>例如：dir /?</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js的模块系统]]></title>
      <url>http://www.linmuxi.com/2016/02/15/node-js-module/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下如何自定义模块以及服务端模块的加载规则<br><a id="more"></a><br>目录：</p>
<ul>
<li>exports和require</li>
<li>自定义模块</li>
<li>服务端模块</li>
</ul>
<p><strong> 前言 </strong><br>为了让Node.js之间可以相互调用，Node.js提供了一个简单的模块系统。<br>模块是Node.js应用程序的基本组成部分，一个Node.js文件就是一个模块，文件内容可以是JavaScript代码、JSON或者是编译过的C/C++扩展。</p>
<p><strong> exports和require </strong><br>exports ：作为模块内部返回的对象<br>require ：用于从外部获取一个模块接口，即所获取模块的 exports 对象</p>
<p>require方法接受以下几种参数的传递：</p>
<ol>
<li>http、fs、path等，原生模块。</li>
<li>./mod或../mod，相对路径的文件模块。</li>
<li>/pathtomodule/mod，绝对路径的文件模块。</li>
<li>mod，非原生模块的文件模块。</li>
</ol>
<p><strong> 自定义模块 </strong><br>首先，我们创建一个文件命名为：hello.js，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">module.exports.hello = function()&#123;</div><div class="line">	console.log("hello");</div><div class="line">&#125;</div><div class="line">**/</div></pre></td></tr></table></figure></p>
<p>hello.js返回exports对象，即：{hello:Function}</p>
<p>接下来我们创建另外一个文件：main.js,内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"./hello"</span>)();</div></pre></td></tr></table></figure></p>
<p>在main.js文件中，代码require(“./hello”)引入了当前目录下的hello.js文件(默认.js后缀),即引入了我们定义的hello模块。</p>
<p>注意：require(“./hello”) 是引入当前目录下面的hello.js,也可以是引入当前目录下的hello目录(hello目录中有index.js文件)，这两种方法效果一样，hexo的启动方式就是采用第二种方式进行的。<br>目录结构如下：</p>
<ul>
<li>demo<ul>
<li>main.js</li>
<li>lib<ul>
<li>index.js</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>index.js文件内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main.js文件内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./lib'</span>)();</div></pre></td></tr></table></figure></p>
<p>即：require(‘./lib/index.js’) == require(‘./lib’);</p>
<p><strong> 服务端模块 </strong><br>Node.js提供了很多内置的服务端模块供我们使用，大大的提高了我们的开发效率。<br>例如：使用提供的http模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">...</div><div class="line">http.createServer(...);</div></pre></td></tr></table></figure></p>
<p>关于服务端内置模块的查找规则如下：</p>
<p>在Node.js中模块分为2类：原生模块和文件模块</p>
<p>其中文件模块分为3类模块，通过后缀来区分，Node.js会根据后缀来决定加载方法。</p>
<ol>
<li>.js 通过fs模块同步读取js文件并编译执行。</li>
<li>.node 通过C/C++进行编写的Addon,通过dlopen方法进行加载。</li>
<li>.json 调用JSON.parse解析加载。</li>
</ol>
<p>在Node.js中模块分为4类(原生模块和3种文件模块)，通过require很容易就加载到需要的模块了，但是其内部的加载流程却是不简单的，整个加载流程如下图所示：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_modules_01.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git中fetch和merge的使用]]></title>
      <url>http://www.linmuxi.com/2016/02/14/git-fetch-merge/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下Git中fetch和merge命令的使用，使用过svn的同学应该都知道，如果远程版本库有更新，我们要同步本地代码与版本库保持一致可以使用update操作。git上是通过fetch和merge命令来从远程库中获取最新的版本并合并到本地版本中去的。<br><a id="more"></a><br>目录</p>
<ul>
<li>fetch命令</li>
<li>merge命令</li>
</ul>
<p><strong> fetch命令 </strong><br>命令：<code>git fetch origin master</code> 从远程origin的master分支下载最新的版本到本地master分支<br>命令：<code>git log -p master..origin/master</code> 比较本地的master分支和远程origin/master分支的日志差异<br>命令：<code>git log -1 master..origin/master</code> 只显示一行日志差异<br><!-- git log -p myBranch001..origin/myBranch001 --></p>
<p><strong> merge命令 </strong><br>命令：<code>git merge origin/master</code> 合并master分支版本</p>
<p><strong> 查看origin指向 </strong><br>命令：<code>git remote -v</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_11.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git分支的基础使用]]></title>
      <url>http://www.linmuxi.com/2016/02/14/git-branch-basic-intro/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下Git分支的基本操作，关于具体的概念大家可以去百度搜索了解，本篇不做介绍<br><a id="more"></a><br>目录</p>
<ul>
<li>查看分支</li>
<li>创建分支</li>
<li>切换分支</li>
<li>修改分支名称</li>
<li>分支合并</li>
<li>删除分支</li>
</ul>
<p><strong> 前提 </strong><br>在上一篇<a href="2016/01/29/git-basic-cmd-intro">Git最最最基础命令入门</a>中，我已经创建了一个版本库：<a href="https://github.com/linmuxi/test-git.git" target="_blank" rel="external">https://github.com/linmuxi/test-git.git</a><br>下面的演示就基于这个版本库来操作。</p>
<p>第一步先将版本库clone到本地，具体操作步骤可以参考<a href="2016/01/29/git-basic-cmd-intro">上一篇文章</a> ，这里就不做具体介绍</p>
<p><strong> 查看分支 </strong><br>查看远程分支：<code>git branch -r</code><br>查看本地分支：<code>git branch -l</code> 或 <code>git branch</code><br>查看所有分支：<code>git branch -a</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_01.png" alt=""><br>可以看到目前只有一个master主分支，这个master分支也是git默认的分支</p>
<p><strong> 创建分支 </strong><br>输入命令：<code>git branch myBranch01</code><br>再次查看分支，输入命令：<code>git branch -l</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_02.png" alt=""><br>可以看到myBranch01分支已经创建成功<br>注意：该分支只是在本地创建了，在远程库中并不存在，大家可以登录到Github上去确认下，也可以通过命令：<code>git branch -r</code>来确认</p>
<p>接下来就是将刚才创建的myBranch01分支同步到远程库中去<br>输入命令：<code>git push origin myBranch01</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_03.png" alt=""><br>在输入账户和密码之后，创建的分支就已经同步到远程库中去了，可以登录Github进行确认，也可以通过命令：<code>git branch -r</code>来确认</p>
<p><strong> 切换分支 </strong><br>输入命令：<code>git checkout myBranch01</code><br>接着查看所有分支：<code>git branch -l</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_04.png" alt=""><br>可以看到当前分支已经切换到myBranch01上面去了</p>
<p><strong> 修改分支名称 </strong><br>输入命令：<code>git branch -m myBranch01 myBranch001</code><br>接着查看分支名称修改情况：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_06.png" alt=""><br>本地的已经修改过来，远程的还未同步修改<br>执行同步修改命令：<code>git push origin myBranch001</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_07.png" alt=""><br>最后删除修改前的myBranch01分支：<code>git push origin :myBranch01</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_08.png" alt=""><br>到这里分支名称就修改完成，觉得这样的操作很麻烦。</p>
<p><strong> 分支合并 </strong><br>合并操作前先查看master和myBranch001分支下面文件的内容<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_09.png" alt=""></p>
<p>接下来切换当前分支到想要合并到的分支下（本例中要将myBranch001分支合并到master分支中，则切换当前分支到master下面），然后执行分支合并命令：<code>git merge myBranch001</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_10.png" alt=""></p>
<p><strong> 删除分支 </strong><br>输入命令：<code>git branch -d myBranch01</code><br>注意：假如当前分支是myBranch01，则这里是不允许删除的，需要切换到别的分支才能将其删除<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/git_branch_05.png" alt=""></p>
<p>到这里，本地的分支已经被删除了，但是远程库中的还没有被删除。<br>输入命令：<code>git push origin :myBranch01</code><br>这样远程库中的myBranch01分支就被同步删除了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决DBLink带有后缀的问题]]></title>
      <url>http://www.linmuxi.com/2016/02/01/oracle-deal-02-dblink/</url>
      <content type="html"><![CDATA[<p>这篇主要分享在默认配置下创建DBLink带有后缀的问题。<br><a id="more"></a><br>新建DBLink默认情况下DBLink名称是带有后缀的，此后缀来自global_name;<br>一般生成的DBLink名称是这样的：myDBLink.REGRESS.RDBMS.DEV.US.ORACLE.COM</p>
<p>查看全局名称:<code>select * from GLOBAL_NAME;//ORCL.REGRESS.RDBMS.DEV.US.ORACLE.COM</code></p>
<p>可以通过如下修改，屏蔽生成后缀</p>
<p>使用sys账户执行以下语句：<code>update global_name set global_name = &#39;hunter&#39;;</code>//不为空</p>
<p>再次创建DBLink，发现名称不再带有后缀了</p>
<!-- 
//alter database rename global_name to ciscosys; 只是修改了global_name名称，后缀还在

如果使用DBLink进行操作的时候，提示DBLink无效，检查

show parameter global_name;是否为false -->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用PLSQL Developer连接64位Oracle11g数据库]]></title>
      <url>http://www.linmuxi.com/2016/02/01/plsql-developer-connect-oracle11g-64bit/</url>
      <content type="html"><![CDATA[<p>这篇主要分享如何使用PLSQL Developer连接64位Oracle数据库。<br><a id="more"></a><br>第一步：安装Oracle 11g 64位</p>
<p>第二步：安装32位的Oracle客户端（ <a href="http://www.oracle.com/technetwork/cn/topics/winsoft-095945-zhs.html" target="_blank" rel="external">instantclient-basic-win32-11.2.0.1.0</a>）</p>
<font color="red">注意：Oracle客户端一定得是32位的，不要下错了版本，Oracle官网有下载</font>

<p>第三步：将其解压至Oracle安装目录的Product下：<code>D:\Oracle\app\hunter\product\instantclient_11_2</code></p>
<p>第四步：拷贝数据库安装根目录下的NETWORK目录到Oracle客户端目录的instantclient_11_2目录下面。<br>NETWORK目录的绝对路径：D:\Oracle\app\hunter\product\11.2.0\dbhome_1\NETWORK<br>instantclient_11_2目录的绝对路径：D:\Oracle\app\hunter\product\instantclient_11_2</p>
<p>第五步：安装PL/SQL Developer<br>安装 PL/SQL Developer，在perference-&gt;Connection里面设置OCI Library和Oracle_Home，例如本机设置为：<br>Oracle Home ：D:\Oracle\app\hunter\product\instantclient_11_2<br>OCI Library ：D:\Oracle\app\hunter\product\instantclient_11_2\oci.dll</p>
<p>第六步：设置环境变量(修改PATH和TNS_ADMIN环境变量)<br>对于NLS_LANG环境变量, 最好设置成和数据库端一致, 首先从数据库端查询字符集信息:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQL&gt; select userenv('language') nls_lang from dual;</div><div class="line">NLS_LANG</div><div class="line">----------------------------------------------------</div><div class="line">SIMPLIFIED CHINESE_CHINA.ZHS16GBK</div></pre></td></tr></table></figure></p>
<p>右击”我的电脑” - “属性” - “高级” - “环境变量” - “系统环境变量”:<br>1&gt;.选择”Path” - 点击”编辑”, 把 “D:\Oracle\app\hunter\product\instantclient_11_2;” 加入;<br>2&gt;.点击”新建”, 变量名设置为”TNS_ADMIN”, 变量值设置为”D:\Oracle\app\hunter\product\instantclient_11_2;”, 点击”确定”;<br>3&gt;.点击”新建”, 变量名设置为”NLS_LANG”, 变量值设置为”SIMPLIFIED CHINESE_CHINA.ZHS16GBK”, 点击”确定”;</p>
<p>最后，启动 PL/SQL Developer ，运行无问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Oracle小数点转字符丢失0的处理方法]]></title>
      <url>http://www.linmuxi.com/2016/02/01/oracle-deal-01/</url>
      <content type="html"><![CDATA[<p>Oracle中将含有小数点的数值进行字符串转换，会出现0丢失的情况，大家是怎么处理这种情况的？我是这样做的：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> to_char(<span class="number">0.123</span>,<span class="string">'fm99999999999999990.00'</span>) <span class="keyword">FROM</span> dual;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[推荐]报表设计工具iReport]]></title>
      <url>http://www.linmuxi.com/2016/02/01/recommend-tool-ireport/</url>
      <content type="html"><![CDATA[<p>这篇主要分享一款报表设计工具iReport，因为在项目中实际应用过，觉得好用，推荐给大家。本篇不做详细介绍，感兴趣和有需求的可以自行查阅相关资料进行了解，也可以留言进行交流<br><a id="more"></a><br>其提供的可视化报表设计工具挺好用的，而且提供API供编程使用，可支持导出多种格式，例如PDF、HTML、EXCEL等。</p>
<p><strong> 下面是可视化报表设计工具的工作台截图：</strong> </p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/ireport_01.png" alt="可视化报表设计工具"></p>
<p><strong> 下面是在项目中设计的报表模版：</strong> </p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/ireport_02.png" alt="报表设计模版"><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ireport_03.png" alt="报表设计模版"></p>
<p><strong> 利用提供的API导出报表到PDF </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 可视化工具设计的模版文件</span></div><div class="line">String filePath = <span class="string">"E:\\demo\\iReport\\myReport.jasper"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 通过模版文件实例化报表对象</span></div><div class="line">JasperReport report = (JasperReport) JRLoader.loadObjectFromFile(filePath);</div><div class="line">report.setWhenNoDataType(WhenNoDataTypeEnum.ALL_SECTIONS_NO_DETAIL);</div><div class="line"></div><div class="line"><span class="comment">// 下面是封装的数据实体对象</span></div><div class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line"><span class="comment">// list集合对象</span></div><div class="line">params.put(<span class="string">"repaymentDetailDS"</span>, <span class="keyword">new</span> JRBeanCollectionDataSource(getRepaymentDetailList()));</div><div class="line"><span class="comment">// 实体VO对象,可以直接在报表模版中通过vo对象来调用</span></div><div class="line">params.put(<span class="string">"vo"</span>, getParams());</div><div class="line"></div><div class="line"><span class="comment">// 利用提供的数据填充报表对象</span></div><div class="line">JasperPrint print4 = JasperFillManager.fillReport(report, params,<span class="keyword">new</span> JREmptyDataSource());</div><div class="line"></div><div class="line">List&lt;JasperPrint&gt; printList = <span class="keyword">new</span> ArrayList&lt;JasperPrint&gt;();</div><div class="line">printList.add(print4);</div><div class="line"></div><div class="line"><span class="comment">// 设置导出格式为PDF</span></div><div class="line">JRPdfExporter pdfExporter = <span class="keyword">new</span> JRPdfExporter();</div><div class="line"><span class="comment">// 导入源</span></div><div class="line">pdfExporter.setExporterInput(SimpleExporterInput.getInstance(printList));</div><div class="line"><span class="comment">// 导出源</span></div><div class="line">pdfExporter.setExporterOutput(<span class="keyword">new</span> SimpleOutputStreamExporterOutput(<span class="string">"E:/myReport.pdf"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 可以进行PDF参数配置</span></div><div class="line">SimplePdfExporterConfiguration spec = <span class="keyword">new</span> SimplePdfExporterConfiguration();</div><div class="line"><span class="comment">/*spec.setEncrypted(true);</span></div><div class="line">spec.setUserPassword("123456");*/</div><div class="line"></div><div class="line">pdfExporter.setConfiguration(spec);</div><div class="line"><span class="comment">// 导出PDF对象</span></div><div class="line">pdfExporter.exportReport();</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Flex4接受Red5服务器上的实时流数据]]></title>
      <url>http://www.linmuxi.com/2016/02/01/flex4-receive-stream-from-read5/</url>
      <content type="html"><![CDATA[<p>这篇主要分享如何使用Flex4从Red5服务器上接受实时流数据。<br><a id="more"></a><br>关于Flex环境搭建和Red5服务器的部署和操作，不在本篇介绍范围内。</p>
<p>具体操作代码比较简单，关键点都有中文注释，Flex代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:Application</span> <span class="attr">xmlns:fx</span>=<span class="string">"http://ns.adobe.com/mxml/2009"</span> </span></div><div class="line">               <span class="attr">xmlns:s</span>=<span class="string">"library://ns.adobe.com/flex/spark"</span> </div><div class="line">               <span class="attr">xmlns:mx</span>=<span class="string">"library://ns.adobe.com/flex/mx"</span> <span class="attr">minWidth</span>=<span class="string">"955"</span> <span class="attr">minHeight</span>=<span class="string">"600"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">fx:Declarations</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 将非可视元素（例如服务、值对象）放在此处 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">fx:Declarations</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fx:Script</span>&gt;</span></div><div class="line">        &lt;![CDATA[</div><div class="line">            </div><div class="line">            var rtmpURL:String = "rtmp://192.168.1.103/mystream";</div><div class="line">            var conn:NetConnection = new NetConnection();</div><div class="line">            var netstream:NetStream;</div><div class="line">            var video:Video;</div><div class="line">            </div><div class="line">            function connServer(e:MouseEvent):void&#123;</div><div class="line">                conn.connect(rtmpURL);</div><div class="line">                conn.addEventListener(NetStatusEvent.NET_STATUS,netStatusHandler);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            function netStatusHandler(e:NetStatusEvent):void&#123;</div><div class="line">                switch(e.info.code)&#123;</div><div class="line">                    case "NetConnection.Connect.Success":&#123;</div><div class="line">                        connStream();</div><div class="line">                    &#125;</div><div class="line">                    case "NetStream.Play.StreamNotFound":&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            function connStream():void&#123;</div><div class="line">                netstream = new NetStream(conn);</div><div class="line">                netstream.play("hunter");//如果是实时流这里文件后缀不要</div><div class="line">                video = new Video(300,200);</div><div class="line">                video.attachNetStream(netstream);</div><div class="line">                vd.addChild(video);</div><div class="line">            &#125;</div><div class="line">        ]]&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">fx:Script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:Button</span> <span class="attr">label</span>=<span class="string">"查看视频"</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"30"</span> <span class="attr">click</span>=<span class="string">"this.connServer(event)"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line">    &lt;s:VideoPlayer x="21" y="59" id="vp"&gt;&lt;/s:VideoPlayer&gt;</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">s:VideoDisplay</span> <span class="attr">x</span>=<span class="string">"21"</span> <span class="attr">y</span>=<span class="string">"59"</span> <span class="attr">id</span>=<span class="string">"vd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">s:VideoDisplay</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:Application</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Flex4进行视频流采集并发布到Red5服务器上]]></title>
      <url>http://www.linmuxi.com/2016/02/01/flex4-gather-stream-publish-read5/</url>
      <content type="html"><![CDATA[<p>这篇主要分享如何通过Flex4进行本地视频流采集并实时发布到Red5服务器上去。<br><a id="more"></a><br>关于Flex环境搭建和Red5服务器的部署和操作，不在本篇介绍范围内。</p>
<p>具体操作代码比较简单，关键点都有中文注释，Flex代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">s:Application</span> <span class="attr">xmlns:fx</span>=<span class="string">"http://ns.adobe.com/mxml/2009"</span> </span></div><div class="line">               <span class="attr">xmlns:s</span>=<span class="string">"library://ns.adobe.com/flex/spark"</span> </div><div class="line">               <span class="attr">xmlns:mx</span>=<span class="string">"library://ns.adobe.com/flex/mx"</span> <span class="attr">minWidth</span>=<span class="string">"955"</span> <span class="attr">minHeight</span>=<span class="string">"600"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">fx:Declarations</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 将非可视元素（例如服务、值对象）放在此处 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">fx:Declarations</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fx:Script</span>&gt;</span></div><div class="line">        &lt;![CDATA[</div><div class="line">            var con:NetConnection = new NetConnection();</div><div class="line">            //Red5服务器流地址</div><div class="line">            var rtmpURL:String = "rtmp://192.168.1.103/mystream";</div><div class="line">            var netStream:NetStream;</div><div class="line">            var video:Video = new Video();</div><div class="line">            </div><div class="line">            //以实时流形式发布视频流到red5上去</div><div class="line">            private function netStatus(e:NetStatusEvent):void&#123;</div><div class="line">                if(e.info.code == 'NetConnection.Connect.Success')&#123;</div><div class="line">                    //通过netconnection构建netstream</div><div class="line">                    netStream = new NetStream(con);</div><div class="line">                    //附加视频和音频数据到netstream中</div><div class="line">                    netStream.attachCamera(Camera.getCamera());</div><div class="line">                    netStream.attachAudio(Microphone.getMicrophone());</div><div class="line">                    //以记录方式发布名称为hunter的实时流到Red5流媒体服务器上</div><div class="line">                    netStream.publish("hunter","live");</div><div class="line">                    //发布之后red5下mystream/streams/下面就会生成hunter.flv文件</div><div class="line">                &#125;</div><div class="line">            &#125; </div><div class="line">            //打开本地摄像头</div><div class="line">            private function openVideo(e:MouseEvent):void&#123;</div><div class="line">                //获取本地摄像头数据并附加在video对象上</div><div class="line">                video.attachCamera(Camera.getCamera());</div><div class="line">                video.width = 300;</div><div class="line">                video.height = 200;</div><div class="line">                //video附加在videoDisplay上显示</div><div class="line">                vd.addChild(video);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            private function publishRed5Server(e:MouseEvent):void&#123;</div><div class="line">            	//连接到Red5服务器上</div><div class="line">                con.connect(rtmpURL);</div><div class="line">                //监听连接状态</div><div class="line">                con.addEventListener(NetStatusEvent.NET_STATUS,netStatus);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            //进行录像</div><div class="line">            private function recordVideo(e:MouseEvent):void&#123;</div><div class="line">                //先停止以前实时流模式，重启发布记录流模式</div><div class="line">                netStream.close();</div><div class="line">                netStream.publish("hunter","record");</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            private function stopPublish(e:MouseEvent):void&#123;</div><div class="line">                netStream.close();</div><div class="line">            &#125;</div><div class="line">        ]]&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">fx:Script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:Button</span> <span class="attr">x</span>=<span class="string">"11"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">label</span>=<span class="string">"打开视频"</span> <span class="attr">click</span>=<span class="string">"this.openVideo(event)"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:Button</span> <span class="attr">x</span>=<span class="string">"89"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">label</span>=<span class="string">"发布视频"</span> <span class="attr">click</span>=<span class="string">"this.publishRed5Server(event)"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:Button</span> <span class="attr">x</span>=<span class="string">"167"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">label</span>=<span class="string">"录制视频"</span> <span class="attr">click</span>=<span class="string">"this.recordVideo(event)"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:Button</span> <span class="attr">x</span>=<span class="string">"254"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">label</span>=<span class="string">"停止发布"</span> <span class="attr">click</span>=<span class="string">"this.stopPublish(event)"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:VideoDisplay</span> <span class="attr">id</span>=<span class="string">"vd"</span> <span class="attr">x</span>=<span class="string">"11"</span> <span class="attr">y</span>=<span class="string">"52"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--    </span></div><div class="line">    &lt;mx:UIComponent id="videoCan" x="10" y="258" width="300" height="200"&gt;</div><div class="line">    &lt;/mx:UIComponent&gt;</div><div class="line">    --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">s:Application</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[智能配电房Android应用]]></title>
      <url>http://www.linmuxi.com/2016/02/01/android-demo-01-pdf/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;之前部门为了做移动转型，组织了一个移动开发大赛，找几位同事一起参加做了这款应用，算是第一次做Android应用，因为要求是业余时间来完成，周期上又比较赶，恰巧又赶上项目组外出封闭开发，所以整个项目做下来比较粗糙，有很多功能都还未能实现。加上基本上都是晚上下班回家熬夜边自学边开发的一个状态，身体在那段时间也累的够呛。不过那段时间也算是过的比较充裕，感觉每分每秒都是在学习当中。<br><a id="more"></a><br>上两张图留个记录<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pdf-01.png" alt=""><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pdf-02.png" alt=""><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pdf-03.png" alt=""><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pdf-04.png" alt=""><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pdf-05.png" alt=""><br>示例代码已经放到<a href="https://github.com/linmuxi/pdf" target="_blank" rel="external">GitHub</a>上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat配置SSL,支持HTTPS访问]]></title>
      <url>http://www.linmuxi.com/2016/02/01/tomcat-config-ssl/</url>
      <content type="html"><![CDATA[<p>这篇主要分享在Tomcat上配置SSL，开启HTTPS访问。<br><a id="more"></a><br>第一步：通过keytools生成秘钥<br>输入命令：keytool -genkey -alias hunter -keyalg RSA<br>会在用户目录下面创建一个.keystore的文件</p>
<p>第二步：修改tomcat\config\server.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span></div><div class="line"><span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></div><div class="line"><span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span> <span class="attr">keystorePass</span>=<span class="string">"这里是第一步配置的是keystore密码"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>到这里，就可以通过<a href="https://localhost:8443/" target="_blank" rel="external">https://localhost:8443/</a> 进行访问了，当然也还是可以通过<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 进行访问,不过通过后者访问就不是基于https协议了。</p>
<p>通过下面的配置，能让http访问自动转换到https协议上去进行访问:<br>修改应用服务web.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>securedapp<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">user-data-constraint</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="name">transport-guarantee</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">user-data-constraint</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>将 URL 映射设为 /* ，这样整个应用都要求是 HTTPS 访问，而 transport-guarantee 标签设置为 CONFIDENTIAL 以便使应用支持 SSL。<br>如果你希望关闭 SSL ，只需要将 CONFIDENTIAL 改为 NONE 即可。</p>
<p>最后，让http访问自动转换到https协议，据说还有一种配置服务器响应strict-transport-security报文，还未测试，可以<a href="http://www.2cto.com/Article/201505/398588.html" target="_blank" rel="external">参考</a>说明</p>
<!-- 
http自动跳转https访问的第二种方式：
服务器响应strict-transport-security报文 （未测试）
http://www.2cto.com/Article/201505/398588.html

思考：

第一种，可能是请求到了服务器之后，由服务器进行转换

第二种，可能是由浏览器来判断进行转换

如果成立，第二种性能要优于第一种？ -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Fusionchart导出图表并写入Excel中]]></title>
      <url>http://www.linmuxi.com/2016/02/01/fusionchart-export-chart-to-excel/</url>
      <content type="html"><![CDATA[<p>本篇主要分享下如何将Fusionchart图表导出到Excel中，导出到Excel中的仅仅为一张图形图片，并不具备Excel图表编辑功能<br><a id="more"></a><br>第一步：将fcexporter.jar、fcexporthandler.jar导入lib下</p>
<p>第二步：在classs下新建导出配置文件fusioncharts_export.properties<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#<span class="symbol">Please</span> specify the path to a folder with write permissions relative to web application root</div><div class="line"><span class="symbol">SAVEPATH</span>=./images/</div><div class="line">#<span class="symbol">This</span> constant <span class="symbol">HTTP_URI</span> stores the <span class="symbol">HTTP</span> reference to </div><div class="line">#the folder where exported charts will be saved. </div><div class="line">#<span class="symbol">Please</span> enter the <span class="symbol">HTTP</span> representation of that folder </div><div class="line">#in this constant e.g., http://www.yourdomain.com/images/</div><div class="line"><span class="symbol">HTTP_URI</span>=http://www.yourdomain.com/images/</div><div class="line">#<span class="symbol">OVERWRITEFILE</span> sets whether the export handler will overwrite an existing file </div><div class="line">#the newly created exported file. <span class="symbol">If</span> it is set to false the export handler will</div><div class="line">#not overwrite. <span class="symbol">In</span> this case if <span class="symbol">INTELLIGENTFILENAMING</span> is set to true the handler</div><div class="line">#will add a suffix to the new file name. <span class="symbol">The</span> suffix is a randomly generated <span class="symbol">UUID</span>.</div><div class="line">#<span class="symbol">Additionally</span>, you can add a timestamp or random number as additional prefix.</div><div class="line"><span class="symbol">OVERWRITEFILE</span>=false</div><div class="line"><span class="symbol">INTELLIGENTFILENAMING</span>=true</div><div class="line"><span class="symbol">FILESUFFIXFORMAT</span>=<span class="symbol">TIMESTAMP</span></div></pre></td></tr></table></figure></p>
<p>第三步：修改web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>FCExporter<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FCExporter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.fusioncharts.exporter.servlet.FCExporter<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FCExporter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/JSP/ExportExample/FCExporter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  <span class="comment">&lt;!-- 这里配置根据自己应用需求来(请求jsp所在的文件目录) --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第四步：编辑报表属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">chart</span> <span class="attr">exportEnabled</span>=<span class="string">"1"</span> <span class="attr">exportAction</span>=<span class="string">"save"</span> <span class="attr">exportAtClient</span>=<span class="string">"0"</span> <span class="attr">exportFileName</span>=<span class="string">"fileName"</span> <span class="attr">exporthandler</span>=<span class="string">"FCExporter"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第五步：调用JS函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chartObject = getChartFromId(<span class="string">'myChart'</span>);</div><div class="line"><span class="keyword">if</span>( chartObject.hasRendered()) chartObject.exportChart();</div></pre></td></tr></table></figure></p>
<p>第六步：将图片写入Excel中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ByteArrayOutputStream allOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">Workbook book = WorkbookFactory.create(fileTransfer.getInputStream());</div><div class="line">File file = <span class="keyword">new</span> File(FusionChartsExportHelper.SAVEPATH+imageName+<span class="string">".jpg"</span>);</div><div class="line">BufferedImage bufferImg = ImageIO.read(file);</div><div class="line">ImageIO.write(bufferImg, <span class="string">"jpg"</span>, outputStream);</div><div class="line">HSSFSheet sheet1 = (HSSFSheet) book.getSheetAt(<span class="number">0</span>);</div><div class="line">HSSFPatriarch patriarch = sheet1.createDrawingPatriarch();</div><div class="line">HSSFClientAnchor anchor = <span class="keyword">new</span> HSSFClientAnchor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">255</span>,(<span class="keyword">short</span>) <span class="number">0</span>, <span class="number">9</span>, (<span class="keyword">short</span>) <span class="number">9</span>, <span class="number">23</span>);</div><div class="line">patriarch.createPicture(anchor, book.addPicture(outputStream.toByteArray(),HSSFWorkbook.PICTURE_TYPE_JPEG));</div><div class="line">book.write(allOutputStream);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> FileTransfer(<span class="keyword">new</span> String(<span class="string">"Excel标题.xls"</span>.getBytes(<span class="string">"GBK"</span>), <span class="string">"iso8859-1"</span>), <span class="string">"application/xls"</span>, allOutputStream.toByteArray());</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图形报表使用建议及思维指南]]></title>
      <url>http://www.linmuxi.com/2016/02/01/chart-advise-thought-intro/</url>
      <content type="html"><![CDATA[<p>业界关于图表的软件琳琅满目，例如我常用的echarts、fusionchart，基本上能够满足工作需求，而且自定义功能也很健全。<br><a id="more"></a><br>每一款图形报表软件基本都覆盖了折线图、条状图、饼状图、雷达图等等。</p>
<p>这么多种图表,我们该如何选择合适业务场景的图形呢。我也遇到过，设计师给的UI效果图，上面的图形效果真的很美观，但是实际开发出来的效果却和UI效果图相差甚远。其中有很大一部分原因是，真实的生产数据套用在UI给的图表时才发现选择的图形并不适用于当前业务场景，当然也就达不到想要的效果，以至于后来客户不得不经常抱怨说，怎么开发出来的东西和效果图差这么远，怎么拿的出手。后来又找设计师重新针对实际数据进行图形的选择。</p>
<p>关于图形的选择，转载了这么一张图，有需要的大家可以参考下。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/图表建议-思维指南.png" alt="图表建议-思维指南"></p>
<p>最后，图形只是外表，数据才是灵魂，图形只是数据的一种辅助手段。找到了合适的图形，才能达到真正数据可视化的效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下部署Nginx服务]]></title>
      <url>http://www.linmuxi.com/2016/02/01/Linux-deploy-nginx/</url>
      <content type="html"><![CDATA[<p>这篇主要分享下如何在Linux下部署Nginx服务。<br><a id="more"></a><br>Linux环境使用的Ubuntu15.10,使用的Root账户进行安装的。</p>
<p>安装说明：Nginx需要依赖pcre和zlib模块，请大家自行安装，没有安装也没有关系，下面会介绍到如何进行安装的。</p>
<p>1.下载Nginx<br>到<a href="http://nginx.org" target="_blank" rel="external">Nginx官网</a>下载Nginx软件，我下载的版本是1.9.10<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ng_version.png" alt="Ng版本"></p>
<p>2.切换到root账户，输入命令：<code>sudo su</code>，接着根据提示输入当前账户密码回车</p>
<p>3.解压Nginx<br>输入命令：<code>tar -zxvf nginx-1.9.10.tar.gz</code></p>
<p>3。进入nginx解压目录<br>输入命令：<code>cd nginx-1.9.10</code></p>
<p>4.进行Nginx配置<br>输入命令：<code>./configure</code><br><br></p>
<font color="red">注意：Ng是需要依赖PCRE模块和zlib模块的，如果没有安装，这里会配置失败。</font>

<p>出现下面的信息，则表示缺少pcre模块:<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ng_configure_error_1.png" alt="缺少pcre导致配置失败"></p>
<p>我们现在需要<a href="http://sourceforge.net/projects/pcre/files/pcre/" target="_blank" rel="external">下载</a>PCRE库,这里我下载的版本是8.38<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/pcre_version.png" alt="PCRE"></p>
<p>解压PCRE库,输入命令:<code>tar -jxvf pcre-8.38.tar.bz2</code><br>进入到pcre解压目录,输入命令：<code>cd pcre-8.38</code><br>进行PCRE配置，输入命令：<code>./configure</code><br>进行PCRE编译，输入命令：<code>make</code><br>进行PCRE安装，输入命令：<code>make install</code><br>到这里PCRE就安装完成了。</p>
<p>出现下面的信息，则表示缺少zlib模块:<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ng_configure_error_2.png" alt="缺少zlib导致配置失败"></p>
<p>我们现在需要<a href="http://sourceforge.net/projects/libpng/files/zlib/1.2.8/zlib-1.2.8.tar.gz" target="_blank" rel="external">下载</a>zlib库,这里我下载的版本是1.2.8<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/zlib_version.png" alt="PCRE"></p>
<p>解压zlib库,输入命令:<code>tar -zxvf zlib-1.2.8.tar.gz</code><br>进入到zlib解压目录,输入命令：<code>cd zlib-1.2.8</code><br>进行zlib配置，输入命令：<code>./configure</code><br>进行zlib编译，输入命令：<code>make</code><br>进行zlib安装，输入命令：<code>make install</code><br>到这里zlib就安装完成了。</p>
<p>接着，我们重新切换到nginx解压目录，执行<code>./configure</code>,</p>
<p>出现下面截图就表示配置成功<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ng_configure_success.png" alt="配置成功"></p>
<p>5.执行编译<br>输入命令：<code>make</code></p>
<p>6.执行安装<br>输入命令：<code>make install</code></p>
<p>到这里我们Ng就安装成功了<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/ng_install_success_01.png" alt="Ng安装成功-查看版本"></p>
<p>7.启动Ng<br>进入到Ng的安装目录,输入命令:<code>cd /usr/local/nginx/sbin</code><br>启动Ng，输入命令：<code>./nginx</code></p>
<p>8.重启Ng<br>输入命令：<code>./nginx -s reload</code></p>
<p>9.验证配置文件是否正确<br>输入命令：<code>./nginx -t</code></p>
<p>10.关闭ng<br>查询ng进程号,输入命令：<code>ps -ef | grep nginx</code><br>正常停止： <code>kill -quit 进程号</code><br>快速停止：<code>kill -term 进程号</code><br>强制停止：<code>kill -9 进程号</code></p>
<p><strong> 示例 </strong><br>我们利用Ng为两台应用服务器配置负载均衡,两台服务器的访问地址分别是：<br><a href="http://192.168.100.101:8080" target="_blank" rel="external">http://192.168.100.101:8080</a><br><a href="http://192.168.100.101:8081" target="_blank" rel="external">http://192.168.100.101:8081</a></p>
<p>第一步：进行nginx.conf文件配置。<br>1、在#gzip on下面新增<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> local_ng_01&#123;</div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.100.101:8080</span>;</div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.100.102:8080</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、修改Server的配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span>  <span class="number">192.168.100.88</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span>   html;</div><div class="line">        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">    	<span class="attribute">proxy_pass</span> http://local_ng_01;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们在访问192.168.100.88的时候，请求会被均衡到101和102两台服务器上去了</p>
<p>完整nginx.conf配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#user  nobody;</span></div><div class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">#error_log  logs/error.log;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  notice;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  info;</span></div><div class="line"></div><div class="line"><span class="comment">#pid        logs/nginx.pid;</span></div><div class="line"></div><div class="line"><span class="section">events</span> &#123;</div><div class="line">    <span class="attribute">worker_connections</span>  <span class="number">2048</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">include</span>       mime.types;</div><div class="line">    <span class="attribute">default_type</span>  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></div><div class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></div><div class="line"></div><div class="line">    <span class="attribute">access_log</span>  logs/access.log;</div><div class="line">    <span class="attribute">client_header_timeout</span> <span class="number">3m</span>;</div><div class="line">    <span class="attribute">client_body_timeout</span> <span class="number">3m</span>;</div><div class="line">    <span class="attribute">send_timeout</span> <span class="number">3m</span>;</div><div class="line"></div><div class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">1k</span>;</div><div class="line"></div><div class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</div><div class="line">    <span class="attribute">tcp_nopush</span>     <span class="literal">on</span>;</div><div class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="comment">#keepalive_timeout  0;</span></div><div class="line">    <span class="comment">#keepalive_timeout  65;</span></div><div class="line"></div><div class="line">    <span class="comment">#gzip  on;</span></div><div class="line"></div><div class="line">	<span class="attribute">upstream</span> local_ng_01&#123;</div><div class="line">		<span class="attribute">server</span> <span class="number">192.168.100.101:8080</span>;</div><div class="line">		<span class="attribute">server</span> <span class="number">192.168.100.102:8080</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">   		<span class="attribute">server_name</span>  <span class="number">192.168.100.88</span>;</div><div class="line"></div><div class="line">        <span class="comment">#charset koi8-r;</span></div><div class="line"></div><div class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line"></div><div class="line">		<span class="attribute">location</span> / &#123;</div><div class="line">	        <span class="attribute">root</span>   html;</div><div class="line">	        <span class="attribute">index</span>  index.html index.htm;</div><div class="line">	    	<span class="attribute">proxy_pass</span> http://local_ng_01;</div><div class="line">	    &#125;</div><div class="line"></div><div class="line">        <span class="comment">#error_page  404              /404.html;</span></div><div class="line"></div><div class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">        <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">            <span class="attribute">root</span>   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></div><div class="line">        <span class="comment"># &#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">        <span class="comment">#    root           html;</span></div><div class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></div><div class="line">        <span class="comment">#    fastcgi_index  index.php;</span></div><div class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">        <span class="comment">#    include        fastcgi_params;</span></div><div class="line">        <span class="comment"># &#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">        <span class="comment"># concurs with nginx's one</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">        <span class="comment">#    deny  all;</span></div><div class="line">        <span class="comment"># &#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       8000;</span></div><div class="line">    <span class="comment">#    listen       somename:8080;</span></div><div class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment"># &#125;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># HTTPS server</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       443 ssl;</span></div><div class="line">    <span class="comment">#    server_name  localhost;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></div><div class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></div><div class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></div><div class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment"># &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，一开始我将Nginx是部署在Windows上的，测试的时候，性能反而比直接访问应用服务器还要慢，不明白为何还要弄个windows版本的ng出来，所以还是让ng静静的运行在linux上吧</p>
<!-- 切换到root账户
sudo su

删除目录
rm -rf

删除文件
rm -f -->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用SQLLDR将CSV数据导入到Oracle数据库]]></title>
      <url>http://www.linmuxi.com/2016/02/01/use-sqlldr-csv-to-oracle/</url>
      <content type="html"><![CDATA[<p>这篇分享下使用SQLLDR工具将CSV表中的数据导入到Oracle数据库中。<br><a id="more"></a><br>SQLLDR是Oracle下提供的一款数据导入工具，使用简单方便，推荐有需要的使用.</p>
<p>命令如下：<code>sqlldr 用户名/密码@SID control=SQLLDR语法文件(例如：control.ctl)</code></p>
<p>control.ctl文件内容：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> </div><div class="line"><span class="keyword">INFILE</span> <span class="string">'D:\data\inputData.csv'</span>       <span class="comment">--要导入到数据库中的数据文件 </span></div><div class="line"><span class="keyword">INFILE</span> <span class="string">'D:\data\inputData2.csv'</span>      <span class="comment">--可以导入多个文件 </span></div><div class="line"><span class="keyword">BADFILE</span> <span class="string">'D:\data\error\bad.bad'</span>      <span class="comment">--导入失败后要写入的文件 </span></div><div class="line"><span class="keyword">DISCARDFILE</span> <span class="string">'D:\data\dsc\datadsc.dsc'</span>    </div><div class="line">DISCARDMAX <span class="number">1000</span> </div><div class="line">append                              <span class="comment">--表示向表中追加数据(其他选项请参考下面变量说明) </span></div><div class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> top_excel_import_data    <span class="comment">--插入的数据库表名 </span></div><div class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span>            <span class="comment">--以","号分隔 </span></div><div class="line">TRAILING NULLCOLS                   <span class="comment">--允许插入空值 </span></div><div class="line">(  </div><div class="line">   <span class="keyword">id</span> ,                           <span class="comment">--数据库字段名 </span></div><div class="line">   <span class="keyword">name</span> , </div><div class="line">   age</div><div class="line">  )</div></pre></td></tr></table></figure></p>
<p>变量说明：<br>append：向表中追加数据<br>insert：向表中插入值，但要求表开始时为空<br>replace：delete表中的数据，然后插入新值<br>truncate：trunctate表，然后插入新值</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML类图符号变量介绍]]></title>
      <url>http://www.linmuxi.com/2016/02/01/uml-class-symbol-intro/</url>
      <content type="html"><![CDATA[<p>这篇主要分享UML类图符号变量的介绍，画图工具使用的是PowerDeisgner15<br><a id="more"></a></p>
<p>1.类（Class）： 使用三层矩形框表示。<br>  第一层显示类的名称，如果是抽象类，则就用斜体显示。<br>  第二层是字段和属性。<br>  第三层是类的方法。注意前面的符号，+表示public，-表示private，#表示protected。</p>
<p>2.接口：使用两层矩形框表示，与类图的区别主要是顶端有interface显示。<br>  第一层是接口名称。<br>  第二层是接口方法。</p>
<p>3.继承类（extends）：用空心三角形+实线来表示。</p>
<p>4.实现接口（implements）：用空心三角形+虚线来表示</p>
<p>5.关联（Association）：用实线箭头来表示，例如：燕子与气候</p>
<p>6.聚合（Aggregation）：用空心的菱形+实线箭头来表示。<br>  表示一种拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分，例如：公司和员工</p>
<p>7.组合（Composition）：用实心的菱形+实线箭头来表示。<br>  部分和整体的关系，并且生命周期是相同的。例如：人与手。</p>
<p>8.依赖（Dependency）：用虚线箭头来表示，例如：动物与氧气。</p>
<p>9.基数：连线两端的数字表明这一端的类可以有几个实例，比如：一个鸟应该有两只翅膀。如果一个类可能有无数个实例，则就用n来表示。关联、聚合、组合</p>
<p><img src="http://7xqlat.com1.z0.glb.clouddn.com/uml_oom.jpg" alt="UML类图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data Files的使用]]></title>
      <url>http://www.linmuxi.com/2016/02/01/node-js-dataFiles/</url>
      <content type="html"><![CDATA[<p>这篇主要分享Hexo中DataFiles的使用,记录这篇的原因是，官网提供的DataFiles Doc介绍在我本地没有运行出效果来。<br><a id="more"></a><br>下面是官网的Doc：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo_datafiles.png" alt="DataFiles Doc"><br>步骤很简单<br>第一步：在source下面新建_data目录，目录下面就是定义的数据文件。可支持yml格式文件。<br>第二步：在模版文件(ejs、swig)中使用for标签进行迭代输出。<br>但是，实际运行的效果是页面不解析这种for标签写法,直接将标签源码输出<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo_datafiles_02.png" alt="不支持for这种写法"><br>查看本地hexo版本：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo_version.png" alt="Hexo版本"></p>
<p>修改后的for标签写法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">site.data.menu</span>) &#123; %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> (<span class="attr">item</span> <span class="attr">in</span> <span class="attr">site.data.menu</span>) &#123; %&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item</span> %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">site.data.menu</span>[<span class="attr">item</span>] %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>到这里，数据就能正常输出到页面了。</p>
<p>参考：<br><a href="http://ammonsonline.com/using-hexo-data-files/" target="_blank" rel="external">http://ammonsonline.com/using-hexo-data-files/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git最最最基础命令入门]]></title>
      <url>http://www.linmuxi.com/2016/01/29/git-basic-cmd-intro/</url>
      <content type="html"><![CDATA[<p>这篇只是和大家分享下Git的最简单的基础命令入门<br><a id="more"></a><br>目录</p>
<ul>
<li>创建版本库</li>
<li>从版本库下载文件到本地</li>
<li>提交文件到版本库</li>
</ul>
<p><strong> 创建版本库 </strong><br>直接登录github网站创建一个reps,这里就不具体描述了，我创建的resp就命名为test-git，地址为：<a href="https://github.com/linmuxi/test-git.git" target="_blank" rel="external">https://github.com/linmuxi/test-git.git</a></p>
<p><strong> 从版本库下载文件到本地 </strong><br>输入命令：<code>git clone http://github.com/linmuxi/test-git.git</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">clone</span> <span class="title">http</span>://<span class="title">github.com</span>/<span class="title">linmuxi</span>/<span class="title">test</span>-<span class="title">git.git</span></span></div><div class="line"><span class="title">Cloning</span> <span class="title">into</span> '<span class="title">test</span>-<span class="title">git</span>'...</div><div class="line"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 3, <span class="title">done</span>.</div><div class="line"><span class="title">remote</span>: <span class="title">Total</span> 3 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 0</div><div class="line"><span class="title">Unpacking</span> <span class="title">objects</span>: 100% (3/3), <span class="title">done</span>.</div><div class="line"><span class="title">Checking</span> <span class="title">connectivity</span>... <span class="title">done</span>.</div></pre></td></tr></table></figure></p>
<p>这样就把我们刚才创建的test-git下载到本地了,对应我本地目录就是：E\demo\git\test-git</p>
<p><strong> 提交文件到版本库 </strong><br>假如，我在test-git目录下面增加了一个hello-world.txt文件，那么如何把它提交到版本库上去呢。这里我们描述细致点。<br>路径切换到包含.git的目录也就是test-git目录下面来<br>先输入命令查看工作树状态:<code>git status</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>\<span class="title">test</span>-<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">status</span></span></div><div class="line"><span class="title">On</span> <span class="title">branch</span> <span class="title">master</span></div><div class="line"><span class="title">Your</span> <span class="title">branch</span> <span class="title">is</span> <span class="title">up</span>-<span class="title">to</span>-<span class="title">date</span> <span class="title">with</span> '<span class="title">origin</span>/<span class="title">master</span>'.</div><div class="line"><span class="title">Untracked</span> <span class="title">files</span>:</div><div class="line">  (<span class="title">use</span> "<span class="title">git</span> <span class="title">add</span> &lt;<span class="title">file</span>&gt;..." <span class="title">to</span> <span class="title">include</span> <span class="title">in</span> <span class="title">what</span> <span class="title">will</span> <span class="title">be</span> <span class="title">committed</span>)</div><div class="line"></div><div class="line">        <span class="title">hello</span>-<span class="title">world.txt</span></div><div class="line"></div><div class="line"><span class="title">nothing</span> <span class="title">added</span> <span class="title">to</span> <span class="title">commit</span> <span class="title">but</span> <span class="title">untracked</span> <span class="title">files</span> <span class="title">present</span> (<span class="title">use</span> "<span class="title">git</span> <span class="title">add</span>" <span class="title">to</span> <span class="title">track</span>)</div></pre></td></tr></table></figure></p>
<p>可以看到系统提示hello-world.txt文件在本地工作树中找不到踪迹，并提示我们使用’git add’来进行操作。</p>
<p>接着输入命令：<code>git add hello-world.txt</code><br>到这一步,文件hello-world.txt就被添加到索引中了</p>
<p>然后再次查看工作树状态：<code>git status</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>\<span class="title">test</span>-<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">status</span></span></div><div class="line"><span class="title">On</span> <span class="title">branch</span> <span class="title">master</span></div><div class="line"><span class="title">Your</span> <span class="title">branch</span> <span class="title">is</span> <span class="title">up</span>-<span class="title">to</span>-<span class="title">date</span> <span class="title">with</span> '<span class="title">origin</span>/<span class="title">master</span>'.</div><div class="line"><span class="title">Changes</span> <span class="title">to</span> <span class="title">be</span> <span class="title">committed</span>:</div><div class="line">  (<span class="title">use</span> "<span class="title">git</span> <span class="title">reset</span> <span class="title">HEAD</span> &lt;<span class="title">file</span>&gt;..." <span class="title">to</span> <span class="title">unstage</span>)</div><div class="line"></div><div class="line">        <span class="title">new</span> <span class="title">file</span>:   <span class="title">hello</span>-<span class="title">world.txt</span></div></pre></td></tr></table></figure></p>
<p>系统提示检测到了一个新的文件，并提示我们使用’git reset head’来进行操作，我们的目的是要将文件提交到版本库，这里就不能使用这个命令了。</p>
<p>我们改输入命令：<code>git commit -m &quot;new file helloworld.txt&quot;</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>\<span class="title">test</span>-<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">commit</span> -<span class="title">m</span> "<span class="title">new</span> <span class="title">file</span> <span class="title">helloworld.txt</span>"</span></div><div class="line">[<span class="title">master</span> 2<span class="title">d620a7</span>] <span class="title">new</span> <span class="title">file</span> <span class="title">helloworld.txt</span></div><div class="line"> 1 <span class="title">file</span> <span class="title">changed</span>, 0 <span class="title">insertions</span>(+), 0 <span class="title">deletions</span>(-)</div><div class="line"> <span class="title">create</span> <span class="title">mode</span> 100644 <span class="title">hello</span>-<span class="title">world.txt</span></div></pre></td></tr></table></figure></p>
<p>到这一步，文件hello-world.txt就被添加到本地库了，此时还没有提交到github远程库中去。</p>
<p>再次查看工作树状态：<code>git status</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>\<span class="title">test</span>-<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">status</span></span></div><div class="line"><span class="title">On</span> <span class="title">branch</span> <span class="title">master</span></div><div class="line"><span class="title">Your</span> <span class="title">branch</span> <span class="title">is</span> <span class="title">ahead</span> <span class="title">of</span> '<span class="title">origin</span>/<span class="title">master</span>' <span class="title">by</span> 1 <span class="title">commit</span>.</div><div class="line">  (<span class="title">use</span> "<span class="title">git</span> <span class="title">push</span>" <span class="title">to</span> <span class="title">publish</span> <span class="title">your</span> <span class="title">local</span> <span class="title">commits</span>)</div><div class="line"><span class="title">nothing</span> <span class="title">to</span> <span class="title">commit</span>, <span class="title">working</span> <span class="title">directory</span> <span class="title">clean</span></div></pre></td></tr></table></figure></p>
<p>系统提示没有任何可以提交的文件，工作目录是干净的。</p>
<p>接下来，我们就要把提交到本地库中的hello-world.txt文件同步到github运程库中去了<br>使用命令:<code>git push -u origin master</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">git</span>\<span class="title">test</span>-<span class="title">git</span>&gt;<span class="title">git</span> <span class="title">push</span> -<span class="title">u</span> <span class="title">origin</span> <span class="title">master</span></span></div><div class="line"><span class="title">error</span>: <span class="title">cannot</span> <span class="title">spawn</span> <span class="title">sh</span>: <span class="title">No</span> <span class="title">such</span> <span class="title">file</span> <span class="title">or</span> <span class="title">directory</span></div><div class="line"><span class="title">Username</span> <span class="title">for</span> '<span class="title">https</span>://<span class="title">github.com</span>': <span class="title">linmuxi</span></div><div class="line"><span class="title">Password</span> <span class="title">for</span> '<span class="title">https</span>://<span class="title">linmuxi</span>@<span class="title">github.com</span>':</div><div class="line"><span class="title">error</span>: <span class="title">cannot</span> <span class="title">spawn</span> <span class="title">sh</span>: <span class="title">No</span> <span class="title">such</span> <span class="title">file</span> <span class="title">or</span> <span class="title">directory</span></div><div class="line"><span class="title">Counting</span> <span class="title">objects</span>: 3, <span class="title">done</span>.</div><div class="line"><span class="title">Delta</span> <span class="title">compression</span> <span class="title">using</span> <span class="title">up</span> <span class="title">to</span> 4 <span class="title">threads</span>.</div><div class="line"><span class="title">Compressing</span> <span class="title">objects</span>: 100% (2/2), <span class="title">done</span>.</div><div class="line"><span class="title">Writing</span> <span class="title">objects</span>: 100% (3/3), 285 <span class="title">bytes</span> | 0 <span class="title">bytes</span>/<span class="title">s</span>, <span class="title">done</span>.</div><div class="line"><span class="title">Total</span> 3 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0)</div><div class="line"><span class="title">To</span> <span class="title">http</span>://<span class="title">github.com</span>/<span class="title">linmuxi</span>/<span class="title">test</span>-<span class="title">git.git</span></div><div class="line">   24<span class="title">c6ae3</span>..2<span class="title">d620a7</span>  <span class="title">master</span> -&gt; <span class="title">master</span></div><div class="line"><span class="title">Branch</span> <span class="title">master</span> <span class="title">set</span> <span class="title">up</span> <span class="title">to</span> <span class="title">track</span> <span class="title">remote</span> <span class="title">branch</span> <span class="title">master</span> <span class="title">from</span> <span class="title">origin</span>.</div></pre></td></tr></table></figure></p>
<p>在输入github账户和密码之后，文件hello-world.txt就被同步到github上去了<br><!-- 也可以简写命令：`git push` 所有提交的文件会被默认同步到当前所在分支下面 --></p>
<p>会用到基础命令：</p>
<pre><code>git --help #查看git命令帮助

git log #查看所有提交的日志记录
git log -2  #查看最近2次提交的日志记录

git status #查看本地工作树的状态

git add . #添加所有文件到索引
git add newFile.txt #添加newFile.txt文件到索引

git commit -m &quot;你好&quot; #将索引中的文件提交到本地库中

git clone giturl #从版本库下载代码

git rm newFile.txt --cached #将newFile.txt从索引中移出

git checkout newFile.txt #撤销newFile.txt的修改
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo其他辅助功能分享]]></title>
      <url>http://www.linmuxi.com/2016/01/29/hexo-other-assist-func/</url>
      <content type="html"><![CDATA[<p>这是关于Hexo的第三篇文章了，这里主要分享下Hexo上一些辅助功能项。<br><a id="more"></a><br>目录：</p>
<ul>
<li>fancybox使用</li>
<li>取消默认hexo处理文件</li>
<li>文章摘要</li>
<li>自定义目录</li>
<li>草稿文章的处理</li>
<li>百度统计</li>
<li>自定义挂件</li>
<li>配置404页面</li>
<li>图床</li>
<li>博客访问量统计</li>
</ul>
<p><strong> fancybox使用 </strong><br>fancybox效果使用，就是在文章头部增加可以切换显示的图片效果，具体效果如下：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/fancybox1.png" alt="fancybox效果"></p>
<p>具体配置是在文章头部添加photos配置项：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">photos: </div><div class="line"><span class="bullet">- </span>http://7xqlat.com1.z0.glb.clouddn.com/gaoqing1.jpg</div><div class="line"><span class="section">- http://7xqlat.com1.z0.glb.clouddn.com/gaoqing2.jpg</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p><strong> 取消默认hexo处理文件 </strong><br>如果不想让hexo默认处理文章，可以在文章头部定义：layout: false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p><strong> 文章摘要 </strong><br>在首页只显示more以上的内容，余文需要点击【&gt; Read More】连接打开全文才能显示，效果如下：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/more1.png" alt="文章摘要效果"><br>具体配置是使用&lt;!-more–&gt;:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"><span class="section"># layout: false</span></div><div class="line">title: Hexo其他辅助功能分享</div><div class="line">date: 2016-01-29 09:09:50</div><div class="line">tags: [第一次]</div><div class="line">categories: [日志,生活]</div><div class="line">photos: </div><div class="line"><span class="bullet">- </span>http://7xqlat.com1.z0.glb.clouddn.com/gaoqing1.jpg</div><div class="line"><span class="section">- http://7xqlat.com1.z0.glb.clouddn.com/gaoqing2.jpg</span></div><div class="line">---</div><div class="line">上面都是在首页显示的摘要信息</div><div class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></div><div class="line">这里是正文信息，只有点击首页的more连接才会显示</div></pre></td></tr></table></figure></p>
<p><strong> 自定义目录 </strong><br>使用命令：<code>hexo new page about</code><br>在source下面会创建一个about目录，里面有个index.md文件<br>将自定义目录挂接到博客首页菜单上去，需要在全局配置文件_config.yml中的menu下面新增About: about即可，其中About是在页面显示的名称，可自定义，about是新创建的目录，名称必须一致</p>
<p><strong> 草稿文章的处理 </strong><br>在source/_drafts目录下面存放的是草稿文章，默认情况下草稿文章是不会发布到博客上面去，可以通过以下两种方式进行发布。<br>1、修改全局配置文件_config.yml的render_drafts为true，此时文章还在_drafts目录下面<br>2、可以通过如下命令将文章迁移到_post目录进行发布，此时文章就在_post目录下面了，_drafts目录下就会被删除掉<br><code>hexo publish draft 草稿文件名称</code><br>新增草稿文章有两种方式：<br>1、自己手动在_drafts目录下新建md文件。<br>2、通过下面命令来新建<br><code>hexo new draft 草稿名称</code></p>
<p><strong> 百度统计 </strong><br>百度统计，可以对博客网站的UV、PV等情况进行监控统计。<br>第一步，需要到<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>去注册账户<br>第二步，登录百度统计管理平台，在网站中心选项卡配置我们的博客地址信息<br>第三步，获取统计的JS代码<br>第四步，在themes/主题/layout/_partial目录下面新建baidu_tongji.ejs文件，将复制的统计js代码粘贴进去，可以在主题_config.yml配置文件中定义一个变量来控制是否启用百度统计。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span>(theme.baidu_tongji)&#123; %&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- baidu统计 --&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">	  hm.src = <span class="string">"//hm.baidu.com/hm.js?265d75f1ac95ef1760822f57dba2111c"</span>;</div><div class="line">	  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </div><div class="line">	  s.parentNode.insertBefore(hm, s);</div><div class="line">	&#125;)();</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- baidu统计end --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>第五步，编辑同目录下面的head.ejs，在&lt;/head&gt;之前增加代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加baidu统计 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">baidu_tongji</span>') %&gt;</span></div><div class="line"> <span class="comment">&lt;!-- end 添加baidu统计 --&gt;</span></div></pre></td></tr></table></figure></p>
<p>第六步，发布hexo博客到github，不知道怎么发布可以参看第一篇文章<a href="2016/01/27/hexo-on-github-build-blog/">《使用Hexo在Github上构建免费Blog应用》</a><br>第七步，在百度统计管理平台-网站中心去验证下首页代码是否安装正确<br>第八步，如果安装正确，一般过24小时就可以百度统计就可以采集到博客的统计信息了</p>
<p><strong> 自定义挂件 </strong><br>在博客的右边显示了很多挂件，hexo默认提供了5个挂件：分类、最近发布的文章、标签、标签云、查询<br>自定义挂件第一步在themes/主题/layout/_widget目录下面新建myWidget.ejs文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget tag"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>自定义挂件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"entry"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">li</span>&gt;</span>自定义挂件1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">li</span>&gt;</span>自定义挂件2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">li</span>&gt;</span>自定义挂件3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"404"</span>&gt;</span>404<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二步：编辑主题下面的配置文件_config.yml,在widgets变量下面增加新建的自定义挂件ejs文件名<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">widgets:</div><div class="line">- search</div><div class="line">- category</div><div class="line">- tag</div><div class="line">- recent_posts</div><div class="line">- tagcloud</div><div class="line">- myWidget</div></pre></td></tr></table></figure></p>
<p>第三步：重启服务并访问<br>其实自定义挂件这里可以放些第三方的小插件等等..</p>
<p><strong> 配置404页面 </strong><br>404页面，用于在请求不到对应资源的时候响应给用户的界面。关于404页面，我们可以做的更有意义些，有很多关于404的公益项目，在这里我们选择<a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯公益404</a>。<br>第一步，在blog根目录下面新建404.html，将腾讯公益404js代码粘贴进去<br><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code><br>第二步，发布blog到github上面，本地是无法看到效果的，一定要发布到github上面去。<br>第三步，<a href="2016/01/29/hello/1">查看效果</a></p>
<p><strong> 图床 </strong><br>之前把所有图片都托管在github上，发现访问有点慢，后来改把所有图片资源都放到<a href="https://portal.qiniu.com/signin" target="_blank" rel="external">七牛云</a>上托管了，速度还可以。<br>七牛注册成功后，会有10GB永久免费存储空间+每月10GB下载流量、10万次PUT请求、100万次Get请求，对于目前个人博客来说已经够用了。在这里我也发一个<a href="https://portal.qiniu.com/signup?code=3ldifmoydek42" target="_blank" rel="external">七牛邀请码</a></p>
<p>先到这里，下面以后再补上<br><del><strong> 博客访问量统计 </strong></del></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客配置留言和分享功能]]></title>
      <url>http://www.linmuxi.com/2016/01/28/hexo-config-leave-message-shared/</url>
      <content type="html"><![CDATA[<p>接上一篇<a href="2016/01/27/hexo-on-github-build-blog/">《使用Hexo在Github上构建免费Blog应用》</a>，这篇介绍下如何在Hexo博客上配置留言和分享功能。<br><a id="more"></a><br>我们的留言控件采用<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>这款插件，话不多说，直接进入主题吧。</p>
<p>第一步，打开<a href="http://duoshuo.com/" target="_blank" rel="external">多说官网</a>,点击“我要安装”，然后选择登录模式，这里可以选择QQ、微信、baidu等账户进行登录</p>
<p>第二步，登录成功后，是多说的管理平台，在左边的导航栏选择“工具”菜单，然后获取插件代码。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/duosuo_1.png" alt="多说管理平台"></p>
<p>第三步，将代码拷贝到comment.ejs文件中。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/duoshuo_2.png" alt="集成多说代码"><br>注意comment.ejs在themes/light/layout/_partial/目录下面，我们可以在全局配置文件_config.yml中添加一个变量duoshuo来控制是否显示多说留言控件。需要根据自身情况修改data-thread-key、data-title、data-url属性值。</p>
<p>第四步，重启hexo，打开浏览器访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看一篇博客，可以看到我们的多说留言已经集成到博客上面去了<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/duoshuo_3.png" alt=""></p>
<p>到这里，多说留言插件就已经正常集成到我们的博客上去了。对于留言的管理，我们可以登录到多说提供的管理平台上去操作，具体的操作步骤就不在本篇讨论了。</p>
<p>接下来，我们配置下分享功能，这里还是采用多说提供的控件</p>
<p>第一步，登录多说管理平台，点击左边菜单“分享”按钮，选好样式之后复制生成的代码。</p>
<p>第二步，将代码拷贝到share.ejs文件中。<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/duoshuo_4.png" alt=""><br>注意share.ejs在themes/light/layout/_partial/post/目录下面，我们可以在themes目录下的配置文件_config.yml中添加一个变量addthis/shared来控制分享功能的显示。同样，这里需要根据自身情况修改data-thread-key、data-title、data-images、data-content、data-url属性值</p>
<p>第三步，重启hexo，打开浏览器访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看一篇博客，可以看到我们的分享功能已经集成到博客上面去了<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/duoshuo_5.png" alt=""></p>
<p>到这里，留言、分享功能就已经全部集成到我们的博客上面去了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo在Github上构建免费Blog应用]]></title>
      <url>http://www.linmuxi.com/2016/01/27/hexo-on-github-build-blog/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;”A fast, simple &amp; powerful blog framework”这是Hexo官方上面的介绍，Hexo是基于Node.js的一个静态blog框架，通过Hexo可以仅仅使用几条简短的命令就能方便我们快速创建自己的blog。Hexo可以部署在Node服务器上，也可以部署在github上面。当然部署在github上好处多多，不紧可以省去服务器的成本，还可以免去了相关系统运维方便的事情。<br><a id="more"></a><br>目录</p>
<ul>
<li>Hexo介绍</li>
<li>Hexo安装</li>
<li>Hexo使用</li>
<li>Hexo发布到Github</li>
<li>Hexo主题</li>
</ul>
<p><strong> Hexo介绍 </strong><br>&nbsp;&nbsp;&nbsp;&nbsp;”A fast, simple &amp; powerful blog framework”这是<a href="http://hexo.io" target="_blank" rel="external">Hexo官方</a>上面的介绍，Hexo是基于Node.js的一个静态blog框架，通过Hexo可以仅仅使用几条简短的命令就能方便我们快速创建自己的blog。Hexo可以部署在Node服务器上，也可以部署在github上面。当然部署在github上好处多多，不紧可以省去服务器的成本，还可以免去了相关系统运维方便的事情。</p>
<p><strong> Hexo安装 </strong><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#查看Node版本</div><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">node</span> -<span class="title">v</span></span></div><div class="line"><span class="title">v0</span>.12.7</div><div class="line"></div><div class="line">#查看<span class="title">Npm</span>版本</div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">npm</span> -<span class="title">v</span></div><div class="line">3.5.3</div><div class="line"></div><div class="line">#全局安装<span class="title">hexo</span>-<span class="title">cli</span></div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">npm</span> <span class="title">install</span> <span class="title">hexo</span>-<span class="title">cli</span> -<span class="title">g</span></div><div class="line"></div><div class="line">#查看<span class="title">hexo</span>版本</div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">hexo</span> -<span class="title">v</span></div><div class="line"><span class="title">hexo</span>-<span class="title">cli</span>: 0.2.0</div><div class="line"><span class="title">os</span>: <span class="title">Windows_NT</span> 6.1.7601 <span class="title">win32</span> <span class="title">x64</span></div><div class="line"><span class="title">http_parser</span>: 2.3</div><div class="line"><span class="title">node</span>: 0.12.7</div><div class="line"><span class="title">v8</span>: 3.28.71.19</div><div class="line"><span class="title">uv</span>: 1.6.1</div><div class="line"><span class="title">zlib</span>: 1.2.8</div><div class="line"><span class="title">modules</span>: 14</div><div class="line"><span class="title">openssl</span>: 1.0.1<span class="title">p</span></div><div class="line"></div><div class="line">#初始化<span class="title">hexo</span></div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">hexo</span> <span class="title">init</span> <span class="title">blog</span></div><div class="line"><span class="title">INFO</span>  <span class="title">Cloning</span> <span class="title">hexo</span>-<span class="title">starter</span> <span class="title">to</span> <span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>\<span class="title">blog</span></div><div class="line"><span class="title">Cloning</span> <span class="title">into</span> '<span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>\<span class="title">blog</span>'...</div><div class="line"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 40, <span class="title">done</span>.</div><div class="line"><span class="title">remote</span>: <span class="title">Total</span> 40 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 40</div><div class="line"><span class="title">Unpacking</span> <span class="title">objects</span>: 100% (40/40), <span class="title">done</span>.</div><div class="line"></div><div class="line">#安装<span class="title">hexo</span></div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>&gt;<span class="title">cd</span> <span class="title">blog</span>&amp;<span class="title">npm</span> <span class="title">install</span></div><div class="line"></div><div class="line">#启动<span class="title">hexo</span></div><div class="line"><span class="title">E</span>:\<span class="title">demo</span>\<span class="title">nodejs</span>\<span class="title">blog</span>&gt;<span class="title">hexo</span> <span class="title">server</span></div><div class="line"><span class="title">INFO</span>  <span class="title">Hexo</span> <span class="title">is</span> <span class="title">running</span> <span class="title">at</span> <span class="title">http</span>://0.0.0.0:4000/. <span class="title">Press</span> <span class="title">Ctrl</span>+<span class="title">C</span> <span class="title">to</span> <span class="title">stop</span>.</div></pre></td></tr></table></figure></p>
<p>到这里Hexo就搭建好了,打开浏览器访问：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 正常情况会显示如下<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo.png" alt="Hexo效果"></p>
<p><strong> Hexo使用 </strong><br>1、Hexo目录和文件<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo_file.png" alt="Hexo目录和文件"><br>node_modules:依赖的nodejs模块文件<br>scaffolds：工具模版文件，文件以md扩展名，语法采用markdown<br>source:存放blog正文内容<br>source_posts:正式发布内容<br>themes:存放blog皮肤样式目录<br>themes\landscape:blog默认样式目录<br>_config.yml:全局配置文件</p>
<p>2、_config.yml<br>全局配置文件，很多网站的相关信息都在这里面进行配置，例如等会要进行配置的root、deploy等属性。</p>
<p>3、hexo -h<br>可以通过help查看hexo可以使用的命令，常用的例如有init、generate、clean、publish、new等。 </p>
<p>4、创建新文章<br>有两种方式创建文章：<br>1：手动在_post目录下面添加md文件<br>2：通过hexo命令创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:\demo\nodejs\blog&gt;hexo new first</div><div class="line">INFO  Created: E:\demo\nodejs\blog\source\_posts\first.md</div></pre></td></tr></table></figure></p>
<p>可以看到在_post目录下新增了first.md文件<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/hexo_new.png" alt=""><br>再次访问：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 可以发现我们刚才新加的文章已经发布上去了。</p>
<p>5、语法<br>关于文章内容采用的语法是有要求的，包括以下三部分：<br>1：基本信息：标题，发布日期，分类目录，标签，类型，固定发布链接<br>2：正文：markdown语法和Swig语法(掌握一个就行)<br>3：特殊标记：引用，链接，图片，代码块，iframe<br>编辑文章内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 我的第一篇文章</div><div class="line">date: 2016-01-26 14:45:07</div><div class="line">tags:</div><div class="line">- 第一次</div><div class="line">- 日记</div><div class="line">categories: </div><div class="line">- 日志</div><div class="line">- 2015</div><div class="line">- 01</div><div class="line">- 26</div><div class="line">---</div><div class="line"></div><div class="line">这是**我的第一篇文章**，是用hexo创建的。</div><div class="line"></div><div class="line"># 引用</div><div class="line">** Markdown语法 **</div><div class="line">&gt; Every interaction is both precious and an opportunity to delight.</div><div class="line"></div><div class="line"># 代码块</div><div class="line">** Markdown语法 **</div><div class="line">`compact([0,1,false,2,&apos;&apos;,3]);`</div><div class="line"></div><div class="line"># 链接</div><div class="line">** Markdown语法 **</div><div class="line">[我的日志](http://www.linmuxi.com)</div><div class="line"></div><div class="line"># 图片</div><div class="line">* 图片，对于本地图片，需要在source目录下面新建一个images目录存放图片 *</div><div class="line"></div><div class="line">** Markdown语法 **</div><div class="line">![这是第一张图片](images/1.png)</div><div class="line"></div><div class="line">![这是第一张图片](http://linmuxi.github.io/me/project/realtimeData/images/realtimeData_02.png)</div></pre></td></tr></table></figure></p>
<p><strong> Hexo发布到Github </strong><br>1、静态化处理<br>github只托管静态文件，所以这里我们需要将hexo项目的node剥离出来生成只包括html、js、css文件的静态资源文件。<br>使用hexo提供的命令可以轻松实现:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">nodejs</span>\<span class="title">blog</span>&gt;<span class="title">hexo</span> <span class="title">generate</span></span></div><div class="line"><span class="title">INFO</span>  <span class="title">Files</span> <span class="title">loaded</span> <span class="title">in</span> 314 <span class="title">ms</span></div><div class="line"><span class="title">INFO</span>  <span class="title">Generated</span>: <span class="title">js</span>/<span class="title">script.js</span></div><div class="line"><span class="title">INFO</span>  <span class="title">Generated</span>: <span class="title">fancybox</span>/<span class="title">jquery.fancybox.pack.js</span></div><div class="line">...</div><div class="line"><span class="title">INFO</span>  36 <span class="title">files</span> <span class="title">generated</span> <span class="title">in</span> 907 <span class="title">ms</span></div></pre></td></tr></table></figure></p>
<p>生成的静态文件全部都在更目录下的public文件夹下面。</p>
<p>2、发布到Github<br>1：在github上新建rep、gh-pages分支<br>这里我的rep命名为：nodejs-hexo<br>2：修改_config.yml<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root: /nodejs-hexo</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/linmuxi/nodejs-hexo.git</div><div class="line">  branch: gh-pages</div></pre></td></tr></table></figure></p>
<p><strong> <span style="color:#FF0000">注意：编辑的时候注意空格问题，冒号后面是有空格的。</span> </strong></p>
<p><strong> Hexo主题 </strong><br>Hexo默认主题是landscape，我们可以到Hexo网站去下载其他主题并应用到我们的blog上面去。<br>首先，找到我们需要的主题git地址，并下载到Hexo根目录下面的thems文件夹下。<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">E:\<span class="title">demo</span>\<span class="title">nodejs</span>\<span class="title">blog</span>&gt;<span class="title">git</span> <span class="title">clone</span> <span class="title">git</span>://<span class="title">github.com</span>/<span class="title">tommy351</span>/<span class="title">hexo</span>-<span class="title">theme</span>-<span class="title">light.git</span> <span class="title">the</span></span></div><div class="line"><span class="title">mes</span>/<span class="title">light</span></div><div class="line"><span class="title">Cloning</span> <span class="title">into</span> '<span class="title">themes</span>/<span class="title">light</span>'...</div><div class="line"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 892, <span class="title">done</span>.</div><div class="line"><span class="title">rRemote</span>: <span class="title">Total</span> 892 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 892<span class="title">eceiving</span> <span class="title">object</span></div><div class="line"><span class="title">Receiving</span> <span class="title">objects</span>:  94% (839/892), 156.01 <span class="title">KiB</span> | 124.00 <span class="title">KiB</span>/<span class="title">s</span></div><div class="line"><span class="title">Receiving</span> <span class="title">objects</span>: 100% (892/892), 346.40 <span class="title">KiB</span> | 124.00 <span class="title">KiB</span>/<span class="title">s</span>, <span class="title">done</span>.</div><div class="line"><span class="title">Resolving</span> <span class="title">deltas</span>: 100% (391/391), <span class="title">done</span>.</div><div class="line"><span class="title">Checking</span> <span class="title">connectivity</span>... <span class="title">done</span>.</div></pre></td></tr></table></figure></p>
<p>这样主题文件就下载好了，然后修改全局配置文件_config.xml,将theme的值改成对应的them文件夹名称，这里我们下载的是light。<br>直接就可以打开浏览器输入：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看应用新主题之后的效果了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js基础中间件Connect]]></title>
      <url>http://www.linmuxi.com/2016/01/26/node-js-connect/</url>
      <content type="html"><![CDATA[<p>什么是中间件？什么是Connect？<br><a id="more"></a><br>中间件应该是个比较广的概念，我们常常听到或接触到的例如有ESB中间件、消息中间件、应用服务器中间件等等,百度之概念为中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。</p>
<p>Connect是Node平台的中间件框架，著名的Express就是基于Connect的。</p>
<p>Nodejs提供了20多种内置的中间件：</p>
<ol>
<li>logger: 用户请求日志中间件</li>
<li>csrf: 跨域请求伪造保护中间件</li>
<li>compress: gzip压缩中间件</li>
<li>basicAuth: basic认证中间件</li>
<li>bodyParser: 请求内容解析中间件</li>
<li>json: JSON解析中间件</li>
<li>urlencoded: application/x-www-form-urlencode请求解析中间件</li>
<li>multipart: multipart/form-data请求解析中间件</li>
<li>timeout: 请求超时中间件</li>
<li>cookieParser: cookie解析中间件</li>
<li>session: 会话管理中间件</li>
<li>cookieSession: 基于cookies的会话中间件</li>
<li>methodOverride: HTTP伪造中间件</li>
<li>reponseTime: 计算响应时间中间件</li>
<li>staticCache: 缓存中间件</li>
<li>static: 静态文件处理中间件</li>
<li>directory: 目录列表中间件</li>
<li>vhost: 虚拟二级域名映射中间件</li>
<li>favicon: 网页图标中间件</li>
<li>limit: 请求内容大小限制中间件</li>
<li>query: URL解析中间件</li>
<li>errorHadnler: 错误处理中间件</li>
</ol>
<p>当然还有很多<a href="https://github.com/senchalabs/connect/wiki" target="_blank" rel="external">第三方中间件</a></p>
<p>关于内置中间件的具体用法可以参考：<a href="http://blog.fens.me/nodejs-connect/" target="_blank" rel="external">Nodejs内置中间件用法</a> <a href="https://github.com/senchalabs/connect#middleware" target="_blank" rel="external">Nodejs内置中间件API</a></p>
<p>这里，我们主要分享下如何实现自定义中间件,下面我们定义了一个中间件，处理逻辑是禁止早上9点以前的访问：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line"></div><div class="line"><span class="comment">//注册自定义中间件(将中间件添加到中间件队列中，等待事件触发执行)</span></div><div class="line">app.use(access).use(test);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> hour = <span class="keyword">new</span> <span class="built_in">Date</span>().getHours();</div><div class="line">	<span class="keyword">if</span>(hour &lt; <span class="number">9</span>)&#123;</div><div class="line">		res.writeHead(<span class="number">503</span>,&#123;<span class="string">"Content-Type"</span>:<span class="string">"text/plain;charset=utf-8"</span>&#125;);</div><div class="line">		res.end(<span class="string">"禁止访问"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		next();<span class="comment">//转入下一个中间件处理</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	res.writeHead(<span class="number">200</span>,&#123;<span class="string">"Content-Type"</span>:<span class="string">"text/plain"</span>&#125;);</div><div class="line">	res.end(<span class="string">"Hello World !!!"</span>);</div><div class="line">&#125;</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p>其实我对中间件的理解就是，定义一个函数对象并注册到中间件队列中，然后等待事件触发进行回调该函数对象。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js日志管理log4js]]></title>
      <url>http://www.linmuxi.com/2016/01/25/node-js-log4js/</url>
      <content type="html"><![CDATA[<p>Nodejs采用log4js进行日志管理，log4js的输出级别有6个: trace, debug, info, warn, error, fatal<br><a id="more"></a><br><strong> 安装log4js </strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install log4js</div></pre></td></tr></table></figure></p>
<p><strong> 代码app.js </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">var</span> log4js = <span class="built_in">require</span>(<span class="string">"./logger"</span>);</div><div class="line"><span class="keyword">var</span> logger = log4js.logger(<span class="string">"normal"</span>,<span class="string">"info"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">日志级别对应规则：</div><div class="line">http responses 3xx, level = WARN</div><div class="line">http responses 4xx &amp; 5xx, level = ERROR</div><div class="line">else, level = INFO</div><div class="line">**/</div><div class="line">app.use(log4js.connectLogger(logger,&#123;<span class="attr">level</span>:<span class="string">"auto"</span>&#125;));</div><div class="line"></div><div class="line">app.all(<span class="string">"*"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	logger.info(req.ip+<span class="string">"  "</span>+req.originalUrl+<span class="string">" access"</span>);</div><div class="line">	next();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.all(<span class="string">"/hello"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	res.sendfile(<span class="string">"hello.html"</span>);</div><div class="line">&#125;);</div><div class="line">app.all(<span class="string">"/hello2"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	res.send(<span class="string">"hello"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	logger.trace(<span class="string">"服务启动trace"</span>);</div><div class="line">	logger.debug(<span class="string">"服务启动debug"</span>);</div><div class="line">	logger.info(<span class="string">"服务启动info"</span>);</div><div class="line">	logger.warn(<span class="string">"服务启动warn"</span>);</div><div class="line">	logger.error(<span class="string">"服务启动error"</span>);</div><div class="line">	logger.fatal(<span class="string">"服务启动fatal"</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"服务启动console.log"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong> 代码logger.js </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> log4js = <span class="built_in">require</span>(<span class="string">"log4js"</span>);</div><div class="line">log4js.configure(&#123;</div><div class="line">	<span class="attr">appenders</span>:[</div><div class="line">		&#123;</div><div class="line">			<span class="attr">type</span>:<span class="string">"console"</span><span class="comment">//控制台输出日志</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">type</span>:<span class="string">"file"</span>,<span class="comment">// 文件记录日志</span></div><div class="line">			filename:<span class="string">'logs/access.log'</span>,<span class="comment">// logs目录必须手动新建</span></div><div class="line">			maxLogSize:<span class="number">1024</span>,<span class="comment">//文件最大size 单位：K</span></div><div class="line">			backups:<span class="number">3</span>,<span class="comment">// 备份文件总数,默认1</span></div><div class="line">			category:<span class="string">'normal'</span><span class="comment">//日志类型，下面getLogger对象就是根据这个</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">replaceConsole</span>:<span class="literal">true</span>	<span class="comment">//以[INFO] console代替console默认样式</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">exports.logger = <span class="function"><span class="keyword">function</span>(<span class="params">category,level</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> logger = log4js.getLogger(category);</div><div class="line">	logger.setLevel(level);</div><div class="line">	<span class="keyword">return</span> logger;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.connectLogger = <span class="function"><span class="keyword">function</span>(<span class="params">logger,options</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> log4js.connectLogger(logger,options);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> 运行输出 </strong><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/log4js.png" alt="Log4js打印效果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js+Express+ejs基础入门]]></title>
      <url>http://www.linmuxi.com/2016/01/19/nodejs-express-ejs-demo01/</url>
      <content type="html"><![CDATA[<p>学习Nodejs、express做的一个简单分页查询，前端分页控件用的是bootstrap-paginator<br><a id="more"></a><br><strong> dbhelper </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</div><div class="line"><span class="keyword">var</span> pool = mysql.createPool(&#123;</div><div class="line">	<span class="attr">host</span>:<span class="string">"localhost"</span>,</div><div class="line">	<span class="attr">user</span>:<span class="string">"root"</span>,</div><div class="line">	<span class="attr">password</span>:<span class="string">"root"</span>,</div><div class="line">	<span class="attr">database</span>:<span class="string">"mydb"</span>,</div><div class="line">	<span class="attr">port</span>:<span class="string">"3306"</span>,</div><div class="line">	<span class="attr">connectionLimit</span>:<span class="number">10</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.query = <span class="function"><span class="keyword">function</span>(<span class="params">sql,callback</span>)</span>&#123;</div><div class="line">		pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,conn</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"获取连接失败,%s"</span>,err);</div><div class="line"></div><div class="line">			conn.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,rows,fields</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"查询失败,%s"</span>,err);</div><div class="line">				callback(rows);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			conn.release();</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">sql,callback</span>)</span>&#123;</div><div class="line">		pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,conn</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"获取连接失败,%s"</span>,err);</div><div class="line"></div><div class="line">			conn.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"新增失败,%s"</span>,err);				</div><div class="line">				callback(res.insertId);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			conn.release();</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span>(<span class="params">sql,callback</span>)</span>&#123;</div><div class="line">		pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,conn</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"获取连接失败,%s"</span>,err);</div><div class="line"></div><div class="line">			conn.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"修改失败,%s"</span>,err);			</div><div class="line">				<span class="comment">//callback(res.changedRows);</span></div><div class="line">				callback(res.affectedRows);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			conn.release();</div><div class="line">		&#125;)</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">this</span>.delete = <span class="function"><span class="keyword">function</span>(<span class="params">sql,callback</span>)</span>&#123;</div><div class="line">		pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,conn</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"获取连接失败,%s"</span>,err);</div><div class="line"></div><div class="line">			conn.query(sql,<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(err)<span class="built_in">console</span>.log(<span class="string">"删除失败,%s"</span>,err);</div><div class="line">				callback(res.affectedRows);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			conn.release();</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.helper = helper;</div></pre></td></tr></table></figure></p>
<p><strong> Controller </strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.set(<span class="string">"view engine"</span>,<span class="string">"ejs"</span>);</div><div class="line">app.set(<span class="string">"views"</span>,<span class="string">"../views"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dbhelper = <span class="built_in">require</span>(<span class="string">"./dbhelper"</span>);</div><div class="line"><span class="keyword">var</span> helper = <span class="keyword">new</span> dbhelper.helper();</div><div class="line"></div><div class="line"><span class="keyword">var</span> rootContext = <span class="string">"/test"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapRootContextUrl</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> rootContext+url;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//静态资源托管</span></div><div class="line">app.use(wrapRootContextUrl(<span class="string">"/user"</span>),express.static(<span class="string">"../../nodejs-paginator"</span>));</div><div class="line"></div><div class="line">app.get(<span class="string">'/(test)?'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	res.send(<span class="string">"welcome!"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(wrapRootContextUrl(<span class="string">"/user/userList"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> p = req.query.p;</div><div class="line">	<span class="keyword">var</span> limit = req.query.limit;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> data = &#123;<span class="attr">currentPage</span>:p,<span class="attr">totalPages</span>:<span class="number">0</span>&#125;;</div><div class="line">	helper.query(<span class="string">"select count(1) count from user_info"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(result)&#123;</div><div class="line">			data.totalPages = <span class="built_in">Math</span>.ceil(result[<span class="number">0</span>].count/limit);</div><div class="line">			<span class="comment">//console.log("获取总数："+data.totalPages);</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		helper.query(<span class="string">"SELECT id,user_name userName,PASSWORD password FROM user_info LIMIT "</span>+(p<span class="number">-1</span>)*limit+<span class="string">","</span>+limit,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">			data.items = result;</div><div class="line">			<span class="comment">//console.log("返回前获取："+data.totalPages);</span></div><div class="line">			res.render(<span class="string">"index"</span>,data);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"服务启动"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong> Ejs模版 </strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset="UTF-8"&gt;</div><div class="line">	&lt;title&gt;用户列表&lt;/title&gt;</div><div class="line"></div><div class="line">    &lt;link rel="stylesheet" href="css/bootstrap-responsive.css"&gt;</div><div class="line">    &lt;link rel="stylesheet" href="css/bootstrap.css"&gt;</div><div class="line">    &lt;link rel="stylesheet" href="css/documentation.css"&gt;</div><div class="line">    &lt;link rel="stylesheet" href="css/highlight.js/sunburst.css"&gt;</div><div class="line"></div><div class="line">    &lt;script src="lib/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="lib/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="lib/bootstrap-paginator.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;table border="1" style="width:300px;margin:0 auto;margin-top:10px;"&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;ID&lt;/td&gt;</div><div class="line">            &lt;td&gt;UserName&lt;/td&gt;</div><div class="line">            &lt;td&gt;Password&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;%for(var i = 0;i&lt;items.length;i++)&#123; %&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;&lt;%=items[i].id%&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;%=items[i].userName%&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;%=items[i].password%&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;%&#125;%&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line"></div><div class="line">	&lt;div id="example"&gt;&lt;/div&gt;</div><div class="line">	&lt;script type="text/javascript"&gt;</div><div class="line">		var options = &#123;</div><div class="line">			currentPage:"&lt;%=currentPage%&gt;",</div><div class="line">			totalPages:"&lt;%=totalPages%&gt;",</div><div class="line">            size:"large",</div><div class="line">            alignment:"center",</div><div class="line">            itemContainerClass: function (type, page, current) &#123;</div><div class="line">                return (page === current) ? "active" : "pointer-cursor";</div><div class="line">            &#125;,</div><div class="line">            onPageClicked: function(e,originalEvent,type,page)&#123;</div><div class="line">				//alert("Page item clicked, type: "+type+" page: "+page);</div><div class="line">            &#125;,</div><div class="line">            onPageChanged: function(e,oldPage,newPage)&#123;</div><div class="line">                //alert("Current page changed, old: "+oldPage+" new: "+newPage);</div><div class="line">            &#125;,</div><div class="line">            pageUrl:function(type,page,current)&#123;</div><div class="line">            	return "/Test/user/userlist?p="+page+"&amp;limit=5";</div><div class="line">            &#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		$("#example").bootstrapPaginator(options);</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js入门]]></title>
      <url>http://www.linmuxi.com/2016/01/17/node-js-intro/</url>
      <content type="html"><![CDATA[<p>本篇主要分享Node环境安装和Hello World示例<br><a id="more"></a><br>目录：</p>
<ul>
<li>Node.js介绍</li>
<li>安装Node环境</li>
<li>Hello World！</li>
</ul>
<p><strong>Node.js介绍</strong><br>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.<br>Node.js是基于Chrome V8 JavaScript引擎构建的JavaScript运行时环境，Node.js使用事件驱动、非阻塞式I/O模型，使其轻量又高效。Node.js的包管理器npm，是全球最大的开源库生态系统。</p>
<p><strong> 安装Node环境 </strong><br>本章节介绍window和Linux下安装Node的方法。<br>Node.js安装包及源码下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_01.png" alt=""></p>
<h3 id="Window上安装Node-js"><a href="#Window上安装Node-js" class="headerlink" title="Window上安装Node.js"></a>Window上安装Node.js</h3><p>1、window安装包(.msi)<br>下载对应操作系统的msi文件，按照提示步骤进行安装，安装完成后，检测PATH环境变量是否包含Nodejs,没有包含则需要将Nodejs的安装路径配置到PATH中。<br>安装配置完成后，在dos命令中输入:<code>node -v</code> 进行检测。</p>
<h3 id="Linux上安装Node-js"><a href="#Linux上安装Node-js" class="headerlink" title="Linux上安装Node.js"></a>Linux上安装Node.js</h3><p>1、源码安装  <!-- 需要安装Git，没有安装请先安装Git：`sudo apt-get install git` --><br>从Github上获取Node.js源码：<code>sudo git clone https://github.com/nodejs/node.git</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_02.png" alt=""></p>
<p>创建编译文件：<code>sudo ./configure</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_03.png" alt=""></p>
<p>编译：<code>sudo make</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_04.png" alt=""></p>
<p>安装：<code>sudo make install</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_05.png" alt=""></p>
<p>查看版本：<code>node -v</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_06.png" alt=""></p>
<p>2、apt-get安装<br>命令：<code>sudo apt-get install nodejs</code> 安装nodejs<br>命令：<code>sudo apt-get install npm</code> 安装npm</p>
<!--
普通安装：sudo apt-get install 软件名称
修复安装：sudo apt-get -f install 软件名称
重新安装：sudo apt-get --reinstall install 软件名称

移除卸载：sudo apt-get remove 软件名称
清除卸载：sudo apt-get --purge remove 软件名称
          sudo apt-get purge 软件名称 (同时清除配置信息)

查看所有安装的包：dpkg-query -l
查看指定软件：dpkg-query -l 软件名称
-->
<p><strong> Hello World </strong></p>
<p>1、交互模式<br>打开终端，输入node回车进入命令交互模式：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_07.png" alt=""></p>
<p>2、脚本模式<br>新建文件helloworld.js,内容为：console.log(“Hello World!”);<br>打开终端，输入命令：<code>node helloworld.js</code><br><img src="http://7xqlat.com1.z0.glb.clouddn.com/nodejs_install_soft_08.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebApp for Android TV]]></title>
      <url>http://www.linmuxi.com/2016/01/14/webapp-for-android-tv/</url>
      <content type="html"><![CDATA[<p>一款在TV上显示实时交易数据的android应用<br><a id="more"></a><br>由于对android这块不是很精通，特别是android做图形化这方面，所以一开始拿到设计效果图就没有考虑用原生android来进行开发，好在项目组也没有做硬性要求。</p>
<p>关于图形报表选择方面，我比较熟悉fusioncharts和echarts，目前个人比较偏向使用echarts，所以就定了这个工具做图形化报表形式。</p>
<p>项目环境是前端我负责，后端其他同事负责，数据交互采用http协议+json格式。</p>
<p>由于页面是采用android的webview嵌入进去的，大家都知道webview的性能确实不咋滴。所以在使用的过程中还是存在很多问题的<br>1、地图图形上的地理位置光标无法正常闪动，暂时也没能解决<br>2、动态刷新图表数据的时候，会出现重影问题。<br>   数据动态刷新是调用echarts的接口方法来实现的，在web浏览器是正常的，但是在tv上就会出现重影的问题，后来没有办法就在每次刷新的时候重新init对象了，问题暂时解决<br>3、动画效果显示会出现卡顿或不显示的问题，后面直接关掉动画效果</p>
<p>android运行环境：4.4.2</p>
<p>全部代码已经提交到github上：<a href="https://github.com/linmuxi/realtimeData" target="_blank" rel="external">https://github.com/linmuxi/realtimeData</a></p>
<p>实现之后的效果图：<br><img src="http://7xqlat.com1.z0.glb.clouddn.com/realtimeData_2016010601.jpg" alt="交易数据"></p>
]]></content>
    </entry>
    
  
  
</search>
